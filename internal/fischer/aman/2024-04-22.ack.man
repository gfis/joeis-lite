A070246	multraf	1	(self, n)-> self.s(0).lcm(ZV(n))./(self.s(0).gcd(ZV(n)))	""	new A004086()	nyi t	a(n)= lcm(n, R(n))/ gcd(n, R(n)), where R(n)(A004086)is the digit reversal of n.
A070553	tablamb	1	0	n -> new Integer[] { 0, 6 }	(n, k)-> Z.TEN.pow(n).*(k).mod(Z.SEVEN)	Rectangular array read by rows: n-th row gives the 7 numbers k*10^n mod 7 for 0 <= k < 7.
A070600	multraf	1	(self, n)-> self.s(0).^(n)	"0"	new A007917()	a(n)= A007917(n)^n for n>1
A070610	lambdan	1	n -> { final Z s = SIGMA(n); return SU(1, s.intValueExact(), k -> s.mod(SIGMA(k)).isZero()? Z.ONE : Z.ZERO)	Number of positive integers k such that sigma(k)divides sigma(n)
A070810	filtpos	1	1	new A054571()	(n, v)-> v.bitCount()== 1 && !ZV(n).IPP()	Numbers n such that phi(n-phi(n))=A054571(n)is a power of 2 and n is not a prime number.	nonn
A070811	filtpos	1	1	new A054571()	(n, v)-> n == 1 || v.bitCount()>  1 && !ZV(n).IPP()	Numbers n such that phi(n-phi(n))=A054571(n)is not a power of 2 and n is not a prime number.	nonn
A070823	multrar	1	(self, n)-> { final String s1 = self.a(n-1).toString(); final String s2 = self.a(n-2).toString(); return new Z(s1 + s2).-(new Z(s2 + s1)).abs(); }	"0,1"	a(1)=0, a(1)=1, a(n+2)=abs(concatenate(a(n+1)a(n))-concatenate(a(n)a(n+1)))
A070828	multraf	0	(self, n)-> Functions.SOPFR.z(self.s(0))	"1,1"	new A000108()	Sum of prime factors of Catalan numbers A000108(n), n>=2, with n=0 and n=1 terms added.	nonn,easy
A071122	multrar	1	(self, n)-> self.a(n - 1).+(Functions.DIGIT_SUM.z(Z2(n)))	""	a(n)= a(n-1)+ sum of decimal digits of 2^n.	base,easy,nonn	1..51
A071123	multrar	1	(self, n)-> self.a(n - 1).+(Functions.DIGIT_SUM.z(FA(n)))	""	a(n)= a(n-1)+ sum of decimal digits of n!.	base,easy,nonn	1..49
A071306	lambdan	1	n -> { final Z p = ZV( 7); final int k = n/2; return p.^(k).+((n & 1)== 1 ? Z.ZERO : Z_1(k + 1)).*(PR(((n & 1)== 1 ? 0 : 1), k - 1, i -> p.^(2*k).-(p.^(2*i)))); }	a(n)= (1/2)* (number of n X n 0..6 matrices M with MM' mod 7 = I, where M' is the transpose of M and I is the n X n identity matrix).	nonn	1..11	nyi
A071309	lambdan	1	n -> { final Z p = ZV(11); final int k = n/2; return p.^(k).+((n & 1)== 1 ? Z.ZERO : Z_1(k + 1)).*(PR(((n & 1)== 1 ? 0 : 1), k - 1, i -> p.^(2*k).-(p.^(2*i)))); }	a(n)= (1/2)* (number of n X n 0..10 matrices with MM' mod 11 = I).	nonn	1..10	nyi
A071413	multrar	0	(self,n)-> self.a(n/2).+(Z_1(n & 1).*(n))	"0"		a(n)= if n=0 then 0 else a(floor(n/2))+n*(-1)^(n mod 2).	sign
A071783	filter	1	new A002385()	v -> { final String s = v.toString(); return s.indexOf('0')>= 0; }	Palindromic primes with at least one zero digit.
A074754	lambdan	1	n -> { final int s = Functions.SIGMA.i(n); return SU(1, s, k -> ZV(n).mod(SIGMA(k)).isZero()? Z.ONE : Z.ZERO); }		Number of integers k such that sigma(k)divides n.
A076611	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '2' || md == '3' || md == '5' || md == '7'; }	Palindromic primes with prime middle digit.
A076613	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return s.length()>= 3 && md != '2' && md != '3' && md != '5' && md != '7'; }	Palindromic primes with nonprime middle digit.
A077100	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	""	new A051612(), new A065387()
A082435	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '0'; }	Palindromic primes with middle digit 0.
A082436	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return s.length()>= 3 && md == '1'; }	Palindromic primes with middle digit 1.
A082438	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '2'; }	Palindromic primes with middle digit 2.
A082439	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '3'; }	Palindromic primes with middle digit 3.
A082440	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '4'; }	Palindromic primes with middle digit 4.
A082441	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '5'; }	Palindromic primes with middle digit 5.
A082442	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '6'; }	Palindromic primes with middle digit 6.
A082443	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '7'; }	Palindromic primes with middle digit 7.
A082444	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '8'; }	Palindromic primes with middle digit 8.
A082445	filter	1	new A002385()	v -> { final String s = v.toString(); final char md = s.charAt(s.length()/2); return md == '9'; }	Palindromic primes with middle digit 9.
A083548	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	""	new A051953().skip(), PREVIOUS
A083551	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	"2"	new A001223().skip(1), PREVIOUS
A083552	multraf	1	(self, n)-> self.s(0)./(self.s(1))	"2"	new A083551(), new A057467()	a(n)= A083551(n)/A057467(n).
A083554	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	"2"	new A006093().skip(1), PREVIOUS
A083555	multraf	1	(self, n)-> self.s(0)./(self.s(1))	"2,2,6"	new A083554(), new A058263()	a(n)= A083554(n)/A058263(n).
A088835	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	""	new A020639(), new A006530()
A093808	filter	1	new A002385()	v -> { final int[] dc = ZUtils.digitCounts(v); return Functions.DIGIT_SUM.z(v).IPP()&& ZV(dc[2] + dc[3] + dc[5] + dc[7]).IPP(); }	Palindromic primes with property that sum of digits is prime and number of prime digits is prime.
A093868	multraf	1	(self, n)-> self.s(0).min(self.s(1))	""	new A034694(), new A038700()
A109184	filter	1	new A002385()	v -> Functions.DIGIT_SUM.l(v)== 20	Palindromic primes with digit sum 20.
A109185	filter	1	new A002385()	v -> Functions.DIGIT_SUM.l(v)== 40	Palindromic primes with digit sum = 40.
A112594	lambdan	0	n -> ZV(n).sqrt().*(2).+(n)
A116368	central	1	new A116366()	%N A116368 Central terms of the triangle in A116366.
A124447	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	""	new A066840(), new A124440()
A136126	trilambn	1	1	0	(n, k)-> SU(1, k + 1, i -> Z_1(k + 1 - i).*(FA(i)).*(ZV(i).^(n - 1 - k)).*(S2(k + 1, i)))	T(n,k)= Sum_{i=1..k+1} (-1)^(k+1-i)*i!*i^(n-1-k)*Stirling2(k+1,i)(0 <= k <= n-1).
A146986	trilamb0	0	(n,k)-> n < 2 ? BI(n, k): BI(n, k).+((ZV(2).^(n-1)).*(BI(n - 2, k - 1)))
A146987	trilamb0	0	(n,k)-> n < 2 ? BI(n, k): BI(n, k).+((ZV(3).^(n-1)).*(BI(n - 2, k - 1)))
A146988	trilamb0	0	(n,k)-> n < 2 ? BI(n, k): BI(n, k).+((ZV(4).^(n-1)).*(BI(n - 2, k - 1)))
A146990	trilamb0	0	(n,k)-> n < 2 ? BI(n, k): BI(n, k).+((ZV(n).^(n-1)).*(BI(n - 2, k - 1)))
A160026	filter	1	new A000040()	p -> p.^(4).+(83602).IPP()	Primes p such that p^4 + 17^4 + 3^4 is prime.	easy,nonn	1..46
A160027	parmof3	1	A274022	0	15	nyi Fto	Primes of the form 2^(2^k)+15.
A160028	parmof3	1	A274022	0	81	nyi Fto	Primes of the form 2^(2^k)+81.
A160029	parmof3	1	A274022	0	51	nyi to	Primes of the form 2^(2^n)+51.
A160032	parmof3	1	A274022	0	93	nyi pto	Primes of the form 2^(2^n)+93.
A160033	parmof3	1	A274022	0	757	nyi to	Primes of the form 2^(2^n)+757.
A171096	filnum	1	1	n -> Functions.MERTENS.l(n) == -1		(M = Mertens's function A002321).
A171097	filnum	1	1	n -> Functions.MERTENS.l(n) == -2		(M = Mertens's function A002321).
A171098	filnum	1	1	n -> Functions.MERTENS.l(n) == -3		(M = Mertens's function A002321).
A171235	filnum	1	1	n -> Functions.MERTENS.l(n) == -4		(M = Mertens's function A002321).
A171236	filnum	1	1	n -> Functions.MERTENS.l(n) == -5		(M = Mertens's function A002321).
A171374	filnum	1	1	n -> Functions.MERTENS.l(n) == -6		(M = Mertens's function A002321).
A171383	filnum	1	1	n -> Functions.MERTENS.l(n) == -7		(M = Mertens's function A002321).
A171391	filnum	1	1	n -> Functions.MERTENS.l(n) == -8		(M = Mertens's function A002321).
A171392	filnum	1	1	n -> Functions.MERTENS.l(n) == -9		(M = Mertens's function A002321).
A171393	filnum	1	1	n -> Functions.MERTENS.l(n) == -10	(M = Mertens's function A002321).
A171395	filnum	1	1	n -> Functions.MERTENS.l(n) == -12	(M = Mertens's function A002321).
A171403	filnum	1	1	n -> Functions.MERTENS.l(n) == 2	(	M = Mertens's function A002321).
A171404	filnum	1	1	n -> Functions.MERTENS.l(n) == 3	(	M = Mertens's function A002321).
A171406	filnum	1	1	n -> Functions.MERTENS.l(n) == 4	(	M = Mertens's function A002321).
A171427	filnum	1	1	n -> Functions.MERTENS.l(n) == 5	(	M = Mertens's function A002321).
A171428	filnum	1	1	n -> Functions.MERTENS.l(n) == 6	(	M = Mertens's function A002321).
A171436	filnum	1	1	n -> Functions.MERTENS.l(n) == 7	(	M = Mertens's function A002321).
A215200	trilamb1	1	1	(n, k)-> ZV(KS(n - k, k))
A229344	multraf	1	(self, n)-> Functions.MERTENS.z(self.s(0))	"0"	new A003415()	Mertens's function of the arithmetic derivative of n: a(n)= M(n'), a(1)= 0
A229740	simtraf	1	new A000961()	q -> new Q(q.^(9), 6).+(new Q(q.^(8), 6).*(5)).+(new Q(q.^(7), 3).*(2)).-(new Q(q.^(6), 6)).-(new Q(q.^(5), 6).*(5)).+(new Q(q.^(4), 3)).num()	a(n)= q^9/6+5*q^8/6+2*q^7/3-q^6/6-5*q^5/6+q^4/3 where q = n-th prime power A000961(n).
A244417	multraf	1	(self, n)-> self.s(0).max(self.s(1))	""	new A007814(), new A007949()
A252489	multraf	1	(self, n)-> self.s(0).max(self.s(1))	""	new A061395().skip(1), PREVIOUS
A271710	arrlamb	0	0	0	-1	(n, k)-> Z2(n).xor(Z2(k))	bitxor(2^n,2^k);
A285116	trilamb0	0	(n, k)-> n == 0 || n == k ? ZV(1): BI(n - 1, k - 1).or (BI(n-1, k))
A285117	trilamb0	0	(n, k)-> n == 0 || n == k ? ZV(1): BI(n - 1, k - 1).xor(BI(n-1, k))
A285118	trilamb0	0	(n, k)-> n == 0 || n == k ? ZV(0): BI(n - 1, k - 1).and(BI(n-1, k))
A305099	multraf	1	(self, n)-> self.s(0).min(self.s(1))	"3,3"	new A005235(), new A055211()
A305540	tablamb	1	1	n -> new Integer[] {1, n/2 + 1}	(n, k)-> S2((n + 1)/2, k).+(S2(n/2 + 1, k)).*(FA(k))./(2)
A305541	trilambn	1	1	1	(n, k)-> new Q(SD(n, d -> S2(n/d, k).*(PHI(d))), 2*n).-(new Q(S2((n + 1)/2, k).+(S2(n/2 + 1, k)), 4)).*(FA(k)).num()
A305542	treonk	1	A305541	1	mN	3
A305543	treonk	1	A305541	1	mN	4
A305544	treonk	1	A305541	1	mN	5
A305545	treonk	1	A305541	1	mN	6
A309772	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	"12"	new A008864().skip(1), PREVIOUS
A319665	trilamb0	2	(n, k)-> { int i = 0; final Z z2 = Z2(n); while (!z2.modPow(FA(i), ZV( 5)).equals(ZV(4*k + 1)){ ++i; } return ZV(i); }	Mod(5,2^n)^i!=4*k+1,i++);i
A319666	trilamb0	2	(n, k)-> { int i = 0; final Z z2 = Z2(n); while (!z2.modPow(FA(i), ZV(-3)).equals(ZV(4*k + 1)){ ++i; } return ZV(i); }	Mod(-3,2^n)^i!=4*k+1,i++);i
A320562	trilamb0	1	(n, k)-> { int m = 1; final Z z2 = Z2(n); while (!z2.modPow(FA(m), ZV(m)).equals(ZV(2*k + 1)){ m += 2; } return ZV(m); }	Mod(m,2^n)^m!=2*k+1,m+=2);m
A321902	trilamb0	1	(n, k)-> { int m = 1; final Z z2 = Z2(n); while (!z2.modPow(FA(m), ZV(2*k + 1)).equals(ZV(2*k + 1)){ m += 2; } return ZV(m); }	Mod(m,2^n)^(2*k+1)!=2*k+1,m+=2);m
A321903	trilamb0	1	(n, k)-> { final int m = 1; final Z z2 = Z2(n); while (!z2.modPow(FA(m), ZV(m)).equals(ZV(2*k + 1)){ m += 2 } return ZV(m)}	Mod(m,2^n)^(-(2*k+1))!=2*k+1,m+=2)m
A321904	trilamb0	1	(n, k)-> { final int m = 1; final Z z2 = Z2(n); while (!z2.modPow(FA(m), ZV(m)).equals(ZV(2*k + 1)){ m += 2 } return ZV(m)}	Mod(m,2^n)^(-m)!=2*k+1,m+=2)m
A321905	trilamb0	1	(n, k)-> { int m = 1; final Z z2 = Z2(n); while (!z2.modPow(FA(m), ZV(2*k + 1)).equals(ZV(m)){ m += 2; } return ZV(m); }	Mod(2*k+1,2^n)^m!=m,m+=2);m
A321906	trilamb0	1	(n, k)-> { final int m = 1; final Z z2 = Z2(n); while (!z2.modPow(FA(m), ZV(2*k + 1)).equals(ZV(m)){ m += 2 } return ZV(m)}	Mod(2*k+1,2^n)^(-m)!=m,m+=2)m
A323377	arrlamb	1	1	1	1	(n, k)-> ZV(KS(Puma.prime(n), Puma.prime(k)))
A323378	arrlamb	1	1	1	1	(n, k)-> ZV(KS(-n, k))
A326895	rowsum	1	new A305541()
A331290	multraf	1	(self, n)-> self.s(0).gcd(self.s(1))	""	new A001222(), new A329348()
A346087	multraf	1	(self, n)-> self.s(0).min(self.s(1))	""	new A071178(), new A329348()
A352299	multrar	0	(self, n)-> { final int m = 3; return SU(1, n, k -> self.a(n - k).*(BI(n, k)).*(FA(m).*(k == m ? 1 : 0).+(1))); }	"1"		(1+(k==m)*m!)*binomial(n,k)*b(n-k, m)))
A352300	multrar	0	(self, n)-> { final int m = 4; return SU(1, n, k -> self.a(n - k).*(BI(n, k)).*(FA(m).*(k == m ? 1 : 0).+(1))); }	"1"		(1+(k==m)*m!)*binomial(n,k)*b(n-k,m)))
A352302	multrar	0	(self, n)-> { final int m = 2; return SU(1, n, k -> self.a(n - k).*(BI(n, k)).*(FA(m).*(k == m ? 1 : 0).-(1))); }	"1"		(-1+(k==m)*m!)*binomial(n,k)*b(n-k,m)))
A352303	multrar	0	(self, n)-> { final int m = 3; return SU(1, n, k -> self.a(n - k).*(BI(n, k)).*(FA(m).*(k == m ? 1 : 0).-(1))); }	"1"		(-1+(k==m)*m!)*binomial(n,k)*b(n-k,m)))
A352304	multrar	0	(self, n)-> { final int m = 4; return SU(1, n, k -> self.a(n - k).*(BI(n, k)).*(FA(m).*(k == m ? 1 : 0).-(1))); }	"1"		(-1+(k==m)*m!)*binomial(n,k)*b(n-k,m)))
A352306	multrar	0	(self, n)-> { final int m = 2; return n == 0 ? Z.ONE : SU(1, n, k -> self.a(n - k).*(BI(n, k)).*((k == m ? 1 : 0)+ 1)); }	""		( 1+(k==m))*binomial(n,k)*b(n-k,m)));
A352307	multrar	0	(self, n)-> { final int m = 3; return n == 0 ? Z.ONE : SU(1, n, k -> self.a(n - k).*(BI(n, k)).*((k == m ? 1 : 0)+ 1)); }	""		( 1+(k==m))*binomial(n,k)*b(n-k,m)));
A352308	multrar	0	(self, n)-> { final int m = 4; return n == 0 ? Z.ONE : SU(1, n, k -> self.a(n - k).*(BI(n, k)).*((k == m ? 1 : 0)+ 1)); }	""		( 1+(k==m))*binomial(n,k)*b(n-k,m)));
A352309	multrar	0	(self, n)-> { final int m = 2; return n == 0 ? Z.ONE : SU(1, n, k -> self.a(n - k).*(BI(n, k)).*((k == m ? 1 : 0)- 1)); }	""		(-1+(k==m))*binomial(n,k)*b(n-k,m)));
A352310	multrar	0	(self, n)-> { final int m = 3; return n == 0 ? Z.ONE : SU(1, n, k -> self.a(n - k).*(BI(n, k)).*((k == m ? 1 : 0)- 1)); }	""		(-1+(k==m))*binomial(n,k)*b(n-k,m)));
A352311	multrar	0	(self, n)-> { final int m = 4; return n == 0 ? Z.ONE : SU(1, n, k -> self.a(n - k).*(BI(n, k)).*((k == m ? 1 : 0)- 1)); }	""		(-1+(k==m))*binomial(n,k)*b(n-k,m)));
A353157	multraf	0	(self, n)-> self.s(0).min(self.s(1))	""	new A006257(), new A080079()
A369529	multraf	1	(self, n)-> self.s(0).gcd(self.s(1))	""	new A007953(), new A007954()
A369690	multraf	1	(self, n)-> self.s(0).max(self.s(1))	""	new A119288(), new A053669()
A371115	lambdan	0	n -> RU(0, n/2, k -> new Q(S2(n - k, k), FA(n - 2*k + 1))).*(FA(n)).num()
A371116	lambdan	0	n -> RU(0, n/3, k -> new Q(S2(n - 2*k, k), FA(n-3*k+1))).*(FA(n)).num()
A371117	lambdan	0	n -> RU(0, n/2, k -> new Q(SA(n - k, k), FA(n - 2*k + 1))).*(FA(n)).num()
A371118	lambdan	0	n -> RU(0, n/3, k -> new Q(SA(n - 2*k, k), FA(n-3*k+1))).*(FA(n)).num()
A371119	lambdan	0	n -> RU(0, n/2, k -> new Q(S2(n -   k, k), FA(n - k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371119	lambdan	0	n -> RU(0, n/2, k -> new Q(S2(n -   k, k), FA(n - k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371120	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(n + 2*k).*(S2(n-k, k)), FA(n - k).*(FA(n + k + 1)))).*(FA(n)).num()	n!*sum(k=0, n\2, (n+2*k)!*stirling(n-k, k, 2)/((n-k)!*(n+k+1)!))
A371121	lambdan	0	n -> RU(0, n/2, k -> new Q(SA(n -   k, k), FA(n - k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371121	lambdan	0	n -> RU(0, n/2, k -> new Q(SA(n -   k, k), FA(n - k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371122	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(n + 2*k).*(SA(n-k, k)), FA(n - k).*(FA(n + k + 1)))).*(FA(n)).num()
A371138	lambdan	0	n -> RU(0, n/3, k -> new Q(SA(n - 2*k, k), FA(n - 2*k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371138	lambdan	0	n -> RU(0, n/3, k -> new Q(SA(n - 2*k, k), FA(n - 2*k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371139	lambdan	0	n -> RU(0, n/3, k -> new Q(S2(n - 2*k, k), FA(n - 2*k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371139	lambdan	0	n -> RU(0, n/3, k -> new Q(S2(n - 2*k, k), FA(n - 2*k).*(FA(n -k + 1)))).*(FA(n).^(2)).num()
A371140	lambdan	0	n -> n == 0 ? Z.ONE : RU(0, n/2, k -> new Q(FA(2*k).*(SA(n - k, k)), FA(k + 1).*(FA(n - k)))).*(FA(n)).num()	n! * Sum_{k=0..floor(n/2)} (2*k)!/(k+1)! * |Stirling1(n-k,k)|/(n-k)!
A371141	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(3*k).*(SA(n-k, k)), FA( 2*k + 1).*(FA(n-k)))).*(FA(n)).num()
A371142	lambdan	0	n -> n == 0 ? Z.ONE : RU(0, n/2, k -> new Q(FA(2*k).*(S2(n - k, k)), FA(k + 1).*(FA(n - k)))).*(FA(n)).num()
A371143	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(3*k).*(S2(n-k, k)), FA( 2*k + 1).*(FA(n-k)))).*(FA(n)).num()	n!*sum(k=0, n\2, (3*k)!/(2*k+1)!*stirling(n-k, k, 2)/(n-k)!);
A371145	lambdan	0	n -> n == 0 ? Z.ONE : RU(0, n/3, k -> new Q(ZV(n + 1)).^(k - 1).*(S2(n - 2*k, k))./(FA(n - 2*k))).*(FA(n)).num()
A371147	lambdan	0	n -> n == 0 ? Z.ONE : RU(0, n/3, k -> new Q(ZV(n + 1)).^(k - 1).*(SA(n - 2*k, k))./(FA(n - 2*k))).*(FA(n)).num()
A371227	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(2*n - 2*k).*(SA(n - k, k)), FA(n - k).*(FA(2*n - 3*k + 1)))).*(FA(n)).num()	n! * Sum_{k=0..floor(n/2)} (2*n-2*k)! * |Stirling1(n-k,k)|/( (n-k)! * (2*n-3*k+1)!)
A371228	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(2*n - k).*(SA(n - k, k)), FA(n - k).*(FA(2*n - 2*k + 1)))).*(FA(n)).num()
A371229	lambdan	0	n -> RU(0, n/2, k -> new Q(SA(n - k, k), (FA(n-k)).*(FA(2*n - k + 1)))).*(FA(n)).*(FA(2*n)).num()
A371230	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(2*n +   k).*(SA(n-k, k)), FA(n - k))./(FA(2*n + 1))).*(FA(n)).num()
A371231	lambdan	0	n -> RU(0, n/2, k -> new Q(SA(n - k, k), (FA(n-k)).*(FA(3*n - k + 1)))).*(FA(n)).*(FA(3*n)).num()
A371232	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(3*n +   k).*(SA(n-k, k)), FA(n - k))./(FA(3*n + 1))).*(FA(n)).num()
A371233	lambdan	0	n -> RU(0, n/3, k -> new Q(FA(2*n - 4*k).*(SA(n - 2*k, k)), FA(n - 2*k).*(FA(2*n - 5*k + 1)))).*(FA(n)).num()
A371234	lambdan	0	n -> RU(0, n/3, k -> new Q(SA(n - 2*k, k), (FA(n-2*k)).*(FA(2*n - k + 1)))).*(FA(n)).*(FA(2*n)).num()
A371235	lambdan	0	n -> RU(0, n/3, k -> new Q(FA(2*n + k).*(SA(n - 2*k, k)), FA(n - 2*k).*(FA(2*n + 1)))).*(FA(n)).num()
A371262	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(2*n - 2*k).*(S2(n - k, k)), FA(n - k).*(FA(2*n - 3*k + 1)))).*(FA(n)).num()
A371270	lambdan	0	n -> RU(0, n/2, k -> new Q(S2(n - k, k), (FA(n-k)).*(FA(2*n - k + 1)))).*(FA(n)).*(FA(2*n)).num()
A371271	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(2*n +   k).*(S2(n-k, k)), FA(n - k))./(FA(2*n + 1))).*(FA(n)).num()
A371272	lambdan	0	n -> RU(0, n/2, k -> new Q(S2(n - k, k), (FA(n-k)).*(FA(3*n - k + 1)))).*(FA(n)).*(FA(3*n)).num()
A371273	lambdan	0	n -> RU(0, n/2, k -> new Q(FA(3*n +   k).*(S2(n-k, k)), FA(n - k))./(FA(3*n + 1))).*(FA(n)).num()
A371296	lambdan	0	n -> SU(0, n, k -> Z2(k).*(FA(2*n+k)).*(S2(n, k)))./(FA(2*n + 1))
A371296	lambdan	0	n -> SU(0, n, k -> Z2(k).*(FA(2*n+k)).*(S2(n, k)))./(FA(2*n + 1))
A371297	lambdan	0	n -> SU(0, n, k -> Z2(k).*(FA(2*n+k)).*(SA(n, k)))./(FA(2*n + 1))
A371297	lambdan	0	n -> SU(0, n, k -> Z2(k).*(FA(2*n+k)).*(SA(n, k)))./(FA(2*n + 1))
A371298	lambdan	0	n -> SU(0, n, k -> Z2(n - k).*(FA(2*n+k)).*(S2(n, k)))./(FA(2*n + 1))
A371298	lambdan	0	n -> SU(0, n, k -> Z2(n - k).*(FA(2*n+k)).*(S2(n, k)))./(FA(2*n + 1))
A371299	lambdan	0	n -> SU(0, n, k -> Z2(n - k).*(FA(2*n+k)).*(SA(n, k)))./(FA(2*n + 1))
A371299	lambdan	0	n -> SU(0, n, k -> Z2(n - k).*(FA(2*n+k)).*(SA(n, k)))./(FA(2*n + 1))
A371346	simtraf	1	new A000040()	p -> Puma.prevPrimeZ(p.^(p))	precprime(prime(n)^prime(n))
A371347	simtraf	1	new A000040()	p -> Puma.nextPrimeZ(p.^(p))	nextprime(prime(n)^prime(n))
A371388	lambdan	1	n -> CR.PHI.*(n).floor().*(2*n).-(n*n)	a(n)= 2*n*floor(n*(1 + sqrt(5))/2)- n^2
A371416	lambdan	0	n -> SU(0, n/2, k -> ZV( 3).^(k).*(BI(n + k, k)).*(BI(4*n + k + 2, n - 2*k)))./(n+1)
A371573	multraf	1	(self, n)-> self.s(0).lcm(self.s(1))	""	new A020639(), new A032742()
A371675	lambdan	0	n -> { final int r = 2; final int t = 3; final int u = 1; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371676	lambdan	0	n -> { final int r = 2; final int t = 4; final int u = 1; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371677	lambdan	0	n -> { final int r = 2; final int t = 5; final int u = 1; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371678	lambdan	0	n -> { final int r = 2; final int t = 6; final int u = 1; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371679	lambdan	0	n -> { final int r = 2; final int t = 3; final int u = 2; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371680	lambdan	0	n -> { final int r = 2; final int t = 4; final int u = 2; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371681	lambdan	0	n -> { final int r = 3; final int t = 3; final int u = 3; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371693	lambdan	0	n -> { final int r = 2; final int t = 2; final int u = 2; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371700	lambdan	0	n -> { final int r = 1; final int t = 6; final int u = 1; return RU(0, n, k -> new Q(BI(n, k).*(BI(t*n + u*k + r, n)), t*n + u*k + r)).*(r).num(); }
A371724	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+3*k+3, 2), n).*(BI(n, k))./(new Q(n+3*k+3, 3))).num()
A371725	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+5*k+5, 2), n).*(BI(n, k))./(new Q(n+5*k+5, 5))).num()
A371739	lambdan	0	n -> SU(0, n, k -> BI(5*n, k))
A371758	lambdan	0	n -> SU(0, n/3, k -> BI(2*n - 3*k-1, n - 3*k))
A371854	lambdan	0	n -> SU(0, n/3, k -> BI(2*n - k + 2, n - 3*k))
A371891	lambdan	0	n -> n <= 1 ? Z.ONE : SU(0, n, k -> BI(n, k).*(BI(2*n - 4*k, n - k - 1)))./(n)	sum(k=0, n, binomial(n, k)*binomial(2*n-4*k, n-k-1))/n)
A371892	lambdan	0	n -> n == 0 ? Z.ONE : Z_1(n-1).*(SU(0, n, k -> BI(n, k).*(BI(2*n - 4*k - 2, n - 1))))./(n)
A371893	lambdan	0	n -> n == 0 ? Z.ONE : Z_1(n-1).*(SU(0, n, k -> BI(n, k).*(BI(3*n - 4*k - 2, n - 1))))./(n)
A371914	lambdan	0	n -> n <= 1 ? Z.ONE : SU(0, n, k -> BI(n, k).*(BI(2*n - 5*k, n - k - 1)))./(n)
A371915	lambdan	0	n -> n <= 1 ? Z.ONE : SU(0, n, k -> BI(n, k).*(BI(3*n - 5*k, n - k - 1)))./(n)
A371987	lambdan	0	n -> RU(0, n, k -> BI(new Q(k+1, 3), n)./(k + 1).*(BI(n, k)).*(ZV(9).^(n))).num()
A371988	lambdan	0	n -> RU(0, n, k -> BI(new Q(k+1, 4), n)./(k + 1).*(BI(n, k)).*(ZV(16).^(n))).num()
A371989	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k+1, 3), n)./(n + k + 1).*(BI(n, k)).*(ZV(9).^(n))).num()
A371990	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k+1, 4), n)./(n + k + 1).*(BI(n, k)).*(ZV(16).^(n))).num()
A372002	lambdan	0	n -> RU(0, n, k -> BI(new Q(n-k+1, 2), k).*(ZV(4).^(k)).*(BI(k, n-k))./(n-k+1)).num()
A372003	lambdan	0	n -> RU(0, n, k -> BI(new Q(n-k+1, 3), k).*(ZV(9).^(k)).*(BI(k, n-k))./(n-k+1)).num()
A372004	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+1, 3), k).*(ZV(9).^(k)).*(BI(k, n-k)))./(n+1).num()
A372005	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+1, 4), k).*(ZV(16).^(k)).*(BI(k, n-k)))./(n+1).num()
A372006	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+1, 5), k).*(ZV(25).^(k)).*(BI(k, n-k)))./(n+1).num()
A372010	lambdan	1	n -> ZV(10).^(n - 1).+(ZV(10).^(n/2)).-(1)	10^(n-1)+ 10 ^ (n \ 2)- 1
A372012	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 2), n-k)./(n - k + 1).*(BI(n, k)).*(Z_1(n)).*(ZV(4).^(n - k))).num()
A372013	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 3), n-k)./(n - k + 1).*(BI(n, k)).*(Z_1(n)).*(ZV(9).^(n - k))).num()
A372016	lambdan	0	n -> RU(0, n, k -> BI(new Q(n-k+1, 2), k).*(ZV(4).^(k)).*(BI(n-1, n-k))./(n-k+1)).num()
A372017	lambdan	0	n -> RU(0, n, k -> BI(new Q(n-k+1, 3), k).*(ZV(9).^(k)).*(BI(n-1, n-k))./(n-k+1)).num()
A372018	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+1, 2), k).*(ZV(4).^(k)).*(BI(n-1, n-k)))./(n+1).num()
A372019	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+1, 3), k).*(ZV(9).^(k)).*(BI(n-1, n-k)))./(n+1).num()
A372020	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+1, 4), k).*(ZV(16).^(k)).*(BI(n-1, n-k)))./(n+1).num()
A372021	lambdan	0	n -> RU(0, n, k -> BI(new Q(n-k+1, 2), k).*(ZV(4).^(k)).*(BI(n+k-1, n-k))./(n-k+1)).num()
A372022	lambdan	0	n -> RU(0, n, k -> BI(new Q(n-k+1, 3), k).*(ZV(9).^(k)).*(BI(n+k-1, n-k))./(n-k+1)).num()
A372023	lambdan	0	n -> RU(0, n, k -> BI(new Q(1, 2),  k).*(ZV( 4).^(k)).*(BI(n-1, n-k))).num()
A372024	lambdan	0	n -> RU(0, n, k -> BI(new Q(1, 3), k).*(ZV( 9).^(k)).*(BI(n-1, n-k))).num()
A372035	lambdan	0	n -> RU(0, n, k -> BI(new Q(k+1, 2), k).*(ZV(4).^(k)).*(BI(n-1, n-k))./(k+1)).num()
A372036	lambdan	0	n -> RU(0, n, k -> BI(new Q(k+1, 3), k).*(ZV(9).^(k)).*(BI(n-1, n-k))./(k+1)).num()
A372037	lambdan	0	n -> RU(0, n, k -> BI(new Q(k+1, 2), k).*(ZV(4).^(k)).*(BI(k, n-k))./(k+1)).num()
A372038	lambdan	0	n -> RU(0, n, k -> BI(new Q(k+1, 3), k).*(ZV(9).^(k)).*(BI(k, n-k))./(k+1)).num()
A372039	lambdan	0	n -> RU(0, n, k -> BI(new Q(1, 3), k).*(ZV( 9).^(k)).*(BI(k, n-k))).num()
A372086	lambdan	0	n -> RU(0, n, k -> BI(new Q(3*k-1, 2), k).*(ZV(4).^(k)).*(BI(k, n-k))./(k+1)).num()
A372087	lambdan	0	n -> RU(0, n, k -> BI(new Q(4*k-2, 3), k).*(ZV(9).^(k)).*(BI(k, n-k))./(k+1)).num()
A372088	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k-1, 2), k).*(ZV(4).^(k)).*(BI(k, n-k))./(n-k+1)).num()
A372089	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+2*k-2, 3), k).*(ZV(9).^(k)).*(BI(k, n-k))./(n-k+1)).num()
A372090	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k*2-1, 2), k).*(ZV(4).^(k)).*(BI(k, n-k)))./(n+1).num()
A372091	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k*3-2, 3), k).*(ZV(9).^(k)).*(BI(k, n-k)))./(n+1).num()
A372104	lambdan	0	n -> RU(0, n, k -> BI(new Q(3*k-1, 2), k).*(ZV(4).^(k)).*(BI(n-1, n-k))./(k+1)).num()
A372105	lambdan	0	n -> RU(0, n, k -> BI(new Q(4*k-2, 3), k).*(ZV(9).^(k)).*(BI(n-1, n-k))./(k+1)).num()
A372107	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k-1, 2), k).*(ZV(4).^(k)).*(BI(n-1, n-k))./(n-k+1)).num()
A372108	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+2*k-2, 3), k).*(ZV(9).^(k)).*(BI(n-1, n-k))./(n-k+1)).num()
A372109	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k*2-1, 2), k).*(ZV(4).^(k)).*(BI(n-1, n-k)))./(n+1).num()
A372110	lambdan	0	n -> RU(0, n, k -> BI(new Q(n+k*3-2, 3), k).*(ZV(9).^(k)).*(BI(n-1, n-k)))./(n+1).num()
A372115	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 2), n - k).*(ZV( 4).^(n-k)).*(BI(2*k, k))./(k+1)).num()
A372124	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 3), n - k).*(ZV( 9).^(n-k)).*(BI(2*k, k))./(k+1)).num()
A372125	lambdan	0	n -> RU(0, n , k -> BI(new Q(k, 2), n - k).*(ZV( 4).^(n-k)).*(BI(n+k, k)))./(n+1).num()
A372126	lambdan	0	n -> RU(0, n , k -> BI(new Q(k, 3), n - k).*(ZV( 9).^(n-k)).*(BI(n+k, k)))./(n+1).num()
A372136	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 3), n - k).*(ZV( 9).^(n-k)).*(BI(n+2*k, k))./(n+k+1)).num()
A372137	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 3), n - k).*(ZV( 9).^(n-k)).*(BI(3*k, k))./(2*k+1)).num()
A372138	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 2), n - k).*(ZV( 4).^(n-k)).*(BI(n+2*k, k))./(n+k+1)).num()
A372139	lambdan	0	n -> RU(0, n, k -> BI(new Q(k, 2), n - k).*(ZV( 4).^(n-k)).*(BI(3*k, k))./(2*k+1)).num()
---- 2024-04-22 20:59:20
A069535	filnum	1	1	n -> { final String fas = FA(n).toString(); return fas.indexOf(Integer.toString(n)) >= 0 && fas.indexOf(String.valueOf(Functions.REVERSE.l(n))) >= 0; }	Treated as strings, n and its reversal are substrings of n!.	base,nonn	1..10000
A070565	lambdan	0	n -> ZV(n).-(Functions.DIGIT_PRODUCT.z(n))	n - product of digits of n.
A084236	lambdan	0	n -> Functions.MERTENS.z(Z2(n))	a(n) = M(2^n), where M(n) is Mertens's function, A002321.
A109830	filter	1	new A002385()	v -> { final Z nd = ZV(v.toString().length()); final Z sd = Functions.DIGIT_SUM.z(v); return ZUtils.isPalindrome(nd, 10) && ZUtils.isPalindrome(sd, 10) && nd.IPP() && sd.IPP(); }	Palindromic primes with both the number of digits and the digit sum also palindromic primes.
A111018	filtpos	1	0	new A000108()	v -> v.mod(3) == 0	Indices of Catalan numbers that are divisible by 3.
A111020	filtpos	1	0	new A000108()	v -> v.mod(3) == 2	Indices of Catalan numbers (A000108) that are == 2 mod 3.
A111401	diffs	0	new A273399()	f(f(n+1))-f(f(n)), where f() = Catalan() = A000108.
A126137	simtraf	1	new A037028()	v -> Puma.primePiZ(v)	pi(new A037028())
A171394	filnum	1	1	n -> Functions.MERTENS.l(n) == -11	(M = Mertens's function A002321).
---- 2024-04-22 22:12:29
A070831	filter	1	new A002385()	v -> Functions.DIGIT_SUM.l(v) == 11
A096091	filnum	1	1	n -> Functions.DIGIT_SORT_DESCENDING.z(n).mod(Functions.DIGIT_SORT_ASCENDING.z(n)).isZero()	Numbers n with property that largest number formed from digits of n (A004186(n)) is divisible by smallest number formed from digits of n (A004185(n)).
A122880	lambdan	1	n ->  CAT(n).-(FI(2*n - 1))	A000108(n) - A001519(n), n > 0; A000108 = Catalan numbers, A001519 = odd-indexed Fibonacci numbers.
A126179	trilambn	1	1	1	(n, k) -> (k & 1) == 1 ? ZV(3).^(n - k + 1).*(BI(n - 1, k - 1)).*(CAT((k - 1)/2)) : ZV(3).^(n - k).*(BI(n - 1, k - 1)).*(CAT(k/2))	= 3^(n-k+1)*binomial(n-1,k-1)*c((k-1)/2) if k is odd; T(n,k) = 3^(n-k)*binomial(n-1,k-1)*c(k/2) if k is even;
A130380	simtraf	0	new A000108()	v -> v.testBit(0) ? v.+(1)./(2) : v./(2)	a(n) = ceiling(A000108(n)/2)
A133375	lambdan	0	n -> Functions.DIGIT_SORT_ASCENDING.z(CAT(n))	Catalan numbers with digits sorted in increasing order and zeros suppressed.
A135374	lambdan	1	n -> Functions.DIGIT_SORT_ASCENDING.z(Z2(n).-(1))	a(n) = A004185(2^n - 1) = 2^n - 1, base 10, with digits sorted in increasing order and zeros suppressed.
A193581	lambdan	0	n -> ZV(n).-(Functions.DIGIT_SORT_ASCENDING.z(n))	Sort-and-subtract: a(n) = n - A004185(n).
A272918	lambdan	0	n -> Functions.DIGIT_SORT_ASCENDING.z(FI(n))	a(n) = A004185(A000045(n)). - _Michel Marcus_, May 17 2016
A321540	lambdan	0	n -> Functions.DIGIT_SORT_ASCENDING.z(ZV(3).^(n))	a(n) = A004185(A000244(n)). - _Michel Marcus_, Nov 10 2022
A345681	multraf	0	(self, n) -> Functions.DIGIT_SORT_ASCENDING.z(self.a(n - 1).+(n))	"0"		a(0) = 0; for n >= 1, a(n) = A004185(a(n-1)+n).
A345902	multraf	0	(self, n) -> Functions.DIGIT_SORT_ASCENDING.z(self.a(n - 1).*(n))	"1"		a(0) = 1; for n >= 1, a(n) = A004185(a(n-1)*n).
A371888	holos	0	[[0],[180,-105,15],[-240,158,-26],[72,-70,16],[-12,18,-6],[0,-1,1]]	1,1,2	0	0
