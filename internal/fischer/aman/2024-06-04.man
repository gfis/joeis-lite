---- 2024-06-14 18:45:07
%N A309436 Number of prime parts in the partitions of n into 7 parts.
%N A309437 Number of prime parts in the partitions of n into 8 parts.
%N A309438 Number of prime parts in the partitions of n into 9 parts.
%N A309439 Number of prime parts in the partitions of n into 10 parts.
%N A309463 Number of squarefree parts in the partitions of n into 9 parts.
%N A309464 Number of squarefree parts in the partitions of n into 10 parts.
%N A309511 Number of odd parts in the partitions of n into 3 parts.
%N A309513 Number of even parts in the partitions of n into 3 parts.
%N A309516 Number of odd parts in the partitions of n into 4 parts.
%N A309518 Number of even parts in the partitions of n into 4 parts.
%N A309546 Number of even parts in the partitions of n into 5 parts.
%N A309549 Number of odd parts in the partitions of n into 6 parts.
%N A309551 Number of even parts in the partitions of n into 6 parts.
%N A309622 Number of odd parts in the partitions of n into 7 parts.
%N A309625 Number of even parts in the partitions of n into 7 parts.
%N A309628 Number of odd parts in the partitions of n into 8 parts.
%N A309630 Number of even parts in the partitions of n into 8 parts.
%N A309656 Number of odd parts in the partitions of n into 9 parts.
%N A309658 Number of even parts in the partitions of n into 9 parts.
%N A309660 Number of odd parts in the partitions of n into 10 parts.
%N A309662 Number of even parts in the partitions of n into 10 parts.
A072648	lambdan	0	n -> CR.PHI.log().*(CR.FIVE.sqrt()).*(n).floor()	[seq(floor(log[(sqrt(5)+1)/2](n*sqrt(5))), n=1..120)];
A076290	lambdan	0	n -> SD(n, d -> JF(d).isSemiprime() ? Z.ZERO : ZV(d))	Sum_{d|n} d * [Omega(d) = 2], where Omega is the number of prime factors with multiplicity (A001222) and [ ] is the Iverson bracket. - _Wesley Ivan Hurt_, Jan 28 2021
A077005	simtraf	0	new A069830()	(n, v) -> Functions.PRIME.z(n + 1).-(v)	prime(n+1)-v	1	D069830
A079121	multrar	0	(self, n) -> ComputableReals.SINGLETON.sum(1, n, k -> CV(self.a(k)).^(new Q(n, k)))./(n).floor()	"1,3,8"	floor[(1/n) sum_{k=1..n} a(k)^(n/k)], given a(0)=1, a(1)=3, a(2)=8.
A093046	simtraf	0	new A058328()	v -> Functions.PRIME.z(v)	a(n) = A000040(A058328(n)). -
A093347	lambdan	0	n -> SU(1, n, i -> Z_1(i - 1).*(ZV(3).^(Functions.ORD.i(3, i))))	Sum(i=1..n-1) (-1)^(i-1)*3^valuation(i, 3)
A093348	lambdan	0	n -> SU(1, n, i -> Z_1(i - 1).*(ZV(5).^(Functions.ORD.i(5, i))))	Sum(i=1..n-1) (-1)^(i-1)*5^valuation(i, 5)
A094151	prepend	1	new SimpleTransformSequence(1, new A007908(), (n, v) -> v.modZ(n))	0
A094175	lambdan	1	n -> new Q(n, Functions.DIGIT_SUM.i(n)).round()	rounded(n /sumdigit(n))
A096321	lambdan	0	n -> Functions.PRIME.z(ZV(2).^(Functions.PRIME.i(n)))		a(n) = prime(2^prime(n)).
A096324	lambdan	0	n -> Functions.PRIME.z(ZV(3).^(Functions.PRIME.i(n)))		a(n) = prime(3^prime(n)).
A096325	lambdan	0	n -> Functions.PRIME.z(ZV(4).^(Functions.PRIME.i(n)))		a(n) = prime(4^prime(n)).
A096326	lambdan	0	n -> Functions.PRIME.z(ZV(5).^(Functions.PRIME.i(n)))		a(n) = prime(5^prime(n)).
A105590	lambdan	0	n -> ZV(n + 2).-(SU(0, n, k -> MU(k - ZV(k).^(3).mod(3*k)).negate()))	a(n)=n+2-sum{k=0..n, -mu(k-mod(k^3,3k))}
A105591	lambdan	0	n -> ZV(n + 2).-(SU(0, n, k -> MU(k - ZV(k).^(5).mod(5*k)).negate()))	a(n)=n+2-sum{k=0..n, -mu(k-mod(k^5,5k))}
A105592	lambdan	0	n -> ZV(n + 2).-(SU(0, n, k -> MU(k - ZV(k).^(7).mod(7*k)).negate()))	a(n)=n+2-sum{k=0..n, -mu(k-mod(k^7,7k))}
A107349	simtraf	0	new A106807()	v -> Functions.PRIME_PI.z(v)	pi(v)       		D106807
A129547	multrar	0	(self, n) -> FA(n).-(DF(n - 1)).-(self.a(n - 1))	"0"		a(n)= n! - (n-1)!! - a(n-1), with a(1)=1!-0!!=0.
A192662	lambdan	0	n -> Functions.SQRT.z(FA(Functions.STIRLING1.z(2*n, n).abs()))
A216441	multraf	0	(self, n) -> FA(n).mod(self.s(0))	"1"	new A000166()	a(n) = n! mod !n.
A216443	multraf	0	(self, n) -> DF(n).mod(self.s(0))	"1"	new A000166()	a(n) = n!! mod !n.
A363017	simtraf	0	new A057632()	v -> Functions.PRIME_PI.z(v)	primepi(v)	    	D057632
A373280	multrar	0	(self, n) -> (n % 4 == 0) ? ZV(4).^(n).+(self.a(n/4)) : ZV(4).^(n)	"1,4,16,65"	If n == 0 (mod 4), a(n) = 4^n + a(n/4) otherwise a(n) = 4^n.
A373282	multrar	0	(self, n) -> (n % 6 == 0) ? ZV(6).^(n).+(self.a(n/6)) : ZV(6).^(n)	"1,6,36,216"	If n == 0 (mod 6), a(n) = 6^n + a(n/6) otherwise a(n) = 6^n.

