A285722	arrlamb	1	1	1	-1	(n, k) -> (n == k) ? ZV( 0) : ((n > k) ? PAIRING_89L.apply(n - k, k) : PAIRING_89L.apply(n, k - n))	T(n-k,k), otherwise [when n < k], A(n,k) = T(n,k-n), where T(n,k) is sequence A000027 considered as a two-dimensional table, that is, as a pairing f
A285724	arrlamb	1	1	1	-1	(n, k) -> (n > k) ? PAIRING_89L.apply(Functions.LCM.i(n, k), Functions.GCD.i(n, k)) : PAIRING_89L.apply(Functions.GCD.i(n, k), Functions.LCM.i(n, k))
A285732	arrlamb	1	1	1	-1	(n, k) -> (n == k) ? ZV(-n) : ((n > k) ? PAIRING_89L.apply(n - k, k) : PAIRING_89L.apply(n, k - n))	T(n-k,k), otherwise [when n < k], A(n,k) = T(n,k-n), where T(n,k) is sequence A000027 considered as a two-dimensional table, that is, as a pairing
A286098	arrlamb	0	0	0	-1	(n, k) -> PAIRING_01L.apply(n & k, n | k)	T(n & k, n | k)
A286099	arrlamb	0	0	0	-1	(n, k) -> PAIRING_01L.apply(n | k, n & k)	T(n | k, n & k)
A286101	arrlamb	1	1	1	+1	(n, k) -> PAIRING_89L.apply(Functions.GCD.i(n, k), Functions.LCM.i(n, k))	T(gcd(n,k), lcm(n,k))
A286102	arrlamb	1	1	1	+1	(n, k) -> PAIRING_89L.apply(Functions.LCM.i(n, k), Functions.GCD.i(n, k))	T(lcm(n,k), gcd(n,k)), where T(n,k) is sequence A000027 considered as a two-dimensional table, that is, as a pairing function from N x N to N.
A286108	arrlamb	0	0	0	-1	(n, k) -> PAIRING_01L.apply((n & k)*2, n ^ k)	T(2*(n AND k), n XOR k)
A286109	arrlamb	0	0	0	-1	(n, k) -> PAIRING_01L.apply(n ^ k, (n & k)*2)	T(n ^ k, 2*(n & k))
A286145	arrlamb	0	0	0	-1	(n, k) -> PAIRING_01L.apply(n ^ k, k)	T(n ^ k, k)
A286147	arrlamb	0	0	0	-1	(n, k) -> PAIRING_01L.apply(n ^ k, n)	T(n ^ k, n)
A286150	arrlamb	0	0	0	-1	(n, k) -> PAIRING_01L.apply(n ^ k, (n < k) ? n : k)	T(n ^ k, MIN(n,k))
A286151	arrlamb	0	0	0	-1	(n, k) -> (n > k) ? PAIRING_01L.apply(n ^ k, k) : PAIRING_01L.apply(n, n ^ k)	n > k, A(n,k) = T(J003987(n,k),k), otherwise A(n,k) = T(n,J003987(n,k))	,
A286153	arrlamb	1	1	1	-1	(n, k) -> (n > k) ? PAIRING_01L.apply(n ^ k, k) : PAIRING_01L.apply(n, n ^ k)	n > k, A(n,k) = T(J003987(n,k),k), otherwise A(n,k) = T(n,J003987(n,k))	,
A286155	arrlamb	1	1	1	-1	(n, k) -> (n == k) ? ZV(-n) : ((n > k) ? PAIRING_89L.apply(n ^ k, k) : PAIRING_89L.apply(n, n ^ k))	n = k, A(n,k) = -n, if n > k, A(n,k) = T(J003987(n,k),k), otherwise [when n < k], A(n,k) = T(n,J003987(n,k))	whereT(n,k) is sequence J000027 considered as a two-dimensional table, that is, as a pairing function from N x N to N
A286156	arrlamb	1	1	1	-1	(n, k) -> PAIRING_01L.apply(n % k, n / k)	A(n,k) = T(remainder(n,k), quotient(n,k)), where T(n,k) is sequence A001477
A286234	arrlamb	1	1	1	-1	(n, k) -> PAIRING_89L.apply(Functions.PHI.i(k), (n + k - 1)/k)	Square array A(n,k) = P(A000010(k), floor((n+k-1)/k)), read by descending antidiagonals as A(1,1), A(1,2), A(2,1), etc. Her
A286235	arrlamb	1	1	1	-1	(n, k) -> PAIRING_89L.apply(Functions.PHI.i(n), (n + k - 1)/n)	square array A(n,k) = P(A000010(n), floor((n+k-1)/n)), read by descending antidiagonals as A(1,1), A(1,2), A(2,1),
A286236	arrlamb	1	1	1	-1	(n, k) -> ((n + k - 1) % k != 0) ? ZV(0) : PAIRING_89L.apply(Functions.PHI.i(k), (n + k - 1)/k)	Square array A(n,k) = P(A000010(k), (n+k-1)/k) if k divides (n+k-1), 0 otherwise, read by descending antidiagonals as A(1,1
A286237	arrlamb	1	1	1	-1	(n, k) -> ((n + k - 1) % n != 0) ? ZV(0) : PAIRING_89L.apply(Functions.PHI.i(n), (n + k - 1)/n)	square array A(n,k) = P(A000010(n), (n+k-1)/n) if n divides (n+k-1), 0 otherwise, read by descending antidiagonals
A286239	trilambn	1	1	1	(n, k) -> (n % k != 0) ? ZV(0) : LambdaArray.PAIRING_89L.apply(Functions.PHI.i(n/k), k)	Triangular table: T(n,k) = 0 if k does not divide n, otherwise T(n,k) = P(A000010(n/k), k), where P is sequence A000027 use
A286244	arrlamb	1	1	1	-1	(n, k) -> PAIRING_89L.apply(D046523(k).IVE(), (n + k - 1)/k)	Square array A(n,k) = P(A046523(k), floor((n+k-1)/k)), read by descending antidiagonals as A(1,1), A(1,2), A(2,1), etc. Here P is a two-argument form of s
A286245	arrlamb	1	1	1	-1	(n, k) -> PAIRING_89L.apply(D046523(n).IVE(), (n + k - 1)/n)	square array A(n,k) = P(A046523(n), (n+k-1)/n), read by descending antidiagonals as A(1,1), A(1,2), A(2,1), etc. Here P is a two-argument
A286246	arrlamb	1	1	1	-1	(n, k) -> ((n + k - 1) % k != 0) ? ZV(0) : PAIRING_89L.apply(D046523(k).IVE(), (n + k - 1)/k)	Square array A(n,k) = P(A046523(k), (n+k-1)/k) if k divides (n+k-1), 0 otherwise, read by descending antidiagonals as A(1,1), A(1,2), A(2,1), etc. Here P
A286247	arrlamb	1	1	1	-1	(n, k) -> ((n + k - 1) % n != 0) ? ZV(0) : PAIRING_89L.apply(D046523(n).IVE(), (n + k - 1)/n)	square array A(n,k) = P(A046523(n), (n+k-1)/n) if n divides (n+k-1), 0 otherwise, read by descending antidiagonals as A(1,1), A(1,2), A(2,1), etc
A286249	trilambn	1	1	1	(n, k) -> (n % k != 0) ? ZV(0) : LambdaArray.PAIRING_89L.apply(D046523(n/k).IVE(), k)	Triangular table: T(n,k) = 0 if k does not divide n, otherwise T(n,k) = P(A046523(n/k), k), where P is sequence A000027 used as a pairing function N x N -
