A088308	prepend	0	new SimpleTransformSequence(1, new A002808(), v -> v.modZ(10))	2	2 followed by list of composite numbers mod 10
A088441	lambdan	0	n -> ZV(n % 3 == 0 ? n : (n % 3 == 2 ? 1 : (n - 2)/2))	a(n) = n if n == 0 (mod 3), a(n) = 1 if n == 2 (mod 3), otherwise a(n) = floor((n-2)/2).
A089027	simtraf	0	new A001223()	(n, v) -> ZV(v.compareTo(Z.TWO) <= 0 ? 1 : n + 1)	a(n) =1 if the prime gap A001223(n) is <=2, otherwise a(n)=n+1
A089029	simtraf	0	new A081827()	(n, v) -> ZV(v.compareTo(Z.ZERO) > 0 ? n : 1)	a(n) = n if A081827(n-1)>0; a(n) = 1 if A081827(n-1) <=0.
A089716	filter	1	new A000040()	p -> p.mod(10) == 1 && p.mod(9) <= 2	Primes that are both congruent to 1 mod 10 and congruent to 1 or 2 mod 9
A103487	tuptraf	0	(n, s) -> s[1].+(s[2]).+(s[3]).abs()	"7,11,13,17"	PREVIOUS,PREVIOUS,PREVIOUS,PREVIOUS	a(0)=7; a(1)=11; a(2)=13; a(3)=17; a(n) = |a(n-2)+a(n-3)-a(n-4)|
A106057	filter	1	new A000040()	p -> p.*(1).+( 4).IPP() && p.*( 4).+(1).IPP()	Primes p such that 1*p +  4 and  4*p + 1 are primes.	nonn	1..48	nyi	_Zak Seidov_
A106059	filter	1	new A000040()	p -> p.*(1).+( 6).IPP() && p.*( 6).+(1).IPP()	Primes p such that 1*p +  6 and  6*p + 1 are primes.	nonn	1..10000	nyi	_Zak Seidov_
A106060	filter	1	new A000040()	p -> p.*(1).+( 8).IPP() && p.*( 8).+(1).IPP()	Primes p such that 1*p +  8 and  8*p + 1 are primes.	nonn	1..46	nyi	_Zak Seidov_
A106061	filter	1	new A000040()	p -> p.*(1).+(10).IPP() && p.*(10).+(1).IPP()	Primes p such that 1*p + 10 and 10*p + 1 are primes.	nonn	1..1000	nyi	_Zak Seidov_
A106062	filter	1	new A000040()	p -> p.*(1).+(12).IPP() && p.*(12).+(1).IPP()	Primes p such that 1*p + 12 and 12*p + 1 are primes.	nonn	1..48	nyi	_Zak Seidov_
A106063	filter	1	new A000040()	p -> p.*(1).+(14).IPP() && p.*(14).+(1).IPP()	Primes p such that 1*p + 14 and 14*p + 1 are primes.	nonn	1..49	nyi	_Zak Seidov_
A106064	filter	1	new A000040()	p -> p.*(1).+(16).IPP() && p.*(16).+(1).IPP()	Primes p such that 1*p + 16 and 16*p + 1 are primes.	nonn	1..46	nyi	_Zak Seidov_
A106065	filter	1	new A000040()	p -> p.*(1).+(18).IPP() && p.*(18).+(1).IPP()	Primes p such that 1*p + 18 and 18*p + 1 are primes.	nonn	1..47	nyi	_Zak Seidov_
A106066	filter	1	new A000040()	p -> p.*(1).+(20).IPP() && p.*(20).+(1).IPP()	Primes p such that 1*p + 20 and 20*p + 1 are primes.	nonn	1..48	nyi	_Zak Seidov_
A106067	filter	1	new A000040()	p -> p.*(3).+( 2).IPP() && p.*( 2).+(3).IPP()	Primes p such that 3*p +  2 and  2*p + 3 are primes.	nonn	1..1000	nyi	_Zak Seidov_
A106068	filter	1	new A000040()	p -> p.*(3).+( 4).IPP() && p.*( 4).+(3).IPP()	Primes p such that 3*p +  4 and  4*p + 3 are primes.	nonn	1..534	nyi	_Zak Seidov_
A106069	filter	1	new A000040()	p -> p.*(3).+( 8).IPP() && p.*( 8).+(3).IPP()	Primes p such that 3*p +  8 and  8*p + 3 are primes.	nonn	1..10000	nyi	_Zak Seidov_
A106070	filter	1	new A000040()	p -> p.*(3).+(10).IPP() && p.*(10).+(3).IPP()	Primes p such that 3*p + 10 and 10*p + 3 are primes.	nonn	1..10000	nyi	_Zak Seidov_
A106071	filter	1	new A000040()	p -> p.*(3).+(14).IPP() && p.*(14).+(3).IPP()	Primes p such that 3*p + 14 and 14*p + 3 are primes.	nonn	1..10000	nyi	_Zak Seidov_
A106072	filter	1	new A000040()	p -> p.*(3).+(16).IPP() && p.*(16).+(3).IPP()	Primes p such that 3*p + 16 and 16*p + 3 are primes.	nonn	1..47	nyi	_Zak Seidov_
A106073	filter	1	new A000040()	p -> p.*(3).+(20).IPP() && p.*(20).+(3).IPP()	Primes p such that 3*p + 20 and 20*p + 3 are primes.	nonn	1..50	nyi	_Zak Seidov_
A106074	filter	1	new A000040()	p -> p.*(3).+(22).IPP() && p.*(22).+(3).IPP()	Primes p such that 3*p + 22 and 22*p + 3 are primes.	nonn	1..50	nyi	_Zak Seidov_
A106075	filter	1	new A000040()	p -> p.*(3).+(26).IPP() && p.*(26).+(3).IPP()	Primes p such that 3*p + 26 and 26*p + 3 are primes.	nonn	1..46	nyi	_Zak Seidov_
A106076	filter	1	new A000040()	p -> p.*(3).+(28).IPP() && p.*(28).+(3).IPP()	Primes p such that 3*p + 28 and 28*p + 3 are primes.	nonn	1..50	nyi	_Zak Seidov_
A106077	filter	1	new A000040()	p -> p.*(5).+( 2).IPP() && p.*( 2).+(5).IPP()	Primes p such that 5*p +  2 and  2*p + 5 are primes.	nonn	1..50	nyi	_Zak Seidov_
A106078	filter	1	new A000040()	p -> p.*(5).+( 4).IPP() && p.*( 4).+(5).IPP()	Primes p such that 5*p +  4 and  4*p + 5 are primes.	nonn	1..47	nyi	_Zak Seidov_
A106079	filter	1	new A000040()	p -> p.*(5).+( 6).IPP() && p.*( 6).+(5).IPP()	Primes p such that 5*p +  6 and  6*p + 5 are primes.	nonn,easy	1..10000	nyi	_Zak Seidov_
A106080	filter	1	new A000040()	p -> p.*(5).+( 8).IPP() && p.*( 8).+(5).IPP()	Primes p such that 5*p +  8 and  8*p + 5 are primes.	nonn	1..47	nyi	_Zak Seidov_
A106081	filter	1	new A000040()	p -> p.*(5).+(12).IPP() && p.*(12).+(5).IPP()	Primes p such that 5*p + 12 and 12*p + 5 are both primes.	nonn	1..10000	nyi	_Zak Seidov_
A106082	filter	1	new A000040()	p -> p.*(5).+(14).IPP() && p.*(14).+(5).IPP()	Primes p such that 5*p + 14 and 14*p + 5 are primes.	nonn	1..48	nyi	_Zak Seidov_
A106083	filter	1	new A000040()	p -> p.*(5).+(16).IPP() && p.*(16).+(5).IPP()	Primes p such that 5*p + 16 and 16*p + 5 are primes.	nonn	1..48	nyi	_Zak Seidov_
A106084	filter	1	new A000040()	p -> p.*(5).+(18).IPP() && p.*(18).+(5).IPP()	Primes p such that 5*p + 18 and 18*p + 5 are primes.	nonn	1..51	nyi	_Zak Seidov_
A106085	filter	1	new A000040()	p -> p.*(5).+(22).IPP() && p.*(22).+(5).IPP()	Primes p such that 5*p + 22 and 22*p + 5 are primes.	nonn	1..47	nyi	_Zak Seidov_
A106086	filter	1	new A000040()	p -> p.*(7).+( 2).IPP() && p.*( 2).+(7).IPP()	Primes p such that 7*p +  2 and  2*p + 7 are primes.	nonn	1..10000	nyi	_Zak Seidov_
A106087	filter	1	new A000040()	p -> p.*(7).+( 4).IPP() && p.*( 4).+(7).IPP()	Primes p such that 7*p +  4 and  4*p + 7 are primes.	nonn	1..44	nyi	_Zak Seidov_
A106088	filter	1	new A000040()	p -> p.*(7).+( 6).IPP() && p.*( 6).+(7).IPP()	Primes p such that 7*p +  6 and  6*p + 7 are primes.	nonn	1..48	nyi	_Zak Seidov_
A106089	filter	1	new A000040()	p -> p.*(7).+( 8).IPP() && p.*( 8).+(7).IPP()	Primes p such that 7*p +  8 and  8*p + 7 are primes.	nonn	1..48	nyi	_Zak Seidov_
A106091	filter	1	new A000040()	p -> p.*(7).+(12).IPP() && p.*(12).+(7).IPP()	Primes p such that 7*p + 12 and 12*p + 7 are primes.	nonn	1..10000	nyi	_Zak Seidov_
A106093	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 9	Primes with maximal digit = 9.	nonn,base	1..10000	nyi	_Zak Seidov_ and _Robert G. Wilson v_
A106094	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 8	Primes with maximal digit = 8.	nonn,base	1..10000	nyi	_Zak Seidov_
A106095	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 7	Primes with maximal digit = 7.	nonn,base	1..10000	nyi	_Zak Seidov_
A106096	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 6	Primes with maximal digit   6.	nonn,base,easy	1..45	nyi	_Zak Seidov_
A106097	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 5	Primes with maximal digit = 5.	nonn,base	1..10000	nyi	_Zak Seidov_
A106098	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 4	Primes with maximal digit = 4.	nonn,base	1..10000	nyi	_Zak Seidov_
A106099	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 3	Primes with maximal digit = 3.	nonn,base	1..10000	nyi	_Zak Seidov_
A106100	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) == 2	Primes with maximal digit = 2.	nonn,base	1..10000	nyi	_Zak Seidov_
A106101	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) == 1	Primes with minimal digit = 1.	nonn,base	1..53	nyi	_Zak Seidov_
A106102	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) == 2	Primes with minimal digit   2.	nonn,base,easy	1..46	nyi	_Zak Seidov_
A106103	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) == 3	Primes with minimal digit = 3.	nonn,base	1..38	nyi	_Zak Seidov_
A106104	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) == 4	Primes with minimal digit = 4.	nonn,base	1..36	nyi	_Zak Seidov_
A106105	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) == 5	Primes with minimal digit = 5.	nonn,base	1..44	nyi	_Zak Seidov_
A106106	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) == 6	Primes with minimal digit = 6.	nonn,base	1..40	nyi	_Zak Seidov_
A106107	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) == 7	Primes with minimal digit = 7.	nonn,base	1..10000	nyi	_Zak Seidov_
A106108	tuptraf	1	(n, s) -> s[0].+(ZV(n).gcd(s[0]))	"7"	PREVIOUS	Rowlands prime-generating sequence: a(1) = 7; for n > 1, a(n) = a(n-1) + gcd(n, a(n-1)).	nonn	1..25000	nyi	_N. J. A. Sloane_
A106110	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) > 6	Primes with minimal digit > 6.	nonn,base	1..37	nyi	_Zak Seidov_
A106111	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) > 5	Primes with minimal digit > 5.	nonn,base	1..46	nyi	_Zak Seidov_
A106112	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) > 4	Primes with minimal digit > 4.	nonn,base	1..49	nyi	_Zak Seidov_
A106114	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) > 3	Primes with minimal digit > 3.	nonn,base	1..10000	nyi	_Zak Seidov_
A106115	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) > 2	Primes with minimal digit > 2.	nonn,base	1..56	nyi	_Zak Seidov_
A106116	filter	1	new A000040()	p -> ZUtils.sortDigitsDescending(p).mod(10) > 1	Primes with minimal digit > 1.	nonn,base	1..50000	nyi	_Zak Seidov_
A106118	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) > 1	Primes with maximal digit > 1.	nonn,base	1..58	nyi	_Zak Seidov_
A106119	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) > 2	Primes with maximal digit > 2.	nonn,base	1..58	nyi	_Zak Seidov_
A106120	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) > 3	Primes with maximal digit > 3.	nonn,base	1..57	nyi	_Zak Seidov_
A106121	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) > 4	Primes with maximal digit > 4.	nonn,base	1..56	nyi	_Zak Seidov_
A106122	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) > 5	Primes with maximal digit > 5.	nonn,base	1..55	nyi	_Zak Seidov_
A106123	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) > 6	Primes with maximal digit > 6.	nonn,base	1..55	nyi	_Zak Seidov_
A106124	filter	1	new A000040()	p -> ZUtils.sortDigitsAscending(p).mod(10) > 7	Primes with maximal digit > 7.	nonn,base	1..37	nyi	_Zak Seidov_
A106137	simtraf	0	new A001358()	(n, v) -> v.modZ(n)	n-th semiprime mod n.	nonn	1..1000	nyi	_Shyam Sunder Gupta_
A106138	simtraf	0	new A001358()	v -> v.modZ(2)	Semiprimes (mod 2).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106139	simtraf	0	new A001358()	v -> v.modZ(3)	Semiprimes (mod 3).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106140	simtraf	0	new A001358()	v -> v.modZ(4)	Semiprimes (mod 4).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106141	simtraf	0	new A001358()	v -> v.modZ(5)	Semiprimes (mod 5).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106142	simtraf	0	new A001358()	v -> v.modZ(6)	Semiprimes (mod 6).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106143	simtraf	0	new A001358()	v -> v.modZ(7)	Semiprimes (mod 7).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106144	simtraf	0	new A001358()	v -> v.modZ(8)	Semiprimes (mod 8).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106145	simtraf	0	new A001358()	v -> v.modZ(9)	Semiprimes (mod 9).	nonn	1..105	nyi	_Shyam Sunder Gupta_
A106146	simtraf	0	new A001358()	v -> v.modZ(10)	Semiprimes (mod 10).	nonn	1..10000	nyi	_Shyam Sunder Gupta_
A356764	tuptraf	0	(n, s) -> s[0]./(s[1])	""	new A357741(), new A106125()

# from https://github.com/lucasaugustus/oeis/blob/main/semiprimemods.py
#  A106125: [1, 2, 3, 7, 11, 43, 53, 613367, 613439, 613451, 613523, 613549, 613609, 6384425461, 6384425521, 6384425569, 6384425647]                                                                                                                                                                                                                                                                                                                                                                                                 
#  A106126: [1, 27, 28, 35, 40, 44, 47, 55, 56, 72, 613400, 613401, 613457, 613482, 613530, 613538, 613544, 613550, 613554, 613556, 613560, 613614, 58155520, 58155521, 58155533, 58155537, 58155540, 58155543, 58155545, 58155571, 6384425460, 6384425506, 6384425524, 819217006186, 819217006204, 819217006209, 819217006230, 819217006575, 819217006765, 819217006767, 819217006877, 819217006881, 819217006896, 819217007051]                                                                                   
#  A106127: [1, 2, 4, 39, 51, 52, 71, 6920, 613377, 613381, 613405, 613433, 613437, 613449, 613455, 613536, 613537, 613548, 613557, 613569, 613581, 613583, 613587, 613588, 613608, 613613, 58155550, 58155570, 6384425447, 6384425465, 6384425505, 6384425531, 6384425567]                                                                                                                                                                                                                                         
#  A106128: [1, 3, 6, 36, 46, 78, 6915, 6916, 613375, 613378, 613404, 613406, 613414, 613438, 613448, 613454, 613456, 613508, 613519, 613522, 613532, 613559, 613568, 613570, 613582, 613586, 613598, 58155528, 58155536, 58155549, 6384425454, 6384425520, 6384425522, 6384425528, 6384425638, 819217006168, 819217006207, 819217006208, 819217006228, 819217006231, 819217006582, 819217006666, 819217006874, 819217006880, 819217006882, 819217006886, 819217008932]                                             
#  A106129: [1, 2, 5, 37, 38, 58, 61, 70, 77, 613379, 613413, 613415, 613429, 613485, 613509, 613518, 613521, 613533, 613543, 613599, 6384425449, 6384425459, 6384425463, 6384425517, 6384425557, 6384425574, 6384425634]                                                                                                                                                                                                                                                                                           
#  A106130: [1, 60, 67, 68, 6919, 613380, 613426, 613558, 613596, 58155532, 58155539, 58155541, 58155542, 58155544, 6384425448, 6384425451, 6384425502, 6384425508, 6384425516, 6384425552, 6384425568, 6384425636, 6384425646, 819217006161, 819217006176, 819217006182, 819217006198, 819217006581, 819217006764, 819217006842, 819217007050]                                                                                                                                                                     
#  A106131: [1, 2, 3, 4, 8, 10, 57, 59, 69, 6914, 613376, 613403, 613431, 613432, 613436, 613447, 613453, 613483, 613484, 613507, 613511, 613513, 613516, 613531, 613535, 613541, 613547, 613579, 613580, 613597, 613607, 6384425453, 6384425504, 6384425519, 6384425555, 819217006195, 819217006579, 819217006580, 819217006664, 819217006766, 819217006870]                                                                                                                                                       
#  A106132: [1, 7, 9, 66, 6675, 6918, 613374, 613412, 613418, 613422, 613428, 613434, 613510, 613512, 613514, 613520, 613542, 58155531, 58155569, 58155572, 6384425518, 6384425556, 819217006165, 819217006175, 819217006199, 819217006203, 819217006227, 819217006665, 819217006869]                                                                                                                                                                                                                               
#  A106133: [1, 2, 62, 65, 82, 613417, 613423, 613425, 613427, 613435, 613446, 613515, 613517, 613606, 6384425573, 6384425633, 6384425637, 6384425639, 6384425645, 6384425651]                                                                                                                                                                                                                                                                                                                                      
#  A106134: [1, 3, 5, 6, 13, 15, 80, 86, 6905, 6907, 6908, 6913, 6917, 613373, 613409, 613420, 613421, 613430, 613506, 613534, 613573, 613578, 613600, 58155529, 58155553, 6384425450, 6384425452, 6384425462, 6384425495, 6384425507, 6384425515, 6384425554, 6384425578, 6384425648, 819217006174, 819217006663, 819217006672, 819217006868, 819217006873, 819217006885, 819217008929, 819217008931]                                                                                                              
#  A106135: [1, 2, 4, 12, 14, 64, 79, 81, 83, 84, 85, 6879, 6901, 613419, 613445, 613571, 613605, 58155568, 6384425499, 6384425501, 6384425551, 6384425553, 6384425635, 819217006167, 819217006202, 819217006763, 819217006854, 819217006872]                                                                                                                                                                                                                                                                       
#  A106136: [1, 11, 98, 106, 108, 110, 6877, 6878, 6881, 6902, 6903, 6904, 6906, 6912, 613408, 613410, 613411, 613416, 613424, 613572, 613602, 58155530, 58155551, 58155552, 58155566, 58155567, 58155573, 6384425514, 6384425640, 819217006169, 819217006170, 819217006181, 819217006197, 819217006200, 819217006855, 819217006884, 819217007049, 819217008934]                                                                                                                                                    
#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
#  A357741: [4, 6, 9, 21, 33, 129, 159, 3066835, 3067195, 3067255, 3067615, 3067745, 3068045, 44690978227, 44690978647, 44690978983, 44690979529]                                                                                                                                                                                                                                                                                                                                                                   
#  A357781: [4, 82, 85, 106, 121, 133, 142, 166, 169, 217, 3067001, 3067006, 3067286, 3067411, 3067651, 3067691, 3067721, 3067751, 3067771, 3067781, 3067801, 3068071, 348933121, 348933127, 348933199, 348933223, 348933241, 348933259, 348933271, 348933427, 44690978221, 44690978543, 44690978669, 6553736049489, 6553736049633, 6553736049673, 6553736049841, 6553736052601, 6553736054121, 6553736054137, 6553736055017, 6553736055049, 6553736055169, 6553736056409]                                          
#  A356755: [4, 6, 10, 119, 155, 158, 215, 27682, 3066887, 3066907, 3067027, 3067167, 3067187, 3067247, 3067277, 3067682, 3067687, 3067742, 3067787, 3067847, 3067907, 3067917, 3067937, 3067942, 3068042, 3068067, 348933302, 348933422, 44690978131, 44690978257, 44690978537, 44690978719, 44690978971]                                                                                                                                                                                                          
#  A357807: [4, 9, 15, 111, 141, 237, 27663, 27667, 3066878, 3066893, 3067023, 3067033, 3067073, 3067193, 3067243, 3067273, 3067283, 3067543, 3067598, 3067613, 3067663, 3067798, 3067843, 3067853, 3067913, 3067933, 3067993, 348933171, 348933219, 348933297, 44690978181, 44690978643, 44690978657, 44690978699, 44690979469, 6553736049347, 6553736049659, 6553736049667, 6553736049827, 6553736049851, 6553736052659, 6553736053331, 6553736054995, 6553736055043, 6553736055059, 6553736055091, 6553736071459]
#  A357808: [4, 6, 14, 115, 118, 178, 187, 214, 235, 3066899, 3067069, 3067079, 3067149, 3067429, 3067549, 3067594, 3067609, 3067669, 3067719, 3067999, 44690978147, 44690978217, 44690978245, 44690978623, 44690978903, 44690979022, 44690979442]                                                                                                                                                                                                                                                                  
#  A357023: [4, 185, 206, 209, 27681, 3066905, 3067135, 3067795, 3067985, 348933197, 348933239, 348933251, 348933257, 348933269, 44690978141, 44690978162, 44690978519, 44690978561, 44690978617, 44690978869, 44690978981, 44690979457, 44690979527, 6553736049293, 6553736049413, 6553736049461, 6553736049589, 6553736052653, 6553736054117, 6553736054741, 6553736056405]                                                                                                                                       
#  A356135: [4, 6, 9, 10, 22, 26, 177, 183, 213, 27662, 3066886, 3067021, 3067161, 3067166, 3067186, 3067241, 3067271, 3067421, 3067426, 3067541, 3067561, 3067571, 3067586, 3067661, 3067681, 3067711, 3067741, 3067901, 3067906, 3067991, 3068041, 44690978177, 44690978534, 44690978639, 44690978891, 6553736049566, 6553736052638, 6553736052646, 6553736053318, 6553736054134, 6553736054966]                                                                                                                  
#  A356357: [4, 21, 25, 205, 26707, 27679, 3066877, 3067067, 3067097, 3067117, 3067147, 3067177, 3067557, 3067567, 3067577, 3067607, 3067717, 348933193, 348933421, 348933439, 44690978633, 44690978899, 6553736049327, 6553736049407, 6553736049599, 6553736049631, 6553736049823, 6553736053327, 6553736054959]                                                                                                                                                                                                   
#  A106133sp: [4, 6, 194, 203, 254, 3067093, 3067123, 3067133, 3067143, 3067183, 3067238, 3067583, 3067593, 3068038, 44690979019, 44690979439, 44690979467, 44690979481, 44690979523, 44690979565]                                                                                                                                                                                                                                                                                                                  
#  A106134sp: [4, 9, 14, 15, 35, 39, 249, 267, 27629, 27637, 27641, 27661, 27677, 3066874, 3067054, 3067109, 3067114, 3067159, 3067539, 3067679, 3067874, 3067899, 3068009, 348933183, 348933327, 44690978159, 44690978173, 44690978243, 44690978474, 44690978558, 44690978614, 44690978887, 44690979055, 44690979545, 6553736049401, 6553736053313, 6553736053385, 6553736054953, 6553736054993, 6553736055089, 6553736071441, 6553736071457]                                                                      
#  A106135sp: [4, 6, 10, 34, 38, 202, 247, 253, 259, 262, 265, 27526, 27614, 3067105, 3067235, 3067865, 3068035, 348933418, 44690978503, 44690978517, 44690978867, 44690978881, 44690979455, 6553736049346, 6553736049626, 6553736054114, 6553736054842, 6553736054986]                                                                                                                                                                                                                                             
#  A106136sp: [4, 33, 305, 329, 335, 341, 27519, 27523, 27535, 27619, 27623, 27627, 27635, 27659, 3067051, 3067061, 3067066, 3067091, 3067131, 3067871, 3068021, 348933191, 348933317, 348933323, 348933407, 348933413, 348933449, 44690978609, 44690979491, 6553736049363, 6553736049371, 6553736049459, 6553736049587, 6553736049611, 6553736054851, 6553736055083, 6553736056403, 6553736071483]                                                                                                                 
