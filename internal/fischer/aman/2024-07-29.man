---- 2024-08-04 18:14:06
 A199536	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? 2*floor(n*CR.PHI) + 2*n : (2*floor(n*CR.PHI) + 2*n + 2); }	"1"
 A247067	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? (-4)^3 * self.a(n) : self.a(4*n + 3)=0); }	""
 A106831	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? (1+D001511(2*n))*self.a(n) : (2*self.a(n)); }	"1"
 A183209	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? (3*self.a(n))-1 : (floor((3*self.a(n+1))/2)); }	"1"
 A091952	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? (self.a(n)+1) mod 2 : (2*self.a(2*n)); }	"1"
 A091959	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? (self.a(n)+1) mod 2 : (2*self.a(2*n).+(1)); }	"1"
 A171609	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? (n+1)*self.a(n) : ((n+1)*self.a(n+1)); }	"1"
 A154232	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? (n.^(2)-n-1) + self.a(2*n-2) : ((n.^(2)-n-1)*self.a(2*n-1)); }	"0,1"
 A317542	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? 0 : self.a(4*n+1)=self.a(2*n-1) : self.a(4*n+3)=self.a(n)); }	"1"
 A073059	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? 0 : self.a(4*n+3)=1 : self.a(4*n+1)=self.a(n)); }	""
 A245606	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? 1+D003961(self.a(n)) : (D003961(1+self.a(n))); }	"1"
 A091953	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? 1+self.a(n)(mod 2) : (2*self.a(2*n).+(1)); }	"1"
 A084566	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? 2*self.a(2*n-1)+self.a(n) : (2*self.a(2*n)+2*self.a(n)); }	"1"
 A077138	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(2*n).*(self.a(2*n-1)) : self.a(2*n).+(2*n +1); }	"0"
 A129804	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(3).*(self.a(2*h-1)).-(self.a(2*h-2)) : (self.a(2*h).*(3).-(self.a(2*h-1) - self.a(h-1)); }	"1,2"
 A129770	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(3).*(self.a(2*h-1)) : self.a(2*h).*(3).-(self.a(h-1).*(2)); }	"0,1"
 A129772	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(3).*(self.a(2*h-1)) : self.a(2*h).*(3).-(self.a(h-1).*(2)); }	"1,2"
 A178774	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(3).*(self.a(n)) : (self.a(n) + self.a(n-1)); }	"1,1"
 A083904	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(3).*(self.a(n))+1 : (3*self.a(n)); }	"0"
 A080572	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(3).*(self.a(n))+n.^(2) : (self.a(n)+2*self.a(n+1)+n.^(2)-1); }	"0,0"
 A228934	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(4).*(self.a(2*n-1)) - 4  self.a(2*n+1)=-2*self.a(2*n-1).^(2) + 1 for n >= 3); }	""
 A088697	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(4).*(self.a(n)) + 2 : (2*self.a(n) + 1); }	"0"
 A220466	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(4).*(self.a(n)) - 2^D007814(n) : (n.+(1)); }	""
 A370061	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(6).*(BI(5*n+1, n-1))./(5*n+1) : (4*BI(5*n+4, n)/(5*n+4)); }	""
 A101607	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(7).-(self.a(n)) : ((n-1 mod 3) + 1); }	""
A192893	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? BI(11*h, h)./(10*h + 1) : (BI(11*h + 5, h).*(6)./(10*h + 6)); }	""
A283764	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? F000203(self.a(h)) : F000203(self.a(h)).+(self.a(n+1)); }	"0,1"
 A285742	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? PM(self.a(n)) : (PM(self.a(n)) + PM(self.a(n+1))); }	"0,1"
 A285743	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? PM(self.a(n)) : (PM(self.a(n)+self.a(n+1))); }	"0,1"
A176716	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? PM(h).*(self.a(h)) : PM(h).*(self.a(n)).+(self.a(n+1)); }	"1"
A116570	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? PM(h+1).*(PM(h+2)) : PM(h+1); }	""

 A092152	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? SIGN(MU(2*n) - MU(n)) : self.a(2*n + 1)=MU(2*n + 1)); }	""
 A160230	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n+1)=2*self.a(n) if D007814(n) is even : self.a(2*n)=self.a(2*n+1)+1=2*self.a(n)+3 if D007814(n) is odd); }	"0"
 A110809	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).*(self.a(2*h-1).+(1))./(2) : self.a(2*h).*(self.a(2*h).-(1))./(2); }	"3"
A100343	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).*(D006519(h).+(self.a(2*h-2))) : self.a(2*h-2).*(2).+(self.a(2*h-3)); }	"1,1"
A100342	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).*(D006519(h).+(self.a(2*h-2))) : self.a(2*h-2).*(2).+(self.a(2*h-3)); }	"2,3"
 A077753	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).*(self.a(2*n-2) : ( self.a(2*n-1) + self.a(2*n)); }	"1,2"
 A332657	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).*(PM(2*n+1) : self.a(2*n-1)=self.a(2*n) + PM(2*n-2)); }	"n>=1"
 A091960	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).+((self.a(n)mod 2) : (self.a(2*n).+(1)); }	"1"
 A091856	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).+(1 : (self.a(2*n) + LeastPrimeFactor(self.a(2*n))); }	""
 A256393	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).+(F006530(self.a(2*n-1)) : (self.a(2*n) + F020639(self.a(2*n))); }	"2"
 A160794	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).+(Sum_{j=1..n} Fibonacci(j) : (self.a(2*n) + 1 + Sum_{j=1..n} PM(j)); }	"n>=1"
 A332659	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1).+(PM(2*n+1) : self.a(2*n-1)=self.a(2*n) * PM(2*n-2)); }	"n>=1"
 A099735	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-1)./(self.a(2*n-2) : (self.a(2*n) + self.a(2*n-1)); }	"1,1"
 A157253	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-2).+(n-1)*self.a(2*n-3) + 2*BI(n-1, 2)*self.a(2*n-4) + 3*BI(n-1, 3)*self.a(2*n-8) : self.a(2*n+1)=self.a(2*n) + n*self.a(2*n-1)); }	""
 A135564	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*h-2).-(self.a(n) - 2*self.a(n-1) + self.a(n-2)) : self.a(2*n+1)=self.a(2*n) - (self.a(n-2) - 2*self.a(n-3) + self.a(n-4))); }	"0,1,3,-1,-2,-3,4,2"
#A093050	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).+(ZV((h+1)/2 + 1)) : ZV(2*h); }	""
#A093051	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).+(ZV((h+1)/2 + 1)) : ZV(2*h+1); }	""
A093050	lambdin	0	n -> Functions.VALUATION.z(2, ZV(3).-(3).*(Z2(n-1)))	"0,0,3"
A093051	lambdin	0	n -> Functions.VALUATION.z(2, ZV(3).-(3).*(Z2(n)))	"0,1,4"
A356874	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).+(self.a(h)) : self.a(2*h).+(1); }	""
A080776	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).+(self.a(h-1)).+((n == 1) ? 1 : 0) : self.a(h).*(2); }	"0"
A272569	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h) : self.a(h).+(self.a(h+1)).+(self.a(h).*(4).*(SQRT(self.a(h+1).+(1)))); }	""
A309020	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h) : self.a(h).+(self.a(h+1)).-(self.a(h-1)); }	"0,1"
A309026	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h) : self.a(h-7).+(self.a(h+1)); }	"0,1"

A336878	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h) : self.a(2*h-1).+(ZV(3).*(self.a(h))); }	""
 A277937	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h) : self.a(4*h+1)=self.a(8*h+1)=self.a(h) + 1 : self.a(8*n+3)=self.a(n) : self.a(8*n+5)=self.a(2*n+1) + 1 : self.a(8*n+7)=self.a(4*n+3)); }	""
 A281392	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h) : self.a(4*h+3)=-self.a(h) + 2*self.a(2*h+1) : self.a(8*h+1)=-self.a(2*n+1) + 2*self.a(4*n+1) : self.a(16*n+5)=-2*self.a(2*n+1) + 2*self.a(4*n+1) + self.a(8*n+5)); }	""
 A227326	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) + 2^(2*n) : self.a(2*n+1)=2^(2*n+1)); }	"0"
 A089262	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) + IV[n==1] : self.a(2*n+1)=2*self.a(n)); }	""
 A309154	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (-3 + 2*self.a(3*n+2)); }	""
 A283165	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (2*self.a(n) + (-1)^self.a(n+1)); }	"0,1"
 A269854	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (2+D003961(self.a(n))); }	"1"
 A088698	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (4*self.a(n) + 3); }	"0"
 A246375	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (D003961(1+self.a(h))); }	"1"
 A270426	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (E265341(self.a(h))); }	"1"
 A283167	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (F00203(self.a(h))); }	"1"
 A283187	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (self.a(n) + (-1)^self.a(n+1)); }	"0,1"
 A261393	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (self.a(n) + 3^F000120(n)); }	"0"
 A265158	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (floor(self.a(n)/2)); }	"1"
 A083741	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (2*self.a(n)+self.a(2*n+1), self.a(4*n+3)=-2*self.a(n)+3*self.a(2*n+1).+(1)); }	"0,0"
 A179821	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2) : (4*self.a(n).+(1)); }	""
 A117120	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2).+(1) : (2*self.a(n)); }	"1,2,3,5"
 A087275	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2).+(1) : (2*self.a(n) + floor(log_2(n)) + 1); }	"0"
 A087276	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2).+(1) : (2*self.a(n) + floor(log_2(n)) + 2); }	"1"
 A153154	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).*(2).+(1) : if n even self.a(2*n+1)=2*self.a(n+1) : else self.a(2*n+1)=2*self.a(n-1)); }	"1,3,2"
 A271479	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).+(1) : self.a(2*n+1)=self.a(n+1).+(3)); }	"0"
 A213369	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).negate() : (-self.a(n)-self.a(n + 1) for n>=1); }	"0,1"
 A177219	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).negate() : (-self.a(n) + self.a(n+1)); }	"1"
 A309022	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).negate() : (self.a(n+1) - self.a(n) - self.a(n-1)); }	"0,1"
 A334866	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).^(2) : (E334747(self.a(n))); }	"1"
 A139145	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).^(2) : (self.a(n)*(self.a(n)+1)); }	"1"
 A342682	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h+1).negate()  : (self.a(n) + self.a(n+1)); }	"1"
 A214126	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h-1)+self.a(n) : (self.a(n+1)); }	"1,1"
 A214127	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h-1)+self.a(n) : (self.a(n+1)); }	"1,2"
 A318163	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h-1).negate()  : (-self.a(n-1)-self.a(n)); }	"0,1,1,0"
 A274576	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? floor(n/2) : self.a(2*n+1)=self.a(n)); }	"0"
 A330393	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(h).+(1) : self.a(2*n+1)=self.a(n) + 1); }	""
 A287597	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(h).-(self.a(self.a(n)) : self.a(2*n+1)=self.a(self.a(n)) + self.a(self.a(n+1))); }	"0,1"
 A287601	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(h).-(self.a(self.a(n)) : self.a(2*n+1)=self.a(self.a(n)) + self.a(n-self.a(n))); }	"1,1"
 A287477	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(h).-(self.a(self.a(n)) : self.a(2*n+1)=self.a(n-self.a(n)) + self.a(n-self.a(n+1))); }	"0,1"
A252463	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(h) : D064989(n); }	"1"
A176528	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? ZV(h).*(self.a(h)) : ZV(h).*(self.a(n)).+(self.a(h+1)); }	"1"
 A181616	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? nextPM(self.a(2*n-1).^(2)) : self.a(2*n+1)=nextPM(floor(2*self.a(2*n)/(self.a(2*n-1) + 1))) where nextPM(.) is F007918(.)); }	"5"
A106404	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? Functions.OMEGA.z(h) : ZV(0); }	""
A082735	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? PR(1, 2*n, k -> ZV(n + 2*k)) : PR(1, 2*n + 1, k -> ZV(n + 2*k)); }	"1"
A075825	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(h).-(self.a(h-1)).abs() : self.a(h).+(self.a(h-1)); }	"1,2"

 A077384	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? (2*n+1)*self.a(2*n) : self.a(4*n)=self.a(4*n-1)-4*n, self.a(4*n+2)=self.a(4*n+1) + 4*n+2); }	"1"
 A159782	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? 0 : self.a(4*n)=self.a(4*n-2)=self.a(n) + self.a(n+1)); }	"1,2,2,2,2"
 A241816	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? 1+2*self.a(n) : self.a(4*n)=2*self.a(2*n) : self.a(4*n+2)=4*n+1); }	"0"
 A368624	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? 2*n + 1 : self.a(4*n+2)=0 : self.a(4*n)=4*E344372(n)=4*Sum_{k=1..n} gcd(2*k, n)); }	""
 A268514	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? 3*self.a(n)+1 : self.a(2*n)=2*self.a(n)+self.a(n-1).+(1)); }	"0"
 A094547	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? 4*self.a(2*n) : self.a(2*n)=4*self.a(2*n-1)-self.a(n)); }	""
A208539	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? E106365(n)./(2) : E106365(n).+(ZV(3).*(ZV(2).^(h-1)))./(2); }	"3,3,1"
A208540	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? E106366(n)./(2) : E106366(n).+(ZV(2).*(ZV(3).^(h)))./(2); }	"4,6,4"
A208541	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? E106367(n)./(2) : (E106367(n).+(ZV(5).*(ZV(4).^(h)))./(2))./(2); }	"5,10,10"
A208542	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? E106368(n)./(2) : E106368(n).+(ZV(3).*(ZV(5).^(h)))./(2); }	"6,15,20"
A274716	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? self.a(2*h+1).+(n) : self.a(h); }	"0"
A174418	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? self.a(2*h).+(self.a(2*h-1)) : self.a(2*h-1).*(self.a(2*h-2)); }	""
 A086747	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? self.a(n) : self.a(4*n)=self.a(n) : self.a(4*n+2)=0); }	"1"
 A125186	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 1) ? self.a(n)+self.a(n+1) : self.a(4*n)=2*self.a(2*n)-self.a(n) : self.a(4*n+2)=self.a(2*n+2)+self.a(2*n)); }	"0,0,1"
 
 A340346	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=1 : self.a(2*n)=D006519(2*n) * D003961(self.a(D064989(2*n)))); }	"1,2,1,4"
 A114557	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=2*(PM(n)-1) : self.a(2*n)=PM(n) + 3); }	""
 A144043	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=2*PM(n) : self.a(2*n)=PM(n) + PM(n+1)); }	""
 A163987	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=8*E151785(n-1) : self.a(2*n)=200*E151785(n-1)); }	"n>=2"
 A169606	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=PM(n+2)-3 : self.a(2*n)=PM(n+2)-2); }	""
 A373322	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=self.a(2*n)=Sum_{k=0..n-1} BI(n-1,k)*2^(n-1-k)*self.a(k)); }	"1,1"
 A122961	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=self.a(2*n-3).^(2) * self.a(2*n-2) : self.a(2*n)=2 * self.a(2*n-2) + self.a(2*n-1)); }	"1,1"
 A088371	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=self.a(n) : self.a(2*n)=n+self.a(n)); }	""
 A305299	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=n - 2*self.a(n-1) - 1 : self.a(2*n)=self.a(2*n-1) - self.a(n)); }	"0,1,2"
 A155519	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=n(2*n-2)! : self.a(2*n)=2(2*n-2)!*n.^(2)); }	""
 A085047	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2*n-1)=n.^(2) : self.a(2*n)=n*(2+5*n)); }	""

 A175048	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(2^n)=3*2^n : self.a(4*n)=2*self.a(2*n) : self.a(4*n+1)=4*self.a(2*n)+3 : self.a(4*n+2)=2*self.a(2*n+1) : self.a(4*n+3)=2*self.a(2*n+1).+(1)); }	""

 A321101	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=0 : self.a(3*n+2)=3 - self.a(3*n+1) : self.a(9*n+1)=1 : self.a(9*n+7)=2 : self.a(9*n+4)=3 - self.a(3*n+1)); }	""
 A321102	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=1 : self.a(3*n+2)=1 - self.a(3*n+1) : self.a(9*n+1)=1 : self.a(9*n+7)=0 : self.a(9*n+4)=1 - self.a(3*n+1)); }	""
 A321104	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=1 : self.a(3*n+2)=2 - self.a(3*n+1) : self.a(9*n+1)=0 : self.a(9*n+7)=2 : self.a(9*n+4)=2 - self.a(3*n+1)); }	""
 A321103	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=1 : self.a(3*n+2)=2 - self.a(3*n+1) : self.a(9*n+1)=2 : self.a(9*n+7)=0 : self.a(9*n+4)=2 - self.a(3*n+1)); }	""
 A136442	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=1 : self.a(3*n-1)=0 : self.a(3*n+1)=self.a(n)); }	""
 A220398	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=2 : self.a(3*n+2)=2*self.a(3*n+1) - 2 : self.a(3*n+1)=2*(self.a(3*n-2) - 1).^(2)); }	"1,2,5,8"
 A270743	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=2*n : self.a(3*n+1)=1 : self.a(3*n+2)=n + 1); }	"n>=1"
 A355624	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=3*self.a(n) : self.a(3*n+1)=1-3*self.a(n) : self.a(3*n+2)=2-3*self.a(n)); }	"0"
 A117966	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=3*self.a(n) : self.a(3*n+1)=3*self.a(n).+(1) : self.a(3*n+2)=3*self.a(n).-(1)); }	"0"
 A117967	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=3*self.a(n) : self.a(3*n+1)=3*self.a(n).+(1) : self.a(3*n-1)=3*self.a(n).+(2)); }	"0"
 A117968	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=3*self.a(n) : self.a(3*n+1)=3*self.a(n).+(2) : self.a(3*n-1)=3*self.a(n).+(1)); }	"2"
 A319497	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=9*self.a(n) : self.a(3*n+1)=9*self.a(n).+(1) : self.a(3*n+2)=9*self.a(n).+(3)); }	"0"
 A273514	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(3*n+1) : if self.a(n)=0 : self.a(9*n + 2)=2 : otherwise self.a(9*n + 2)=4*self.a(n) : self.a(9*n + 5)=self.a(9*n + 6)=self.a(9*n + 7)=self.a(9*n + 8)=self.a(3*n + 2)); }	"0"
 A262097	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(3*n+1) : if self.a(n)=0, self.a(3*n+2)=self.a(n+1) + 1, otherwise self.a(3*n+2)=self.a(n+1) + self.a(n)); }	"0"
 A117940	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(3*n+1)/3=self.a(n) : self.a(3*n+2)=0); }	"1"
 A073301	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(3*n-2)+self.a(3*n-4) : self.a(3*n+1)=self.a(3*n-1)+self.a(3*n-2)  self.a(3*n+2)=self.a(3*n+1)+self.a(3*n-2)); }	"n>=7"
 A347717	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) + 1 : self.a(3*n+1)=3*n+1 : self.a(3*n+2)=3*n+2); }	"1,2"
 A216197	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) + 2 : self.a(3*n-1)=self.a(n) + 1 : self.a(3*n+1)=self.a(n).+(1)); }	"2"
 A345006	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) + self.a(n-1) : self.a(3*n+1)=self.a(3*n+2)=-self.a(n)); }	"1"
 A345007	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) - self.a(n-1) : self.a(3*n+1)=self.a(3*n+2)=-self.a(n)); }	"1"
 A309048	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) - self.a(n-1) : self.a(3*n+1)=self.a(n) : self.a(3*n+2)=self.a(n)); }	"1"
 A270657	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) : self.a(3*n+1)=self.a(3(n+1))-self.a(3*n) : self.a(3*n+2)=self.a(3*n)+self.a(3(n+1))); }	"0,1"
 A270655	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) : self.a(3*n+1)=self.a(3*n)+self.a(3(n+1)) : self.a(3*n+2)=self.a(3(n+1))-self.a(3*n)); }	"0,1"
 A270658	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) : self.a(3*n+1)=self.a(3*n)+self.a(3(n+1)) : self.a(3*n+2)=self.a(3*n)-self.a(3(n+1))); }	"0,1"
 A270656	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) : self.a(3*n+1)=self.a(3*n)-self.a(3(n+1)) : self.a(3*n+2)=self.a(3*n)+self.a(3(n+1))); }	"2,1"
 A123143	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) : self.a(3*n+1)=self.a(n) + self.a(n+1) : self.a(3*n+2)=self.a(n+1) + self.a(n+2)); }	"0,1,2"
 A308364	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n) : self.a(3*n+1)=self.a(n)*3 + 1 : self.a(3*n-1)=self.a(n)*3 - 1); }	"0"
 A215674	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n)=self.a(n)+1 : self.a(3*n+1)=self.a(3*n+2)=self.a(n)+self.a(n+1).+(1)); }	"1,2,2"
 A117535	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(3*n+2)=self.a(n) : self.a(3*n+1)=self.a(n) + self.a(n-1) : self.a(3*n)=self.a(n) + self.a(n-1)); }	"1,1,1,2"
 A098725	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=0 : self.a(2*n+1)=1 : self.a(4*n+2)=self.a(n+1)); }	""
 A106665	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=1 : self.a(4*n+2)=0 : self.a(2*n+1)=1 - self.a(n)); }	"1,0,0,1"
 A320038	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(2*n) : self.a(4*n+1)=4*self.a(2*n)+1 : self.a(4*n+2)=4*self.a(2*n+1)+2 : self.a(4*n+3)=2*self.a(2*n+1).+(1)); }	""
 A320262	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(2*n) : self.a(4*n+1)=4*self.a(2*n)+2 : self.a(4*n+2)=4*self.a(2*n+1) : self.a(4*n+3)=2*self.a(2*n+1).+(2)); }	""
 A320261	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(2*n) : self.a(4*n+1)=4*self.a(2*n)+3 : self.a(4*n+2)=4*self.a(2*n+1)+2 : self.a(4*n+3)=2*self.a(2*n+1).+(1)); }	""
 A286468	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(2*n) : self.a(4*n+1)=D003961(self.a((n-1)/2)) : self.a(4*n+2)=D003961(self.a(n/2)) : self.a(4*n+3)=2*self.a((n-1)/2)); }	"1"
 A318921	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(2*n) : self.a(4*n+1)=self.a(2*n) : self.a(4*n+2)=self.a(2*n+1) : self.a(4*n+3)=2*self.a(2*n+1).+(1)); }	""
 A320037	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(2*n)-1 : self.a(4*n+1)=4*self.a(2*n)+2 : self.a(4*n+2)=4*self.a(2*n+1)+1 : self.a(4*n+3)=2*self.a(2*n+1).+(2)); }	""
 A320039	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(2*n)-1 : self.a(4*n+1)=4*self.a(2*n)+3 : self.a(4*n+2)=4*self.a(2*n+1)+1 : self.a(4*n+3)=2*self.a(2*n+1).+(1)); }	""
 A081097	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=2*self.a(4*n-1)-self.a(4*n-2) : self.a(4*n+1)=7*self.a(4*n)-self.a(4*n-2)-1 : self.a(4*n+2)=7*self.a(4*n+1)-self.a(4*n-1)-1 : self.a(4*n+3)=4*self.a(4*n+2)-self.a(4*n+1)/2-1/2); }	"1,6,23,40"
 A080678	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=4*self.a(n) : self.a(4*n+1)= 3*self.a(n)+self.a(n+1) : self.a(4*n+2)=2*self.a(n)+2*self.a(n+1) : self.a(4*n+3)=self.a(n)+3*self.a(n+1)); }	"0,1,1,1"
 A109648	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=48 + floor( self.a(n)/10 ) : self.a(4*n+1)=48 + remainder( self.a(n)/10 ) : self.a(4*n+2)=44 : self.a(4*n+3)=32); }	""

 A345008	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(4*n)=self.a(n) - self.a(n-1) : self.a(4*n+1)=self.a(4*n+2)=self.a(4*n+3)=self.a(n)); }	"1"


 A345009	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(5*n)=self.a(n) - self.a(n-1) : self.a(5*n+1)=self.a(5*n+2)=self.a(5*n+3)=self.a(5*n+4)=self.a(n)); }	"1"
 A276134	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(5*n)=self.a(n) : self.a(5*n+1)=self.a(5*n+2)=self.a(5*n+3)=self.a(5*n+4)=self.a(n) + 1); }	"0"
 A140686	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? self.a(7*n)=self.a(7*n + 3)=self.a(7*n + 5)=self.a(7*n + 6)=0 : self.a(9*n)=-3 * self.a(n) : self.a(9*n + 3)=self.a(9*n + 6)=0); }	""
 A154436	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? if n > 3  n even self.a(2*n)=2*n + 1 : self.a(2*n+1)=2*self.a(n) : if n > 3  n odd  self.a(2*n)=2*self.a(n)  : self.a(2*n+1)=2*self.a(n) + 1); }	""
 A284278	multrar	0	(self, n) -> { final int h = n/2; return ((n & 1) == 0) ? if n+2 is PM then self.a(2*n+1)=3*n + 2  self.a(2*n)=n + 2 : otherwise all terms are 2); }	"2"
