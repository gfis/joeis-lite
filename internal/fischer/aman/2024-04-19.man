---- 2024-04-24 17:09:09
# A082647	lambdan	0	n -> my(q = sqrt(2*n)); SD(n, d, (d%2) && (d < q))
# A082926	lambdan	0	n -> SU(1, n, k -> !issquarefree(k)) + 1 - primepi(n)).abs()
A090410	lambdan	0	n -> SU(1, Z.TEN.^(n).intValueExact(), i -> Z_1(Functions.BIG_OMEGA.i(i)))
# A099377	lambdan	0	n -> my(d=divisors(n)); num(#d/SU(k=1, #d, 1/d[k]))
# A099378	lambdan	0	n -> my(d=divisors(n)); den(#d/SU(k=1, #d, 1/d[k]))
A099555	tablamb	0	0	n -> new Integer[] { 0, n == 0 ? 0 : 2*n }	(n, k) -> ZV(n - k/2).^(k)	Triangle, read by rows, where T(n,k) = (n-floor(k/2))^k for k = 0..2*n.
A099556	lambdan	0	n -> SU(0, 2*(n + 1), k -> ZV(n +  1 - k/2).^(k))  	a(n)=sum(k=0, 2*n, (n-k/2)^k)
A106365	lambdan	0	n -> n == 1 ? ZV(3) : SD(n, d -> PHI(n/d).*(ZV(2).^(d)).+(2*((d & 1) == 1 ? -1 : 1)))./(n)	a(n) = if(n==1, 3, sumdiv(n, d, eulerphi(n/d)*(2*(-1)^d + 2^d))/n)
A106366	lambdan	0	n -> n == 1 ? ZV(4) : SD(n, d -> PHI(n/d).*(ZV(3).^(d)).+(3*((d & 1) == 1 ? -1 : 1)))./(n)
A106367	lambdan	0	n -> n == 1 ? ZV(5) : SD(n, d -> PHI(n/d).*(ZV(4).^(d)).+(4*((d & 1) == 1 ? -1 : 1)))./(n)
A106368	lambdan	0	n -> n == 1 ? ZV(6) : SD(n, d -> PHI(n/d).*(ZV(5).^(d)).+(5*((d & 1) == 1 ? -1 : 1)))./(n)
# A106464	lambdan	0	n -> SU(k=0, n/2, gcd(n-2*k+1, k+1))
# A106519	lambdan	0	n -> (2*BI(2*n-2, n-1) - SD(n, d, MU(d)*BI(2*n/d, n/d))/2)/n
# A108274	lambdan	0	n -> SU(m=1, 10^n, SD(m, d, d*isprime(d)*(d<=sqrt(m))))
# A108289	lambdan	0	n -> SU(k=0,n,BI(n+(n-k)*k,(n-k)*k+k))
# A110618	lambdan	0	n -> numbpart(n) - SU(i=0, if (n%2, n/2, n/2-1), numbpart(i))
# A110625	lambdan	0	n -> num(-SU(k=1, n, (#binary(k) - 2*hammingweight(k))/(2*k*(2*k+1))))
# A110626	lambdan	0	n -> den(-SU(k=1, n, (#binary(k) - 2*hammingweight(k))/(2*k*(2*k+1))))
A136483	lambdan	0	n -> RU(1, n/2, k -> new Q(n, 2).^(2)     .-(k*k))     .num().sqrt()	Sum_{k=1..floor(n/2)} floor(sqrt((n/2)^2 - k^2)).
A136485	simtraf	0	new A136483()	v -> v.*(4)
A136513	lambdan	0	n -> RU(1, n/2, k -> new Q(n, 2).^(2).-(k*k)).*(2).num().sqrt()
A136515	lambdan	0	n -> RU(1, n,   k -> new Q(2*n + 1, 2).^(2).-(k*k)).*(2).num().sqrt()
# A215990	lambdan	0	n -> num(SU(k=1,n,FA(k)/2^k))
# A216279	lambdan	0	n -> SU(k=1,sqrtint((n-1)/5), issquare(n-5*k^2))
# A194161	lambdan	0	n -> floor(SU(k=1, n, frac(k*sqrt(2))))
# A194165	lambdan	0	n -> floor(SU(k=1, n, frac((1+sqrt(5))*k/2)))
# A194169	lambdan	0	n -> floor(SU(k=1, n, frac(sqrt(5)*k)))
# A194173	lambdan	0	n -> floor(SU(k=1, n, frac(sqrt(6)*k)))
# A194202	lambdan	0	n -> floor(SU(k=1, n, frac(2*exp(1)*k)))
# A194204	lambdan	0	n -> floor(SU(k=1, n, frac(exp(1)*k/2)))
# A194206	lambdan	0	n -> floor(SU(k=1, n, frac(Pi*k)))
# A194208	lambdan	0	n -> floor(SU(k=1, n, frac(k*Pi/2)))
# A216388	lambdan	0	n -> SU(1, 10^n,        k -> vecsort(digits(k)) == vecsort(digits(SIGMA(k)-k)))
# A216389	lambdan	0	n -> SU(1, 10^n,        k -> vecsort(digits(k)) == vecsort(digits(SIGMA(k))))
# A216390	lambdan	0	n -> SU(10^(n-1), 10^n, k -> vecsort(digits(k)) == vecsort(digits(SIGMA(k))))
# A216391	lambdan	0	n -> SU(1, 2^n,         k -> vecsort(digits(k)) == vecsort(digits(PHI(k))))
# A216392	lambdan	0	n -> SU(1, 2^n,         k -> vecsort(digits(k)) == vecsort(digits(SIGMA(k))))
# A216393	lambdan	0	n -> SU(1, 2^n,         k -> vecsort(digits(k)) == vecsort(digits(SIGMA(k)-k)))
# A216394	lambdan	0	n -> SU(2^(n-1), 2^n,   k -> vecsort(digits(k)) == vecsort(digits(PHI(k))))
# A216395	lambdan	0	n -> SU(2^(n-1), 2^n,   k -> vecsort(digits(k)) == vecsort(digits(SIGMA(k))))
# A216396	lambdan	0	n -> SU(2^(n-1), 2^n,   k -> vecsort(digits(k)) == vecsort(digits(SIGMA(k)-k)))
# A306093	lambdan	0	n -> SU(k=1,n,€091298(n,k)*3^k,!n)
# A306094	lambdan	0	n -> !n+SU(k=1,n,€091298(n,k)*4^k)
# A306095	lambdan	0	n -> !n+SU(k=1,n,€091298(n,k)*5^k)
# A306096	lambdan	0	n -> SU(k=1,n,€091298(n,k)*6^k,!n)
# A306099	lambdan	0	n -> !n+SU(k=1,n,€091298(n,k)<<k)
# A306669	lambdan	0	n -> (1/n)*SD(n, d, MU(n/d)*(n/d)^d*FA(d))
# A307642	lambdan	0	n -> FA(n)*SU(i=1, n, SU(j=1, i, i/j))
# A332466	lambdan	0	n -> {SD(n, d, MU(d)*FA(n)/FA(d))}
# A332467	lambdan	0	n -> {SD(n, d, MU(d)*FA(n)/(FA(d))^(n/d))}
# A334721	lambdan	0	n -> den(n*SU(k=1, n, (-1)^(k+1)/k))
# A334724	lambdan	0	n -> den(SU(j=1, n, SU(i=1, n, (-1)^(i+j)*i/j)))              .den()
A147831	lambdan	0	n -> { int k = 0; while (Functions.DIGIT_SUM.i(k*n) != 11*n) { ++k; } return ZV(k); }
A359944	lambdan	0	n -> SD(n, d -> { final Z d1 = ZV(d - 1); return d1.isPower() != null && d1.auxiliary() == 3 ? Z.ONE : Z.ZERO; })
# A360072	lambdan	0	n -> if(n < 1, 0, Functions.SIGMA0.z(n) + SU(k=2, (sqrtint(8*n+1)-1)/2, n-BI(k+1,2)+1))
# A360091	lambdan	0	n -> num((n-2)!*SU(k=1, n, (-1)^(k+1)/((n-k)!*k^k)))
# A360092	lambdan	0	n -> den((n-2)!*SU(k=1, n, (-1)^(k+1)/((n-k)!*k^k)))
# A352476	multrar	0	(self, n) -> if(n==-2, 1, -SU(k=1, n+2, isprime(k+2)*self.a(n-k)))    .negate()	"1"		
# A352479	multrar	0	(self, n) -> if(n==-2, 1, -SU(k=1, n+2, isprime(2*k+3)*self.a(n-k)))  .negate()	"1"		
# A352529	multrar	0	(self, n) -> if(n== 0, 1, -SU(k=1, n, ispower(k, 4)*self.a(n-k)))     .negate()	"1"		
# A352530	multrar	0	(self, n) -> if(n== 0, 1, -SU(k=1, n, ispower(k, 5)*self.a(n-k)))     .negate()	"1"		
# A370477	lambdan	0	n -> { final int r=2; final int t=3/2; final int u=0; return RU(k=0, n, k -> new Q(BI(t*k+u*(n-k)+r, k)    .*(BI(n+k/2-1, n-k)), ZV(t*k+u*(n-k)+r)) ).*(r).num(); }
# A370478	lambdan	0	n -> { final int r=3; final int t=3/2; final int u=0; return RU(k=0, n, k -> new Q(BI(t*k+u*(n-k)+r, k)    .*(BI(n+k/2-1, n-k)), ZV(t*k+u*(n-k)+r)) ).*(r).num(); } 

