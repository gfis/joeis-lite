#!perl

# Patch offsets in Java source files
# @(#) $Id$
# 2022-08-20: -m; UHZ=3. Tag
# 2022-08-16, Georg Fischer
#
#:# Usage:
#:#   perl patch_offset.pl [-d debug] [-m {modpre|pre}] infile > outfile
#:#       -m modpre  modify offset or prefix it
#:#       -m prefix  prefix offset in any case
#:#       infile has tsv fields aseqno, offo -> offn, superclass
#--------------------------------------------------------
use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min);
if (0 && scalar(@ARGV) == 0) {
    print `grep -E "^#:#" $0 | cut -b3-`;
    exit;
}
my $mode = "modpre";
my $debug = 0;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{d}) {
        $debug     = shift(@ARGV);
    } elsif ($opt  =~ m{m}) {
        $mode      = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

my %tardirs;
my $srcroot = "../../../joeis/src/irvine/oeis";
my $tarroot = "../../src/irvine/oeis";
my $patch_count = 0;
my $aseqno;
my $otrans;
my ($offo, $offn);
my $superclass;
my $comment = "// generated by patch_offset.pl at $timestamp\n";
while (<>) { # read inputfile
    s{\s+\Z}{}; # chompr
    my $line = $_;
    next if ($line !~ m{\AA\d+});
    $patch_count ++;
    if ($debug >= 1) {
        print "$line\n";
    }
    ($aseqno, $otrans, $superclass) = split(/\t/, $line);
    $otrans =~ s{ \-\> }{\,};
    ($offo, $offn) = split(/ *\, */, $otrans);
    &patch1();
} # while <>
print STDERR "# $patch_count files modified\n";
#----
sub patch1 {
    my $adir = lc(substr($aseqno, 0, 4));
    my $srcname = "$srcroot/$adir/$aseqno.java";
    my $tarpath = "$tarroot/$adir";
    if (! defined($tardirs{$tarpath}) or ! -d "$tarpath") { # tarpath not yet readable
        $tardirs{$tarpath} = 1;
        mkdir($tarpath);
    }
    open(SRC, "<", $srcname) || die "cannot read $srcname\n";
    my $buffer;
    my $read_len = 100000000; # 100 MB
    read(SRC, $buffer, $read_len);
    close(SRC);
    #========
    $buffer =~ s{\A(package [^\n]+\n)(\/\/[^\n]+\n)+}{$1$comment}m;
    $buffer =~ s{\n\n\n}{\n\n}mg;
    my $offset;
    # the real patch follows:
    if (0) {
    } elsif ($mode=~ m{\Apre}m) { # prefix in any case
        if (0) {
        } elsif ($buffer =~ m{(\n\s*super\(\))}m) { # super()
                 $buffer =~ s{(\n\s*super\()}{$1$offn\)}m;
        } elsif ($buffer =~ m{(\n\s*super\()}m) { # super(
                 $buffer =~ s{(\n\s*super\()}{$1$offn, }m;
        } else {
            print "#?? $aseqno: old $offo, new $offn - skipped\n$buffer\n";
        }
    } elsif ($buffer     =~ m{(\n\s*super\()(\-?\d+)}m) { # super(0, 
        $offset = $2;
        if ($offset eq $offo) {
            $buffer =~ s{(\n\s*super\()(\-?\d+)}{$1$offn}m;
        } else {
            print "#?? $aseqno: old $offo, new $offn - skipped\n$buffer\n";
        }
    } elsif ($buffer     =~ m{(\n\s*super\([a-zA-Z])}m) { # super(0, 
            $buffer =~ s{(\n\s*super\()}{$1$offn, }m;
    } else {
            print "#?? $aseqno: super not found:\n$buffer\n";
    }
    #========
    if ($debug >= 2) {
        print "#----------------\n$buffer";
    }
    open(TAR, ">", "$tarpath/$aseqno.java") || die "cannot write $tarpath/$aseqno.java\n";
    print TAR $buffer;
    close(TAR);
} # patch1
__DATA__
# Starting report at 2022-08-16 15:32:35
A002162	1 -> 0	DecimalExpansionSequence
A002285	1 -> 0	DecimalExpansionSequence
A002389	1 -> 0	DecimalExpansionSequence
A002390	1 -> 0	DecimalExpansionSequence
A002580	0 -> 1	DecimalExpansionSequence
A002794	1 -> 0	A030125
A002795	1 -> 0	A002794
A003077	1 -> 0	DecimalExpansionSequence
A003676	1 -> -33	DecimalExpansionSequence