#!queue	A106640	1	->	0	A244530	--------------------------------	--------------------------------
package irvine.oeis.a106;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a244.A244530;

/**
 * A106640 Row sums of A059346.
 * @author Georg Fischer
 */
public class A106640 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 0);
  }
}

#!queue	A116931	0	->	1	A218698	--------------------------------	--------------------------------
package irvine.oeis.a116;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a218.A218698;

/**
 * A116931 Number of partitions of n in which each part, with the possible exception of the largest, occurs at least twice.
 * @author Georg Fischer
 */
public class A116931 extends A218698 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    return super.compute(++mN, 2);
  }
}

#!queue	A116932	0	->	1	A218698	--------------------------------	--------------------------------
package irvine.oeis.a116;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a218.A218698;

/**
 * A116932 Number of partitions of n in which each part, with the possible exception of the largest, occurs at least three times.
 * @author Georg Fischer
 */
public class A116932 extends A218698 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    return super.compute(++mN, 3);
  }
}

#!queue	A117142	0	->	1	A194621	--------------------------------	--------------------------------
package irvine.oeis.a117;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a194.A194621;

/**
 * A117142 Number of partitions of n in which any two parts differ by at most 2.
 * @author Georg Fischer
 */
public class A117142 extends A194621 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A117143	0	->	1	A194621	--------------------------------	--------------------------------
package irvine.oeis.a117;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a194.A194621;

/**
 * A117143 Number of partitions of n in which any two parts differ by at most 3.
 * @author Georg Fischer
 */
public class A117143 extends A194621 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A151577	0	->	4	A334218	--------------------------------	--------------------------------
package irvine.oeis.a151;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a334.A334218;

/**
 * A151577 Number of permutations of 1..n arranged in a circle with exactly 4 adjacent element pairs in decreasing order.
 * @author Georg Fischer
 */
public class A151577 extends A334218 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A151578	0	->	5	A334218	--------------------------------	--------------------------------
package irvine.oeis.a151;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a334.A334218;

/**
 * A151578 Number of permutations of 1..n arranged in a circle with exactly 5 adjacent element pairs in decreasing order.
 * @author Georg Fischer
 */
public class A151578 extends A334218 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A151579	0	->	6	A334218	--------------------------------	--------------------------------
package irvine.oeis.a151;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a334.A334218;

/**
 * A151579 Number of permutations of 1..n arranged in a circle with exactly 6 adjacent element pairs in decreasing order.
 * @author Georg Fischer
 */
public class A151579 extends A334218 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A151580	0	->	7	A334218	--------------------------------	--------------------------------
package irvine.oeis.a151;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a334.A334218;

/**
 * A151580 Number of permutations of 1..n arranged in a circle with exactly 7 adjacent element pairs in decreasing order.
 * @author Georg Fischer
 */
public class A151580 extends A334218 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A151581	0	->	8	A334218	--------------------------------	--------------------------------
package irvine.oeis.a151;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a334.A334218;

/**
 * A151581 Number of permutations of 1..n arranged in a circle with exactly 8 adjacent element pairs in decreasing order.
 * @author Georg Fischer
 */
public class A151581 extends A334218 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A151582	0	->	9	A334218	--------------------------------	--------------------------------
package irvine.oeis.a151;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a334.A334218;

/**
 * A151582 Number of permutations of 1..n arranged in a circle with exactly 9 adjacent element pairs in decreasing order.
 * @author Georg Fischer
 */
public class A151582 extends A334218 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A183559	0	->	2	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183559 Number of partitions of n containing a clique of size 2.
 * @author Georg Fischer
 */
public class A183559 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A183560	0	->	3	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183560 Number of partitions of n containing a clique of size 3.
 * @author Georg Fischer
 */
public class A183560 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A183561	0	->	4	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183561 Number of partitions of n containing a clique of size 4.
 * @author Georg Fischer
 */
public class A183561 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A183562	0	->	5	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183562 Number of partitions of n containing a clique of size 5.
 * @author Georg Fischer
 */
public class A183562 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A183563	0	->	6	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183563 Number of partitions of n containing a clique of size 6.
 * @author Georg Fischer
 */
public class A183563 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A183564	0	->	7	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183564 Number of partitions of n containing a clique of size 7.
 * @author Georg Fischer
 */
public class A183564 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A183565	0	->	8	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183565 Number of partitions of n containing a clique of size 8.
 * @author Georg Fischer
 */
public class A183565 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A183566	0	->	9	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183566 Number of partitions of n containing a clique of size 9.
 * @author Georg Fischer
 */
public class A183566 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A183567	0	->	10	A183568	--------------------------------	--------------------------------
package irvine.oeis.a183;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A183567 Number of partitions of n containing a clique of size 10.
 * @author Georg Fischer
 */
public class A183567 extends A183568 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A214271	1	->	3	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214271 Number of compositions of n where the difference between largest and smallest parts equals 2 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214271 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A214272	1	->	4	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214272 Number of compositions of n where the difference between largest and smallest parts equals 3 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214272 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A214273	1	->	5	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214273 Number of compositions of n where the difference between largest and smallest parts equals 4 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214273 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A214274	1	->	6	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214274 Number of compositions of n where the difference between largest and smallest parts equals 5 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214274 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A214275	1	->	7	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214275 Number of compositions of n where the difference between largest and smallest parts equals 6 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214275 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A214276	1	->	8	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214276 Number of compositions of n where the difference between largest and smallest parts equals 7 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214276 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A214277	1	->	9	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214277 Number of compositions of n where the difference between largest and smallest parts equals 8 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214277 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A214278	1	->	10	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214278 Number of compositions of n where the difference between largest and smallest parts equals 9 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214278 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A214279	1	->	11	A214269	--------------------------------	--------------------------------
package irvine.oeis.a214;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A214279 Number of compositions of n where the difference between largest and smallest parts equals 10 and adjacent parts are unequal.
 * @author Georg Fischer
 */
public class A214279 extends A214269 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A215851	0	->	1	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215851 Number of simple labeled graphs on n nodes with exactly 1 connected component that is a tree or a cycle.
 * @author Georg Fischer
 */
public class A215851 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 1);
  }
}

#!queue	A215852	0	->	2	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215852 Number of simple labeled graphs on n nodes with exactly 2 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215852 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A215853	0	->	3	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215853 Number of simple labeled graphs on n nodes with exactly 3 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215853 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A215854	0	->	4	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215854 Number of simple labeled graphs on n nodes with exactly 4 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215854 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A215855	0	->	5	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215855 Number of simple labeled graphs on n nodes with exactly 5 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215855 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A215856	0	->	6	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215856 Number of simple labeled graphs on n nodes with exactly 6 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215856 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A215857	0	->	7	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215857 Number of simple labeled graphs on n nodes with exactly 7 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215857 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A215858	0	->	8	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215858 Number of simple labeled graphs on n nodes with exactly 8 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215858 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A215859	0	->	9	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215859 Number of simple labeled graphs on n nodes with exactly 9 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215859 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A215860	0	->	10	A215861	--------------------------------	--------------------------------
package irvine.oeis.a215;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A215860 Number of simple labeled graphs on n nodes with exactly 10 connected components that are trees or cycles.
 * @author Georg Fischer
 */
public class A215860 extends A215861 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A229245	1	->	3	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229245 Number of set partitions of {1,...,n} with largest set of size 3.
 * @author Georg Fischer
 */
public class A229245 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A229246	1	->	4	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229246 Number of set partitions of {1,...,n} with largest set of size 4.
 * @author Georg Fischer
 */
public class A229246 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A229247	1	->	5	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229247 Number of set partitions of {1,...,n} with largest set of size 5.
 * @author Georg Fischer
 */
public class A229247 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A229248	1	->	6	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229248 Number of set partitions of {1,...,n} with largest set of size 6.
 * @author Georg Fischer
 */
public class A229248 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A229249	1	->	7	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229249 Number of set partitions of {1,...,n} with largest set of size 7.
 * @author Georg Fischer
 */
public class A229249 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A229250	1	->	8	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229250 Number of set partitions of {1,...,n} with largest set of size 8.
 * @author Georg Fischer
 */
public class A229250 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A229251	1	->	9	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229251 Number of set partitions of {1,...,n} with largest set of size 9.
 * @author Georg Fischer
 */
public class A229251 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A229252	1	->	10	A080510	--------------------------------	--------------------------------
package irvine.oeis.a229;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A229252 Number of set partitions of {1,...,n} with largest set of size 10.
 * @author Georg Fischer
 */
public class A229252 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A243119	0	->	2	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243119 Number of compositions of n in which the maximal multiplicity of parts equals 2.
 * @author Georg Fischer
 */
public class A243119 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A243120	0	->	3	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243120 Number of compositions of n in which the maximal multiplicity of parts equals 3.
 * @author Georg Fischer
 */
public class A243120 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A243121	0	->	4	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243121 Number of compositions of n in which the maximal multiplicity of parts equals 4.
 * @author Georg Fischer
 */
public class A243121 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A243122	0	->	5	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243122 Number of compositions of n in which the maximal multiplicity of parts equals 5.
 * @author Georg Fischer
 */
public class A243122 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A243123	0	->	6	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243123 Number of compositions of n in which the maximal multiplicity of parts equals 6.
 * @author Georg Fischer
 */
public class A243123 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A243124	0	->	7	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243124 Number of compositions of n in which the maximal multiplicity of parts equals 7.
 * @author Georg Fischer
 */
public class A243124 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A243125	0	->	8	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243125 Number of compositions of n in which the maximal multiplicity of parts equals 8.
 * @author Georg Fischer
 */
public class A243125 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A243126	0	->	9	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243126 Number of compositions of n in which the maximal multiplicity of parts equals 9.
 * @author Georg Fischer
 */
public class A243126 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A243127	0	->	10	A242447	--------------------------------	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242447;

/**
 * A243127 Number of compositions of n in which the maximal multiplicity of parts equals 10.
 * @author Georg Fischer
 */
public class A243127 extends A242447 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A244164	0	->	1	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244164 Number of compositions of n in which the minimal multiplicity of parts equals 1.
 * @author Georg Fischer
 */
public class A244164 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 1);
  }
}

#!queue	A244165	0	->	2	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244165 Number of compositions of n in which the minimal multiplicity of parts equals 2.
 * @author Georg Fischer
 */
public class A244165 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A244166	0	->	3	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244166 Number of compositions of n in which the minimal multiplicity of parts equals 3.
 * @author Georg Fischer
 */
public class A244166 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A244167	0	->	4	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244167 Number of compositions of n in which the minimal multiplicity of parts equals 4.
 * @author Georg Fischer
 */
public class A244167 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A244168	0	->	5	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244168 Number of compositions of n in which the minimal multiplicity of parts equals 5.
 * @author Georg Fischer
 */
public class A244168 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A244169	0	->	6	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244169 Number of compositions of n in which the minimal multiplicity of parts equals 6.
 * @author Georg Fischer
 */
public class A244169 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A244170	0	->	7	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244170 Number of compositions of n in which the minimal multiplicity of parts equals 7.
 * @author Georg Fischer
 */
public class A244170 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A244171	0	->	8	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244171 Number of compositions of n in which the minimal multiplicity of parts equals 8.
 * @author Georg Fischer
 */
public class A244171 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A244172	0	->	9	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244172 Number of compositions of n in which the minimal multiplicity of parts equals 9.
 * @author Georg Fischer
 */
public class A244172 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;
  
  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A244173	0	->	10	A242451	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a242.A242451;

/**
 * A244173 Number of compositions of n in which the minimal multiplicity of parts equals 10.
 * @author Georg Fischer
 */
public class A244173 extends A242451 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A244398	1	->	3	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244398 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 2.
 * @author Georg Fischer
 */
public class A244398 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A244399	1	->	4	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244399 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 3.
 * @author Georg Fischer
 */
public class A244399 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A244400	1	->	5	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244400 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 4.
 * @author Georg Fischer
 */
public class A244400 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A244401	1	->	6	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244401 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 5.
 * @author Georg Fischer
 */
public class A244401 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A244402	1	->	7	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244402 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 6.
 * @author Georg Fischer
 */
public class A244402 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A244403	1	->	8	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244403 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 7.
 * @author Georg Fischer
 */
public class A244403 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A244404	1	->	9	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244404 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 8.
 * @author Georg Fischer
 */
public class A244404 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A244405	1	->	10	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244405 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 9.
 * @author Georg Fischer
 */
public class A244405 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A244406	1	->	11	A244372	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244406 Number of unlabeled rooted trees with n nodes and maximal outdegree (branching factor) 10.
 * @author Georg Fischer
 */
public class A244406 extends A244372 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A244455	1	->	2	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244455 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 1.
 * @author Georg Fischer
 */
public class A244455 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 0);
  }
}

#!queue	A244456	1	->	3	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244456 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 2.
 * @author Georg Fischer
 */
public class A244456 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 1);
  }
}

#!queue	A244457	1	->	4	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244457 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 3.
 * @author Georg Fischer
 */
public class A244457 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A244458	1	->	5	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244458 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 4.
 * @author Georg Fischer
 */
public class A244458 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A244459	1	->	6	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244459 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 5.
 * @author Georg Fischer
 */
public class A244459 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A244460	1	->	7	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244460 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 6.
 * @author Georg Fischer
 */
public class A244460 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A244461	1	->	8	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244461 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 7.
 * @author Georg Fischer
 */
public class A244461 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A244462	1	->	9	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244462 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 8.
 * @author Georg Fischer
 */
public class A244462 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A244463	1	->	10	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244463 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 9.
 * @author Georg Fischer
 */
public class A244463 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A244464	1	->	11	A244454	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244464 Number of unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 10.
 * @author Georg Fischer
 */
public class A244464 extends A244454 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A244531	1	->	3	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244531 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 2.
 * @author Georg Fischer
 */
public class A244531 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 1);
  }
}

#!queue	A244532	1	->	4	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244532 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 3.
 * @author Georg Fischer
 */
public class A244532 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A244533	1	->	5	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244533 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 4.
 * @author Georg Fischer
 */
public class A244533 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A244534	1	->	6	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244534 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 5.
 * @author Georg Fischer
 */
public class A244534 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A244535	1	->	7	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244535 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 6.
 * @author Georg Fischer
 */
public class A244535 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A244536	1	->	8	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244536 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 7.
 * @author Georg Fischer
 */
public class A244536 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A244537	1	->	9	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244537 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 8.
 * @author Georg Fischer
 */
public class A244537 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A244538	1	->	10	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244538 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 9.
 * @author Georg Fischer
 */
public class A244538 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A244539	1	->	11	A244530	--------------------------------	--------------------------------
package irvine.oeis.a244;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A244539 Number of ordered unlabeled rooted trees with n nodes such that the minimal outdegree of inner nodes equals 10.
 * @author Georg Fischer
 */
public class A244539 extends A244530 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A246189	0	->	2	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246189 Number of endofunctions on [n] where the smallest cycle length equals 2.
 * @author Georg Fischer
 */
public class A246189 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A246190	0	->	3	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246190 Number of endofunctions on [n] where the smallest cycle length equals 3.
 * @author Georg Fischer
 */
public class A246190 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A246191	0	->	4	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246191 Number of endofunctions on [n] where the smallest cycle length equals 4.
 * @author Georg Fischer
 */
public class A246191 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A246192	0	->	5	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246192 Number of endofunctions on [n] where the smallest cycle length equals 5.
 * @author Georg Fischer
 */
public class A246192 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A246193	0	->	6	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246193 Number of endofunctions on [n] where the smallest cycle length equals 6.
 * @author Georg Fischer
 */
public class A246193 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A246194	0	->	7	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246194 Number of endofunctions on [n] where the smallest cycle length equals 7.
 * @author Georg Fischer
 */
public class A246194 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A246195	0	->	8	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246195 Number of endofunctions on [n] where the smallest cycle length equals 8.
 * @author Georg Fischer
 */
public class A246195 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A246196	0	->	9	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246196 Number of endofunctions on [n] where the smallest cycle length equals 9.
 * @author Georg Fischer
 */
public class A246196 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A246197	0	->	10	A246049	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A246197 Number of endofunctions on [n] where the smallest cycle length equals 10.
 * @author Georg Fischer
 */
public class A246197 extends A246049 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A246213	0	->	3	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246213 Number of endofunctions on [n] where the largest cycle length equals 3.
 * @author Georg Fischer
 */
public class A246213 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A246214	0	->	4	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246214 Number of endofunctions on [n] where the largest cycle length equals 4.
 * @author Georg Fischer
 */
public class A246214 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A246215	0	->	5	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246215 Number of endofunctions on [n] where the largest cycle length equals 5.
 * @author Georg Fischer
 */
public class A246215 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A246216	0	->	6	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246216 Number of endofunctions on [n] where the largest cycle length equals 6.
 * @author Georg Fischer
 */
public class A246216 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A246217	0	->	7	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246217 Number of endofunctions on [n] where the largest cycle length equals 7.
 * @author Georg Fischer
 */
public class A246217 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A246218	0	->	8	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246218 Number of endofunctions on [n] where the largest cycle length equals 8.
 * @author Georg Fischer
 */
public class A246218 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A246219	0	->	9	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246219 Number of endofunctions on [n] where the largest cycle length equals 9.
 * @author Georg Fischer
 */
public class A246219 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A246220	0	->	10	A241981	--------------------------------	--------------------------------
package irvine.oeis.a246;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a241.A241981;

/**
 * A246220 Number of endofunctions on [n] where the largest cycle length equals 10.
 * @author Georg Fischer
 */
public class A246220 extends A241981 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A255705	1	->	0	A318754	--------------------------------	--------------------------------
package irvine.oeis.a255;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a318.A318754;

/**
 * A255705 Number of 2n+1-node rooted trees in which the maximal number of nodes in paths starting at a leaf and ending at the first branching node or at the root equals n+1.
 * @author Georg Fischer
 */
public class A255705 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(2 * mN + 2, mN + 1);
  }
}

#!queue	A258416	0	->	2	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258416 Number of partitions of the 2-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258416 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A258417	0	->	3	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258417 Number of partitions of the 3-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258417 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A258418	0	->	4	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258418 Number of partitions of the 4-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258418 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A258419	0	->	5	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258419 Number of partitions of the 5-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258419 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A258420	0	->	6	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258420 Number of partitions of the 6-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258420 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A258421	0	->	7	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258421 Number of partitions of the 7-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258421 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A258422	0	->	8	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258422 Number of partitions of the 8-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258422 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A258423	0	->	9	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258423 Number of partitions of the 9-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258423 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A258424	0	->	10	A255982	--------------------------------	--------------------------------
package irvine.oeis.a258;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a255.A255982;

/**
 * A258424 Number of partitions of the 10-dimensional hypercube resulting from a sequence of n bisections, each of which splits any part perpendicular to any of the axes, such that each axis is used at least once.
 * @author Georg Fischer
 */
public class A258424 extends A255982 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A271731	0	->	2	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271731 Number of set partitions of [n] with maximal block length multiplicity equal to two.
 * @author Georg Fischer
 */
public class A271731 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A271732	0	->	3	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271732 Number of set partitions of [n] with maximal block length multiplicity equal to three.
 * @author Georg Fischer
 */
public class A271732 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A271733	0	->	4	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271733 Number of set partitions of [n] with maximal block length multiplicity equal to four.
 * @author Georg Fischer
 */
public class A271733 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A271734	0	->	5	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271734 Number of set partitions of [n] with maximal block length multiplicity equal to five.
 * @author Georg Fischer
 */
public class A271734 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A271735	0	->	6	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271735 Number of set partitions of [n] with maximal block length multiplicity equal to six.
 * @author Georg Fischer
 */
public class A271735 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A271736	0	->	7	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271736 Number of set partitions of [n] with maximal block length multiplicity equal to seven.
 * @author Georg Fischer
 */
public class A271736 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A271737	0	->	8	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271737 Number of set partitions of [n] with maximal block length multiplicity equal to eight.
 * @author Georg Fischer
 */
public class A271737 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A271738	0	->	9	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271738 Number of set partitions of [n] with maximal block length multiplicity equal to nine.
 * @author Georg Fischer
 */
public class A271738 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A271739	0	->	10	A271423	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271739 Number of set partitions of [n] with maximal block length multiplicity equal to ten.
 * @author Georg Fischer
 */
public class A271739 extends A271423 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A271762	0	->	2	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271762 Number of set partitions of [n] with minimal block length multiplicity equal to two.
 * @author Georg Fischer
 */
public class A271762 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A271763	0	->	3	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271763 Number of set partitions of [n] with minimal block length multiplicity equal to three.
 * @author Georg Fischer
 */
public class A271763 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A271764	0	->	4	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271764 Number of set partitions of [n] with minimal block length multiplicity equal to four.
 * @author Georg Fischer
 */
public class A271764 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A271765	0	->	5	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271765 Number of set partitions of [n] with minimal block length multiplicity equal to five.
 * @author Georg Fischer
 */
public class A271765 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A271766	0	->	6	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271766 Number of set partitions of [n] with minimal block length multiplicity equal to six.
 * @author Georg Fischer
 */
public class A271766 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A271767	0	->	7	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271767 Number of set partitions of [n] with minimal block length multiplicity equal to seven.
 * @author Georg Fischer
 */
public class A271767 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A271768	0	->	8	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271768 Number of set partitions of [n] with minimal block length multiplicity equal to eight.
 * @author Georg Fischer
 */
public class A271768 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A271769	0	->	9	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271769 Number of set partitions of [n] with minimal block length multiplicity equal to nine.
 * @author Georg Fischer
 */
public class A271769 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A271770	0	->	10	A271424	--------------------------------	--------------------------------
package irvine.oeis.a271;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A271770 Number of set partitions of [n] with minimal block length multiplicity equal to ten.
 * @author Georg Fischer
 */
public class A271770 extends A271424 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A276961	1	->	0	A080510	--------------------------------	--------------------------------
package irvine.oeis.a276;
// manually A080510/trionk

import irvine.math.z.Z;
import irvine.oeis.a080.A080510;

/**
 * A276961 Number of set partitions of [2n] with largest set of size n.
 * @author Georg Fischer
 */
public class A276961 extends A080510 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -2;

  @Override
  public Z next() {
    if (++mN == -1) {
      return Z.ONE;
    }
    return super.compute(2 * mN + 1, mN);
  }
}

#!queue	A316075	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316075 Sequence shifts left three places under Weigh transform with a(n) = signum(n) for n&lt;3.
 * @author Georg Fischer
 */
public class A316075 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A316076	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316076 Sequence shifts left four places under Weigh transform with a(n) = signum(n) for n&lt;4.
 * @author Georg Fischer
 */
public class A316076 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A316077	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316077 Sequence shifts left five places under Weigh transform with a(n) = signum(n) for n&lt;5.
 * @author Georg Fischer
 */
public class A316077 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A316078	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316078 Sequence shifts left six places under Weigh transform with a(n) = signum(n) for n&lt;6.
 * @author Georg Fischer
 */
public class A316078 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A316079	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316079 Sequence shifts left seven places under Weigh transform with a(n) = signum(n) for n&lt;7.
 * @author Georg Fischer
 */
public class A316079 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A316080	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316080 Sequence shifts left eight places under Weigh transform with a(n) = signum(n) for n&lt;8.
 * @author Georg Fischer
 */
public class A316080 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A316081	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316081 Sequence shifts left nine places under Weigh transform with a(n) = signum(n) for n&lt;9.
 * @author Georg Fischer
 */
public class A316081 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A316082	1	->	0	A316074	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A316082 Sequence shifts left ten places under Weigh transform with a(n) = signum(n) for n&lt;10.
 * @author Georg Fischer
 */
public class A316082 extends A316074 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -1 - 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A316390	0	->	3	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316390 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of three.
 * @author Georg Fischer
 */
public class A316390 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    return super.compute(++mN, 3);
  }
}

#!queue	A316391	0	->	4	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316391 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of four.
 * @author Georg Fischer
 */
public class A316391 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    return super.compute(++mN, 4);
  }
}

#!queue	A316392	0	->	5	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316392 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of five.
 * @author Georg Fischer
 */
public class A316392 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    return super.compute(++mN, 5);
  }
}

#!queue	A316393	0	->	6	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316393 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of six.
 * @author Georg Fischer
 */
public class A316393 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    return super.compute(++mN, 6);
  }
}

#!queue	A316394	0	->	7	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316394 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of seven.
 * @author Georg Fischer
 */
public class A316394 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    return super.compute(++mN, 7);
  }
}

#!queue	A316395	0	->	8	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316395 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of eight.
 * @author Georg Fischer
 */
public class A316395 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    return super.compute(++mN, 8);
  }
}

#!queue	A316396	0	->	9	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316396 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of nine.
 * @author Georg Fischer
 */
public class A316396 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    return super.compute(++mN, 9);
  }
}

#!queue	A316397	0	->	10	A258829	--------------------------------	--------------------------------
package irvine.oeis.a316;
// Generated by gen_seq4.pl tricol

import irvine.math.z.Z;
import irvine.oeis.a258.A258829;

/**
 * A316397 Number of permutations p of [n] such that the up-down signature of 0,p has nonnegative partial sums with a maximal value of ten.
 * @author Georg Fischer
 */
public class A316397 extends A258829 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    return super.compute(++mN, 10);
  }
}

#!queue	A318817	1	->	2	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318817 Number of rooted trees with n nodes such that two equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318817 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 1);
  }
}

#!queue	A318818	1	->	3	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318818 Number of rooted trees with n nodes such that three equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318818 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A318819	1	->	4	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318819 Number of rooted trees with n nodes such that four equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318819 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A318820	1	->	5	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318820 Number of rooted trees with n nodes such that five equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318820 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A318821	1	->	6	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318821 Number of rooted trees with n nodes such that six equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318821 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A318822	1	->	7	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318822 Number of rooted trees with n nodes such that seven equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318822 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A318823	1	->	8	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318823 Number of rooted trees with n nodes such that eight equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318823 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A318824	1	->	9	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318824 Number of rooted trees with n nodes such that nine equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318824 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A318825	1	->	10	A318754	--------------------------------	--------------------------------
package irvine.oeis.a318;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A318825 Number of rooted trees with n nodes such that ten equals the maximal number of subtrees of the same size extending from the same node.
 * @author Georg Fischer
 */
public class A318825 extends A318754 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A319814	0	->	4	A319797	--------------------------------	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319814 Number of partitions of n into exactly four positive triangular numbers.
 * @author Georg Fischer
 */
public class A319814 extends A319797 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A319815	0	->	5	A319797	--------------------------------	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319815 Number of partitions of n into exactly five positive triangular numbers.
 * @author Georg Fischer
 */
public class A319815 extends A319797 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A319816	0	->	6	A319797	--------------------------------	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319816 Number of partitions of n into exactly six positive triangular numbers.
 * @author Georg Fischer
 */
public class A319816 extends A319797 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A319817	0	->	7	A319797	--------------------------------	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319817 Number of partitions of n into exactly seven positive triangular numbers.
 * @author Georg Fischer
 */
public class A319817 extends A319797 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A319818	0	->	8	A319797	--------------------------------	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319818 Number of partitions of n into exactly eight positive triangular numbers.
 * @author Georg Fischer
 */
public class A319818 extends A319797 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A319819	0	->	9	A319797	--------------------------------	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319819 Number of partitions of n into exactly nine positive triangular numbers.
 * @author Georg Fischer
 */
public class A319819 extends A319797 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A319820	0	->	10	A319797	--------------------------------	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319820 Number of partitions of n into exactly ten positive triangular numbers.
 * @author Georg Fischer
 */
public class A319820 extends A319797 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A320203	0	->	2	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320203 Number of sets of nonempty words with a total of n letters over binary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320203 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A320204	0	->	3	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320204 Number of sets of nonempty words with a total of n letters over ternary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320204 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A320205	0	->	4	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320205 Number of sets of nonempty words with a total of n letters over quaternary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320205 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A320206	0	->	5	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320206 Number of sets of nonempty words with a total of n letters over quinary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320206 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A320207	0	->	6	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320207 Number of sets of nonempty words with a total of n letters over senary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320207 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A320208	0	->	7	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320208 Number of sets of nonempty words with a total of n letters over septenary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320208 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A320209	0	->	8	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320209 Number of sets of nonempty words with a total of n letters over octonary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320209 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A320210	0	->	9	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320210 Number of sets of nonempty words with a total of n letters over nonary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320210 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A320211	0	->	10	A319501	--------------------------------	--------------------------------
package irvine.oeis.a320;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a319.A319501;

/**
 * A320211 Number of sets of nonempty words with a total of n letters over denary alphabet such that all letters occur at least once in the set.
 * @author Georg Fischer
 */
public class A320211 extends A319501 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A323119	1	->	2	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323119 Number of compositions of n where the difference between largest and smallest parts equals two.
 * @author Georg Fischer
 */
public class A323119 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 0;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A323120	1	->	3	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323120 Number of compositions of n where the difference between largest and smallest parts equals three.
 * @author Georg Fischer
 */
public class A323120 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A323121	1	->	4	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323121 Number of compositions of n where the difference between largest and smallest parts equals four.
 * @author Georg Fischer
 */
public class A323121 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A323122	1	->	5	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323122 Number of compositions of n where the difference between largest and smallest parts equals five.
 * @author Georg Fischer
 */
public class A323122 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A323123	1	->	6	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323123 Number of compositions of n where the difference between largest and smallest parts equals six.
 * @author Georg Fischer
 */
public class A323123 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A323124	1	->	7	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323124 Number of compositions of n where the difference between largest and smallest parts equals seven.
 * @author Georg Fischer
 */
public class A323124 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A323125	1	->	8	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323125 Number of compositions of n where the difference between largest and smallest parts equals eight.
 * @author Georg Fischer
 */
public class A323125 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A323126	1	->	9	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323126 Number of compositions of n where the difference between largest and smallest parts equals nine.
 * @author Georg Fischer
 */
public class A323126 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A323127	1	->	10	A214258	--------------------------------	--------------------------------
package irvine.oeis.a323;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a214.A214258;

/**
 * A323127 Number of compositions of n where the difference between largest and smallest parts equals ten.
 * @author Georg Fischer
 */
public class A323127 extends A214258 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A327380	0	->	2	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327380 Number of colored integer partitions of n such that two colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327380 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A327381	0	->	3	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327381 Number of colored integer partitions of n such that three colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327381 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A327382	0	->	4	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327382 Number of colored integer partitions of n such that four colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327382 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A327383	0	->	5	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327383 Number of colored integer partitions of n such that five colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327383 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A327384	0	->	6	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327384 Number of colored integer partitions of n such that six colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327384 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A327385	0	->	7	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327385 Number of colored integer partitions of n such that seven colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327385 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A327386	0	->	8	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327386 Number of colored integer partitions of n such that eight colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327386 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A327387	0	->	9	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327387 Number of colored integer partitions of n such that nine colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327387 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A327388	0	->	10	A308680	--------------------------------	--------------------------------
package irvine.oeis.a327;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a308.A308680;

/**
 * A327388 Number of colored integer partitions of n such that ten colors are used and parts differ by size or by color.
 * @author Georg Fischer
 */
public class A327388 extends A308680 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A340481	0	->	5	A337165	--------------------------------	--------------------------------
package irvine.oeis.a340;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a337.A337165;

/**
 * A340481 Number of ways to write n as an ordered sum of 5 squares of positive integers.
 * @author Georg Fischer
 */
public class A340481 extends A337165 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A340905	0	->	6	A337165	--------------------------------	--------------------------------
package irvine.oeis.a340;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a337.A337165;

/**
 * A340905 Number of ways to write n as an ordered sum of 6 squares of positive integers.
 * @author Georg Fischer
 */
public class A340905 extends A337165 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A340906	0	->	7	A337165	--------------------------------	--------------------------------
package irvine.oeis.a340;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a337.A337165;

/**
 * A340906 Number of ways to write n as an ordered sum of 7 squares of positive integers.
 * @author Georg Fischer
 */
public class A340906 extends A337165 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A340915	0	->	8	A337165	--------------------------------	--------------------------------
package irvine.oeis.a340;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a337.A337165;

/**
 * A340915 Number of ways to write n as an ordered sum of 8 squares of positive integers.
 * @author Georg Fischer
 */
public class A340915 extends A337165 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A340946	0	->	9	A337165	--------------------------------	--------------------------------
package irvine.oeis.a340;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a337.A337165;

/**
 * A340946 Number of ways to write n as an ordered sum of 9 squares of positive integers.
 * @author Georg Fischer
 */
public class A340946 extends A337165 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A340947	0	->	10	A337165	--------------------------------	--------------------------------
package irvine.oeis.a340;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a337.A337165;

/**
 * A340947 Number of ways to write n as an ordered sum of 10 squares of positive integers.
 * @author Georg Fischer
 */
public class A340947 extends A337165 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 9;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}

#!queue	A340987	1	->	0	A060642	--------------------------------	--------------------------------
package irvine.oeis.a340;
// manually build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A340987 Number of colored integer partitions of 2n such that all colors from an n-set are used.
 * @author Georg Fischer
 */
public class A340987 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = -2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(2 * mN + 1, mN);
  }
}

#!queue	A341221	1	->	3	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341221 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^3.
 * @author Georg Fischer
 */
public class A341221 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A341222	1	->	4	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341222 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^4.
 * @author Georg Fischer
 */
public class A341222 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 2;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A341223	1	->	5	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341223 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^5.
 * @author Georg Fischer
 */
public class A341223 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A341225	1	->	6	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341225 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^6.
 * @author Georg Fischer
 */
public class A341225 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 4;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A341226	1	->	7	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341226 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^7.
 * @author Georg Fischer
 */
public class A341226 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 5;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A341227	1	->	8	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341227 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^8.
 * @author Georg Fischer
 */
public class A341227 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 6;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A341228	1	->	9	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341228 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^9.
 * @author Georg Fischer
 */
public class A341228 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 7;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A341236	1	->	10	A060642	--------------------------------	--------------------------------
package irvine.oeis.a341;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;
import irvine.oeis.a060.A060642;

/**
 * A341236 Expansion of (-1 + Product_{k&gt;=1} 1 / (1 - x^k))^10.
 * @author Georg Fischer
 */
public class A341236 extends A060642 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset($(OFFSET));
  }

  private int mN = 8;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A999999	0	0	0	0
