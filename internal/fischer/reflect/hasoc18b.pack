#!queue	A027158	1	->	0	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027158 a(n) = T(2n,n), T given by A027157.
 * @author Sean A. Irvine
 */
public class A027158 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = -1;

  @Override
  public Z next() {
    return t(2 * ++mN, mN);
  }
}
#!queue	A027160	1	->	2	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027160 a(n) = T(2n,n-2), T given by A027157.
 * @author Sean A. Irvine
 */
public class A027160 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = 1;

  @Override
  public Z next() {
    return t(2 * ++mN, mN - 2);
  }
}
#!queue	A027162	1	->	2	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027162 a(n) = T(2n-1,n-2), T given by A027157.
 * @author Sean A. Irvine
 */
public class A027162 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = 1;

  @Override
  public Z next() {
    return t(2 * ++mN - 1, mN - 2);
  }
}
#!queue	A027163	1	->	0	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027163 a(n) = T(n,[ n/2 ]), T given by A027157.
 * @author Sean A. Irvine
 */
public class A027163 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = -1;

  @Override
  public Z next() {
    return t(++mN, mN / 2);
  }
}
#!queue	A027164	1	->	0	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027164 a(n) = T(n,0) + T(n,1) + ... + T(n,n), T given by A027157.
 * @author Sean A. Irvine
 */
public class A027164 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = -1;

  @Override
  public Z next() {
    ++mN;
    Z sum = Z.ZERO;
    for (long k = 0; k <= mN; ++k) {
      sum = sum.add(t(mN, k));
    }
    return sum;
  }
}
#!queue	A027165	1	->	0	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027165 T(n,0) + T(n,1) + ... + T(n,[ n/2 ]), T given by A027157.
 * @author Sean A. Irvine
 */
public class A027165 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = -1;

  @Override
  public Z next() {
    ++mN;
    Z sum = Z.ZERO;
    for (long k = 0; k <= mN / 2; ++k) {
      sum = sum.add(t(mN, k));
    }
    return sum;
  }
}
#!queue	A027167	1	->	0	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027167 a(n) = Sum_{k=0..floor(n/2)} A027157(n-k, k).
 * @author Sean A. Irvine
 */
public class A027167 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = -1;

  @Override
  public Z next() {
    ++mN;
    Z sum = Z.ZERO;
    for (long k = 0; k <= mN / 2; ++k) {
      sum = sum.add(t(mN - k, k));
    }
    return sum;
  }
}
#!queue	A027168	1	->	0	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027168 Greatest number in row n of array T given by A027157.
 * @author Sean A. Irvine
 */
public class A027168 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = 0;

  @Override
  public Z next() {
    ++mN;
    Z max = Z.ZERO;
    for (long k = 0; k <= mN; ++k) {
      max = max.max(t(mN, k));
    }
    return max;
  }
}
#!queue	A027169	1	->	0	A027157	--------------------------------
package irvine.oeis.a027;

import irvine.math.z.Z;

/**
 * A027169 a(n) = self-convolution of row n of array T given by A027157.
 * @author Sean A. Irvine
 */
public class A027169 extends A027157 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private long mN = 0;

  @Override
  public Z next() {
    ++mN;
    Z sum = Z.ZERO;
    for (long k = 0; k <= mN; ++k) {
      sum = sum.add(t(mN, k).multiply(t(mN, mN - k)));
    }
    return sum;
  }
}
#!queue	A035015	1	->	2	A003285	--------------------------------
package irvine.oeis.a035;

import irvine.math.LongUtils;
import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A035015 Period of continued fraction for square root of n-th squarefree integer.
 * @author Sean A. Irvine
 */
public class A035015 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (LongUtils.isSquareFree(mN) && !t.isZero()) {
        return t;
      }
    }
  }
}
#!queue	A059853	1	->	2	A003285	--------------------------------
package irvine.oeis.a059;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A059853 Period of continued fraction for sqrt(n^2+3), n &gt;= 2.
 * @author Sean A. Irvine
 */
public class A059853 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    mN = 1;
  }

  @Override
  public Z next() {
    return period(Z.valueOf(++mN).square().add(3));
  }
}
#!queue	A059854	1	->	3	A003285	--------------------------------
package irvine.oeis.a059;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A059854 Period of continued fraction for sqrt(n^2+5), n &gt;= 3.
 * @author Sean A. Irvine
 */
public class A059854 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    mN = 2;
  }

  @Override
  public Z next() {
    return period(Z.valueOf(++mN).square().add(5));
  }
}
#!queue	A059866	1	->	2	A003285	--------------------------------
package irvine.oeis.a059;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A059866 Period length of the continued fraction for sqrt(2^n-1).
 * @author Sean A. Irvine
 */
public class A059866 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private Z mA = Z.TWO;

  @Override
  public Z next() {
    mA = mA.multiply2();
    return period(mA.subtract(1));
  }
}
#!queue	A059926	1	->	4	A003285	--------------------------------
package irvine.oeis.a059;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A059926 Length of period of the continued fraction expansion of sqrt(2^n+1).
 * @author Sean A. Irvine
 */
public class A059926 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private int mN = 3;

  @Override
  public Z next() {
    return period(Z.ONE.shiftLeft(++mN).add(1));
  }
}
#!queue	A059927	1	->	0	A003285	--------------------------------
package irvine.oeis.a059;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A059927 Period length of the continued fraction for sqrt(2^(2n+1)).
 * @author Sean A. Irvine
 */
public class A059927 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private int mN = -1;

  @Override
  public Z next() {
    mN += 2;
    return period(Z.ONE.shiftLeft(mN));
  }
}
#!queue	A061490	1	->	0	A003285	--------------------------------
package irvine.oeis.a061;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;
import irvine.util.string.StringUtils;

/**
 * A061490 Smallest number which when iterated n times under A003285 gives a square.
 * @author Sean A. Irvine
 */
public class A061490 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private final boolean mVerbose = "true".equals(System.getProperty("oeis.verbose"));
  private int mN = -1;

  private boolean is(final long k, final int n) {
    Z t = Z.valueOf(k);
    for (int j = 0; j < n; ++j) {
      if (t.isSquare()) {
        return false;
      }
      t = period(t);
    }
    return t.isSquare();
  }

  @Override
  public Z next() {
    ++mN;
    long k = 0;
    while (true) {
      if (is(++k, mN)) {
        return Z.valueOf(k);
      }
      if (mVerbose && k % 100000 == 0) {
        StringUtils.message("n=" + mN + " search completed to " + k);
      }
    }
  }
}

#!queue	A061682	1	->	2	A003285	--------------------------------
package irvine.oeis.a061;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A061682 Length of period of continued fraction expansion of square root of (2^(2n+1)+1).
 * @author Sean A. Irvine
 */
public class A061682 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private int mN = 1;

  @Override
  public Z next() {
    return period(Z.ONE.shiftLeft(2 * ++mN + 1).add(1));
  }
}

#!queue	A062328	1	->	0	A003285	--------------------------------
package irvine.oeis.a062;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A062328 Length of period of continued fraction expansion of square root of 3^n+1.
 * @author Sean A. Irvine
 */
public class A062328 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private Z mA = null;

  @Override
  public Z next() {
    mA = mA == null ? Z.ONE : mA.multiply(3);
    return period(mA.add(1));
  }
}
#!queue	A064025	1	->	2	A003285	--------------------------------
package irvine.oeis.a064;

import irvine.math.z.Z;
import irvine.oeis.a003.A003285;

/**
 * A064025 Length of period of the continued fraction for sqrt(n!).
 * @author Sean A. Irvine
 */
public class A064025 extends A003285 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private Z mF = Z.ONE;
  private long mN = 1;

  @Override
  public Z next() {
    mF = mF.multiply(++mN);
    return period(mF);
  }
}
#!queue	A999999	0	0	0	0
