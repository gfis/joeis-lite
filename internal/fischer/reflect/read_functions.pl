#!perl

# Read joeis/src/irvine/math/function/Functions.java and extract the corresponding A-numbers
# @(#) $Id$
# 2024-05-17, Georg Fischer: copied from packex.pl
#
#:# Usage:
#:#   perl read_functions.pl [-d debug] infile.java > outfile.gen
#:#

#--------------------------------------------------------
use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min);
if (0 && scalar(@ARGV) == 0) {
    print `grep -E "^#:#" $0 | cut -b3-`;
    exit;
}
my $pwd = `pwd`;
$pwd =~ m{(\/joeis\-lite\/internal\/fischer\S*)};
print "# Generated by ..$1/$0 at $timestamp\n";
my $mode = "u";
my $debug = 0;
my $callcode = "functions";
my $offset = 0;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{d}) {
        $debug     = shift(@ARGV);
    } elsif ($opt  =~ m{m}) {
        $mode      = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

my $aseqno;
my $parm;
my ($varph1, $varph2) = ("_V1", "_V2"); # 1st and 2nd placeholder for parameters
while (<>) { # read inputfile
    s{\s+\Z}{}; # chompr
    my $line = $_;
    if ($line =~ m{\/\/ *\= *(A\d+.*)}) {
        my $list = $1;
        $list =~ s{ |\;.*}{}g;
        if ($line =~ m{Function(\d\w?) +([A-Z0-9_]+)}) {
            my ($ifunc, $static) = ($1, $2);
            if (0) {
            } elsif ($ifunc eq "1") {
                $aseqno = $list;
                #   print join("\t", $aseqno, "Funct$ifunc", "Functions.$static.z($varph1)", "Functions.$static.i($varph1)") . "\n";
                    print join("\t", $aseqno, "Funct$ifunc", "Functions.$static.z(") . "\n";
            } elsif ($ifunc eq "2D") {
                foreach my $seq (split(/\=/, $list)) {
                    ($aseqno, $parm) = split(/\(/, $seq);
                #   print join("\t", $aseqno, "Funct$ifunc", "Functions.$static.z(${parm} $varph1)", "Functions.$static.i(${parm} $varph1)") . "\n";
                    print join("\t", $aseqno, "Func$ifunc", "Functions.$static.z(${parm}") . "\n";
                }
            } else { # "2"
            }
        } else {
            print "2: $line\n" if $debug >= 1;
        }
    } else {
        print "1: $line\n" if $debug >= 1;
    }
} # while <>
__DATA__
  /** Primorial base log representation. */
  public static final Function1 PRIMORIAL_BASE_LOG = new PrimorialBaseLog(); // =A276085
  /** Primorial base exp representation. */
  public static final Function1 PRIMORIAL_BASE_EXP = new PrimorialBaseExp(); // =A276086

  /** Reverse the digits of a number. */
  public static final Function2 REVERSE = new Reverse(); // =A004086(10, =A305989(2,
  /** Number of digits in a number. */

->

A004086	Func2D	Functions.REVERSE.z(10,
A276085	Func1	Functions.PRIMORIAL_BASE_LOG.z(
A276086	Func1	Functions.PRIMORIAL_BASE_EXP.z(
A305989	Func2D	Functions.REVERSE.z(2,
