#!queue	A005594	1	->	0	CycleTransformSequence	--------------------------------
package irvine.oeis.a005;

import irvine.oeis.a054.A054977;
import irvine.oeis.transform.CycleTransformSequence;

/**
 * A005594 States of a dynamic storage system.
 * @author Sean A. Irvine
 */
public class A005594 extends CycleTransformSequence {

  /** Construct the sequence. */
  public A005594() {
    super(0, new A054977(), 0);
  }
}

#!queue	A055890	1	->	0	CycleTransformSequence	--------------------------------
package irvine.oeis.a055;

import irvine.oeis.a000.A000041;
import irvine.oeis.transform.CycleTransformSequence;

/**
 * A055890 CIK transform of partition numbers A000041.
 * @author Sean A. Irvine
 */
public class A055890 extends CycleTransformSequence {

  /** Construct the sequence. */
  public A055890() {
    super(0, new A000041(), 1);
  }
}
#!queue	A055891	1	->	0	CycleTransformSequence	--------------------------------
package irvine.oeis.a055;

import irvine.oeis.a000.A000079;
import irvine.oeis.transform.CycleTransformSequence;

/**
 * A055891 CIK (necklace, indistinct, unlabeled) transform of powers of 2.
 * @author Sean A. Irvine
 */
public class A055891 extends CycleTransformSequence {

  /** Construct the sequence. */
  public A055891() {
    super(0, new A000079(), 1);
  }
}
#!queue	A058631	1	->	0	ContinuedFractionSequence	--------------------------------
package irvine.oeis.a058;
// Generated by gen_seq4.pl cofrseq/cofr at 2022-02-27 23:17

import irvine.oeis.a010.A010060;
import irvine.oeis.cons.ContinuedFractionSequence;

/**
 * A058631 Continued fraction for the Morse-Thue constant .01101001100101101001... formed from A010060.
 * @author Georg Fischer.
 */
public class A058631 extends ContinuedFractionSequence {

  /** Construct the sequence */
  public A058631() {
    super(0, new A010060(), 10);
  }
}
#!queue	A060037	0	->	2	DoubleRowTriangle	--------------------------------
package irvine.oeis.a060;

import irvine.math.z.Z;
import irvine.oeis.triangle.DoubleRowTriangle;

/**
 * A060037 Triangular array T read by rows: T(n,k)=k^2 mod n, for k=1,2,...,[n/2], n=2,3,...
 * @author Georg Fischer
 */
public class A060037 extends DoubleRowTriangle {

  /** Construct the sequence. */
  public A060037() {
    setOffset(2);
  }

  @Override
  public Z compute(int n, int k) {
    n += 2;
    ++k;
    return n <= 3 ? Z.ONE : Z.valueOf((k * k) % n);
  }
}
#!queue	A060187	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a060;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A060187 Triangle read by rows: Eulerian numbers of type B, T(n,k) (1 &lt;= k &lt;= n) given by T(n, 1) = T(n,n) = 1, otherwise T(n, k) = (2*n - 2*k + 1)*T(n-1, k-1) + (2*k - 1)*T(n-1, k).
 * @author Georg Fischer
 */
public class A060187 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(2 * (n - k) + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(2 * k + 1);
  }

}
#!queue	A067043	1	->	0	RecordPositionSubsequence	--------------------------------
package irvine.oeis.a067;
// Generated by gen_seq4.pl recordpos at 2021-06-29

import irvine.oeis.RecordPositionSubsequence;
import irvine.oeis.a048.A048377;

/**
 * A067043 Nondecreasing sums of digits: a(0) = 0 and for n&gt;0: a(n) = Min{m&gt;n|SumOfDigits(m)&gt;= SumOfDigits(a(n-1))}, where SumOfDigits = A007953.
 * @author Georg Fischer
 */
public class A067043 extends RecordPositionSubsequence {

  /** Construct the sequence. */
  public A067043() {
    super(0, 0, new A048377());
  }
}

#!queue	A070063	-2	->	-22	DecimalExpansionSequence	--------------------------------
package irvine.oeis.a070;

import irvine.math.r.PhysicsConstants;
import irvine.math.z.Z;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A070063 Decimal expansion of the Boltzmann constant k in the 2019 SI system in units J/K.
 * @author Sean A. Irvine
 * @author Georg Fischer
 */
public class A070063 extends DecimalExpansionSequence {

  /** Construct the sequence. */
  public A070063() {
    super(1, PhysicsConstants.BOLTZMANN_CR.multiply(Z.TEN.pow(23)));
  }

  @Override
  public int getOffset() {
    return -22;
  }
}
#!queue	A075435	0	->	2	PartitionTransformTriangle	--------------------------------
package irvine.oeis.a075;

import irvine.oeis.a000.A000984;
import irvine.oeis.triangle.PartitionTransformTriangle;

/**
 * A075435 T(n,k) = right- or upward-moving paths connecting opposite corners of an n X n chessboard, visiting the diagonal at k points between start and finish.
 * @author Georg Fischer
 */
public class A075435 extends PartitionTransformTriangle {

  /** Construct the sequence. */
  public A075435() {
    super(0, new A000984(), 1);
    setOffset(2);
  }
}
#!queue	A078341	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a078;
// Generated by gen_seq4.pl modpas2 at 2021-11-12 23:48

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A078341 Triangle read by rows: T(n,k) = n*T(n-1,k-1) + k*T(n-1,k) starting with T(0,0)=1.
 * @author Georg Fischer
 */
public class A078341 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(n);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(k);
  }

}
#!queue	A103516	1	->	0	BaseTriangle	--------------------------------
package irvine.oeis.a103;
// manually 2023-06-24

import irvine.math.z.Z;
import irvine.oeis.triangle.BaseTriangle;

/**
 * A103516 Triangle read by rows: count in a vee.
 * @author Georg Fischer
 */
public class A103516 extends BaseTriangle {

  /** Construct the sequence. */
  public A103516() {
    super(0, 1, 1);
    hasRAM(true);
  }

  @Override
  public Z triangleElement(final int n, final int k) {
    return (k == n || k == 1) ? Z.valueOf(n) : Z.ZERO;
  }
}

#!queue	A142458	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a142;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A142458 Triangle T(n,k) read by rows: T(n,k) = 1 if k=1 or k=n, otherwise T(n,k) = (3*n-3*k+1)*T(n-1,k-1) + (3*k-2)*T(n-1,k).
 * @author Georg Fischer
 */
public class A142458 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(3 * (n - k) + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(3 * k + 1);
  }

}
#!queue	A142459	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a142;
// Generated by gen_seq4.pl modpas2 at 2021-11-12 23:48

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A142459 Triangle read by rows: T(n,k) = (4n-4k+1) * T(n-1,k-1) + (4k-3) * T(n-1,k).
 * @author Georg Fischer
 */
public class A142459 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(4 * n - 4 * k + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(4 * k + 1);
  }

}
#!queue	A142460	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a142;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A142460 Triangle read by rows: T(n,k) (1&lt;=k&lt;=n) given by T(n, 1) = T(n,n) = 1, otherwise T(n, k) = (m*n-m*k+1)*T(n-1,k-1) + (m*k-m+1)*T(n-1,k), where m = 5.
 * @author Georg Fischer
 */
public class A142460 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(5 * (n - k) + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(5 * k + 1);
  }

}
#!queue	A142461	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a142;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A142461 Triangle read by rows: T(n,k) (1 &lt;= k &lt;= n) given by T(n, 1) = T(n,n) = 1, otherwise T(n, k) = (m*n-m*k+1)*T(n-1,k-1) + (m*k-m+1)*T(n-1,k), where m = 6.
 * @author Georg Fischer
 */
public class A142461 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(6 * (n - k) + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(6 * k + 1);
  }

}
#!queue	A142462	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a142;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A142462 Triangle read by rows: T(n,k) (1&lt;=k&lt;=n) given by T(n, 1) = T(n,n) = 1, otherwise T(n, k) = (m*n-m*k+1)*T(n-1,k-1) + (m*k-m+1)*T(n-1,k), where m = 7.
 * @author Georg Fischer
 */
public class A142462 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(7 * (n - k) + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(7 * k + 1);
  }

}
#!queue	A144431	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a144;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A144431 Triangle read by rows: T(n,k) (1 &lt;= k &lt;= n) given by T(n,1) = T(n,n) = 1, otherwise T(n, k) = (m*n-m*k+1)*T(n-1,k-1) + (m*k-m+1)*T(n-1,k), where m = -1.
 * @author Georg Fischer
 */
public class A144431 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf((k - n) + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(1 - k);
  }

}
#!queue	A144696	0	->	2	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a144;
// manually

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A144696 Triangle of 2-Eulerian numbers.
 * @author Georg Fischer
 */
public class A144696 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(n - k + 2);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(k + 1);
  }
}
#!queue	A144697	0	->	3	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a144;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A144697 Triangle of 3-Eulerian numbers.
 * @author Georg Fischer
 */
public class A144697 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf((n - k + 1) + 2);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(k - 1 + 2);
  }

}
#!queue	A144698	0	->	4	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a144;
// manually

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A144698 Triangle of 4-Eulerian numbers.
 * @author Georg Fischer
 */
public class A144698 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(n - k + 4);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(k + 1);
  }
}
#!queue	A144699	0	->	5	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a144;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A144699 Triangle of 5-Eulerian numbers.
 * @author Georg Fischer
 */
public class A144699 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf((n - k + 2) + 3);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(k - 2 + 3);
  }

}
#!queue	A165507	0	->	1	RationalTriangle	--------------------------------
package irvine.oeis.a165;

import irvine.math.q.Q;
import irvine.math.z.Z;
import irvine.oeis.triangle.RationalTriangle;

/**
 * A165507 Triangle T(n,m) read by rows: numerator of 1/(1+n-m)^2 - 1/m^2.
 * @author Georg Fischer
 */
public class A165507 extends RationalTriangle {

  /** Construct the sequence. */
  public A165507() {
    super($(OFFSET));
    hasRAM(true);
  }

  @Override
  public Q compute(int n, int m) {
    ++n;
    ++m;
    return n == 1 ? Q.ZERO : new Q(Z.ONE, Z.valueOf(1 + n - m).square()).subtract(new Q(1, m * m));
  }
}
#!queue	A167884	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a167;
// Generated by gen_seq4.pl A257606/modpas2 at 2021-11-16 20:50

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A167884 Triangle read by rows: T(n,k) given by T(n, 1) = T(n,n) = 1, otherwise T(n, k) = (m*n-m*k+1)*T(n-1,k-1) + (m*k-m+1)*T(n-1,k), where m = 8.
 * @author Georg Fischer
 */
public class A167884 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.valueOf(8 * (n - k) + 1);
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return Z.valueOf(8 * k + 1);
  }

}
#!queue	A173651	0	->	1	RationalTriangle	--------------------------------
package irvine.oeis.a173;

import irvine.math.q.Q;
import irvine.math.z.Z;
import irvine.oeis.triangle.RationalTriangle;

/**
 * A173651 Triangle T(n,m) read by rows: numerator of 1/(n-m)^2-1/m^2, or -1 if m=0.
 * @author Georg Fischer
 */
public class A173651 extends RationalTriangle {

  /** Construct the sequence. */
  public A173651() {
    super($(OFFSET));
    hasRAM(true);
  }

  @Override
  public Q compute(int n, final int m) {
    ++n;
    return m == 0 ? Q.NEG_ONE : new Q(Z.ONE, Z.valueOf(n - m).square()).subtract(new Q(1, m * (long) m));
  }
}
#!queue	A176242	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a176;
// Generated by gen_seq4.pl modpas2/modpaz2 at 2021-11-12 23:48

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A176242 Triangle read by rows, T(n, 1) = 1 and T(n,k) = q^k*T(n-1, k) + T(n-1, k-1) for 2 &lt;= k &lt;= n, n &gt;= 1, with q=2.
 * @author Georg Fischer
 */
public class A176242 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.ONE;
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return k == 0 ? Z.ONE : Z.TWO.pow(k + 1);
  }

}
#!queue	A176243	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a176;
// Generated by gen_seq4.pl modpas2/modpaz2 at 2021-11-12 23:48

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A176243 Triangle generated by T(n,k) = q^k*T(n-1, k) + T(n-1, k-1), with q=3.
 * @author Georg Fischer
 */
public class A176243 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.ONE;
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return k == 0 ? Z.ONE : Z.THREE.pow(k + 1);
  }

}
#!queue	A176244	0	->	1	ModifiedPascalTriangle	--------------------------------
package irvine.oeis.a176;
// Generated by gen_seq4.pl modpas2/modpaz2 at 2021-11-12 23:48

import irvine.math.z.Z;
import irvine.oeis.triangle.ModifiedPascalTriangle;

/**
 * A176244 Triangle generated by T(n,k) = q^k*T(n-1, k) + T(n-1, k-1), with q=4.
 * @author Georg Fischer
 */
public class A176244 extends ModifiedPascalTriangle {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  protected Z factorF(final long n, final long k) {
    return Z.ONE;
  }

  @Override
  protected Z factorG(final long n, final long k) {
    return k == 0 ? Z.ONE : Z.FOUR.pow(k + 1);
  }

}
#!queue	A243112	1	->	0	RecordPositionSubsequence	--------------------------------
package irvine.oeis.a243;
// Generated by gen_seq4.pl deris/recordpos at 2022-04-27

import irvine.oeis.RecordPositionSubsequence;
import irvine.oeis.a055.A055941;

/**
 * A243112 a(n) is the smallest number that requires at least n adjacent bit swaps in order to pack all the ones to the right.
 * @author Georg Fischer
 */
public class A243112 extends RecordPositionSubsequence {

  /** Construct the sequence. */
  public A243112() {
    super(0, new A055941());
  }

  @Override
  public int getOffset() {
    return 0;
  }
}
#!queue	A267863	0	->	1	RationalTriangle	--------------------------------
package irvine.oeis.a267;

import irvine.math.q.Q;
import irvine.oeis.triangle.RationalTriangle;

/**
 * A267863 Numerators of the rational number triangle R(m, a) = (m - 2*a)/(2*m), m &gt;= 1, a = 1, ..., m. This is a regularized Sum_{j &gt;= 0} (a + m*j)^(-s) for s = 0 defined by analytic continuation of a generalized Hurwitz Zeta function.
 * This is a regularized Sum_{j &gt;= 0} (a + m*j)^(-s) for s = 0 defined by analytic continuation of a generalized Hurwitz Zeta function.
 * @author Georg Fischer
 */
public class A267863 extends RationalTriangle {

  /** Construct the sequence. */
  public A267863() {
    super($(OFFSET));
    hasRAM(true);
  }

  @Override
  public Q compute(int m, int a) {
    ++m;
    ++a;
    return new Q(m - 2 * a, 2 * m);
  }
}
#!queue	A268915	0	->	1	RationalTriangle	--------------------------------
package irvine.oeis.a268;

import irvine.math.q.Q;
import irvine.oeis.triangle.RationalTriangle;

/**
 * A268915 Numerators of the rational number triangle R(m, a) = - (m^2 - 6*m*a + 6*a^2)/(12*m), m &gt;= 1, a = 1, ..., m.  This is a regularized Sum_{j &gt;= 0} (a + m*j) defined by analytic continuation of a generalized Hurwitz Zeta function.
 * This is a regularized Sum_{j &gt;= 0} (a + m*j) defined by analytic continuation of a generalized Hurwitz Zeta function.
 * @author Georg Fischer
 */
public class A268915 extends RationalTriangle {

  /** Construct the sequence. */
  public A268915() {
    super($(OFFSET));
    hasRAM(true);
  }

  @Override
  public Q compute(int m, int a) {
    ++m;
    ++a;
    return new Q(-(m * m - 6 * m * a + 6 * a * a), 12 * m);
  }
}
#!queue	A268917	0	->	1	RationalTriangle	--------------------------------
package irvine.oeis.a268;

import irvine.math.q.Q;
import irvine.oeis.triangle.RationalTriangle;

/**
 * A268917 Numerators of the rational number triangle R(m, a) = -a*(m-a)*(m - 2*a)/(6*m), m &gt;= 1, a = 1, ..., m. This is a regularized Sum_{j &gt;= 0} (a + m*j)^(-s) for s = -2 defined by analytic continuation of a generalized Hurwitz Zeta function.
 * This is a regularized Sum_{j &gt;= 0} (a + m*j)^(-s) for s = -2 defined by analytic continuation of a generalized Hurwitz Zeta function.
 * @author Georg Fischer
 */
public class A268917 extends RationalTriangle {

  /** Construct the sequence. */
  public A268917() {
    super($(OFFSET));
    hasRAM(true);
  }

  @Override
  public Q compute(int m, int a) {
    ++m;
    ++a;
    return new Q(-a * (m - a) * (m - 2 * a), 6 * m);
  }
}
#!queue	A268919	0	->	1	RationalTriangle	--------------------------------
package irvine.oeis.a268;

import irvine.math.q.Q;
import irvine.math.z.Z;
import irvine.oeis.triangle.RationalTriangle;

/**
 * A268919 Numerators of the rational number triangle R(m, a) =  (m^4 - 30*m^2*a^2 + 60*m*a^3 -30*a^4) / (120*m), m &gt;= 1, a = 1, ..., m. This is a regularized Sum_{j &gt;= 0} (a + m*j)^(-s) for s = -3 defined by analytic continuation of a generalized Hurwitz Zeta function.
 * This is a regularized Sum_{j &gt;= 0} (a + m*j)^(-s) for s = -3 defined by analytic continuation of a generalized Hurwitz Zeta function.
 * @author Georg Fischer
 */
public class A268919 extends RationalTriangle {

  /** Construct the sequence. */
  public A268919() {
    super($(OFFSET));
    hasRAM(true);
  }

  @Override
  public Q compute(int m, int a) {
    final Z mz = Z.valueOf(++m);
    final Z az = Z.valueOf(++a);
    return new Q(mz.pow(4).subtract(mz.multiply(30 * m).multiply(a * a)).add(az.pow(3).multiply(60 * m)).subtract(az.pow(4).multiply(30)), Z.valueOf(120 * m));
  }
}
#!queue	A306800	1	->	0	UpperLeftTriangle	--------------------------------
package irvine.oeis.a306;

import irvine.math.MemoryFunctionInt3;
import irvine.math.z.Binomial;
import irvine.math.z.Z;
import irvine.oeis.triangle.UpperLeftTriangle;

/**
 * A306800 Square array whose entry A(n,k) is the number of endofunctions on a set of size n with preimage constraint {0,1,...,k}, for n &gt;= 0, k &gt;= 0, read by descending antidiagonals.
 * @author Georg Fischer
 */
public class A306800 extends UpperLeftTriangle {

  /** Construct the sequence. */
  public A306800() {
    super(0, 0, 0, -1);
    hasRAM(true);
  }

  /* Maple:
    b:= proc(n, i, k) option remember; `if`(n=0 and i=0, 1, `if`(i<1, 0,
          add(b(n-j, i-1, k)*binomial(n, j), j=0..min(k, n))))
        end:
    A:= (n, k)-> b(n$2, k):
    seq(seq(A(n, d-n), n=0..d), d=0..12);  # _Alois P. Heinz_, Apr 05 2019
  */
  private final MemoryFunctionInt3<Z> mB = new MemoryFunctionInt3<Z>() {
    @Override
    protected Z compute(final int n, final int i, final int k) {
      if (n == 0 && i == 0) {
        return Z.ONE;
      }
      if (i < 1) {
        return Z.ZERO;
      }
      Z sum = Z.ZERO;
      final int jmax = k < n ? k : n;
      for (int j = 0; j <= jmax; ++j) {
        sum = sum.add(get(n - j, i - 1, k).multiply(Binomial.binomial(n, j)));
      }
      return sum;
    }
  };

  @Override
  public Z matrixElement(final int n, final int k) {
    return mB.get(n, n, k);
  }
}
#!queue	A322127	0	->	1	RationalTriangle	--------------------------------
package irvine.oeis.a322;

import irvine.math.factorial.MemoryFactorial;
import irvine.math.q.Q;
import irvine.math.z.Binomial;
import irvine.oeis.triangle.RationalTriangle;

/**
 * A322127 Triangular array, read by rows: T(n,k) = numerator of binomial(n-1, n-k)/k!, 1 &lt;= k &lt;= n.
 * @author Georg Fischer
 */
public class A322127 extends RationalTriangle {

  private static final MemoryFactorial FACTORIAL = MemoryFactorial.SINGLETON;

  /** Construct the sequence. */
  public A322127() {
    super($(OFFSET));
    hasRAM(true);
  }

  @Override
  protected Q compute(int n, int k) {
    ++n;
    ++k;
    return new Q(Binomial.binomial(n - 1, n - k), FACTORIAL.factorial(k));
  }
}
#!queue	A999999	0	0	0	0
