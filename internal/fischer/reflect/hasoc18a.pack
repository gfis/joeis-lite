#!queue	A002575	0	->	2	A125790	--------------------------------
package irvine.oeis.a002;

import irvine.math.z.Z;
import irvine.oeis.Conjectural;
import irvine.oeis.a125.A125790;

/**
 * A002575 Coefficients of Bell's formula for making change.
 * @author Sean A. Irvine
 */
public class A002575 extends A125790 implements Conjectural {

  private long mN = -1;

  /** Construct the sequence. */
  public A002575() {
    super(2);
  }

  @Override
  public Z next() {
    return get(++mN, 2L);
  }
}
#!queue	A003270	0	->	1	A099054	--------------------------------
package irvine.oeis.a003;

import irvine.oeis.Conjectural;
import irvine.oeis.a099.A099054;

/**
 * A003270 A nonrepetitive sequence.
 * @author Sean A. Irvine
 */
public class A003270 extends A099054 implements Conjectural {
}
#!queue	A003652	1	->	2	A003658	--------------------------------
package irvine.oeis.a003;

import irvine.oeis.Conjectural;
import irvine.math.group.QuadraticFieldUtils;
import irvine.math.z.Z;

/**
 * A003652 Class number of real quadratic field with discriminant A003658(n), n &gt;= 2.
 * @author Sean A. Irvine
 */
public class A003652 extends A003658 implements Conjectural {

  // contains heuristics.

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(2);
    super.next(); // skip 1
  }

  @Override
  public Z next() {
    return Z.valueOf(QuadraticFieldUtils.classNumber(super.next()));
  }
}
#!queue	A048958	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048958 4-digit terms in the continued fraction for Pi.
 * @author Sean A. Irvine
 */
public class A048958 extends A001203 {

  private static final Z LOWER = Z.valueOf(1000);
  private static final Z UPPER = Z.valueOf(10000);

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(1);
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return t;
      }
    }
  }
}
#!queue	A048959	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048959 Positions of 4-digit terms in the continued fraction for Pi (3 is at position 0).
 * @author Sean A. Irvine
 */
public class A048959 extends A001203 {

  private static final Z LOWER = Z.valueOf(1000);
  private static final Z UPPER = Z.valueOf(10000);
  private long mM = -1;

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(1);
  }

  @Override
  public Z next() {
    while (true) {
      ++mM;
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return Z.valueOf(mM);
      }
    }
  }
}
#!queue	A048960	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048960 5-digit terms in the continued fraction for Pi.
 * @author Sean A. Irvine
 */
public class A048960 extends A001203 {

  private static final Z LOWER = Z.valueOf(10000);
  private static final Z UPPER = Z.valueOf(100000);

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(1);
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return t;
      }
    }
  }
}
#!queue	A048961	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048961 Positions of 5-digit terms in the continued fraction for Pi (3 is position 0).
 * @author Sean A. Irvine
 */
public class A048961 extends A001203 {

  private static final Z LOWER = Z.valueOf(10000);
  private static final Z UPPER = Z.valueOf(100000);
  private long mM = -1;

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(1);
  }

  @Override
  public Z next() {
    while (true) {
      ++mM;
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return Z.valueOf(mM);
      }
    }
  }
}
#!queue	A050777	1	->	0	A050703	--------------------------------
package irvine.oeis.a050;

import irvine.factor.prime.Fast;
import irvine.math.z.Z;
import irvine.util.array.DynamicLongArray;

/**
 * A050777 First occurrence from iterated procedure 'composite k added to sum of its prime factors reaches a prime' yielding n skipped primes.
 * @author Sean A. Irvine
 */
public class A050777 extends A050703 {

  private final DynamicLongArray mFirsts = new DynamicLongArray();
  private final Fast mPrime = new Fast();
  private int mM = 0;
  private long mN = 1;

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(0);
  }

  @Override
  public Z next() {
    ++mM;
    while (mFirsts.get(mM) == 0) {
      final Z n = Z.valueOf(++mN);
      if (!n.isProbablePrime()) {
        Z t = f(n);
        while (!t.isProbablePrime()) {
          t = f(t);
        }
        Z p = n;
        int cnt = 0;
        while (p.compareTo(t) < 0) {
          p = mPrime.nextPrime(p);
          ++cnt;
        }
        if (mFirsts.get(cnt) == 0) {
          mFirsts.set(cnt, mN);
        }
      }
    }
    return Z.valueOf(mFirsts.get(mM));
  }
}
#!queue	A052434	1	->	2	A000720	--------------------------------
package irvine.oeis.a052;

import irvine.math.Mobius;
import irvine.math.cr.CR;
import irvine.math.z.Z;
import irvine.oeis.a000.A000720;

/**
 * A052434 Nearest integer to R(n) - pi(n), where R(x) is the Riemann prime counting function.
 * @author Sean A. Irvine
 */
public class A052434 extends A000720 {

  // This is slow ... and heuristic ...

  private static final long HEURISTIC_TERMS = 10000;
  private long mN = 1;

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(2);
    super.next();
  }

  protected CR riemann(final long n) {
    return new CR() {
      @Override
      protected Z approximate(final int precision) {
        final CR ncr = CR.valueOf(n);
        Z sum = Z.ZERO;
        long k = 0;
        while (true) {
          final CR kcr = CR.valueOf(++k);
          final Z t = ncr.pow(kcr.inverse()).li().divide(kcr).getApprox(precision);
          if (t.isZero() || k > HEURISTIC_TERMS) {
            break;
          }
          final int mobius = Mobius.mobius(k);
          if (mobius != 0) {
            sum = sum.signedAdd(mobius == 1, t);
          }
        }
        return sum;
      }
    };
  }

  @Override
  public Z next() {
    final CR r = riemann(++mN);
    //System.out.println(mN + " R=" + r);
    return r.subtract(CR.valueOf(super.next())).round();
  }
}
#!queue	A054760	1	->	0	A198300	--------------------------------
package irvine.oeis.a054;

import irvine.math.graph.Graph;
import irvine.math.nauty.GenerateGraphs;
import irvine.math.nauty.GraphProcessor;
import irvine.math.z.Z;
import irvine.oeis.a198.A198300;
import irvine.util.string.StringUtils;

/**
 * A054760 Table T(n,k) = order of (n,k)-cage (smallest n-regular graph of girth k), n &gt;= 2, k &gt;= 3, read by antidiagonals.
 * @author Sean A. Irvine
 */
public class A054760 extends A198300 implements GraphProcessor {

  private static class FoundItException extends RuntimeException { }
  private final boolean mVerbose = "true".equals(System.getProperty("oeis.verbose"));

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(0);
  }

  @Override
  public void process(final Graph graph) {
    if (graph.girth() >= mM + 3) {
      throw new FoundItException(); // Abort any further computation we found the solution
    }
  }

  @Override
  public Z next() {
    int n = super.next().intValueExact();
    while (true) {
      final int degree = mN + 1 - mM;
      if (mVerbose) {
        StringUtils.message("Trying " + n + " vertices with degree " + degree + " and target girth " + (mM + 3));
      }
      final GenerateGraphs gg = new GenerateGraphs(0);
      gg.setProcessor(this);
      gg.setVertices(n);
      gg.setMinDeg(degree);
      gg.setMaxDeg(degree);
      gg.setMinEdges(0);
      gg.setMaxEdges(Integer.MAX_VALUE);
      gg.setConnectionLevel(1);
      gg.sanitizeParams();
      try {
        gg.run(false, mM > 2, mM > 1, 0, 0);
      } catch (final FoundItException e) {
        return Z.valueOf(n);
      }
      ++n;
    }
  }

}
#!queue	A056483	0	->	1	A056477	--------------------------------
package irvine.oeis.a056;

import irvine.math.z.Z;
import irvine.oeis.Sequence;

/**
 * A056483 Number of primitive (aperiodic) palindromic structures using exactly four different symbols.
 * @author Georg Fischer
 */
public class A056483 extends A056477 {

  private final Sequence mSeq = new A056478();

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(1);
    next();
  }

  @Override
  public Z next() {
    return mSeq.next().subtract(super.next());
  }
}
#!queue	A056484	0	->	1	A056478	--------------------------------
package irvine.oeis.a056;

import irvine.math.z.Z;
import irvine.oeis.Sequence;

/**
 * A056484 Number of primitive (aperiodic) palindromic structures using exactly five different symbols.
 * @author Georg Fischer
 */
public class A056484 extends A056478 {

  private final Sequence mSeq = new A056479();

  /** Construct the sequence. */
  protected $(ASEQNO)() {
    super(1);
    next();
  }

  @Override
  public Z next() {
    return mSeq.next().subtract(super.next());
  }
}

#!queue	A067480	0	->	1	A008952	--------------------------------
package irvine.oeis.a067;

import irvine.math.z.Z;
import irvine.oeis.a008.A008952;

/**
 * A067480 Powers of 2 with initial digit 2.
 * @author Georg Fischer
 */
public class A067480 extends A008952 {

  protected int mN;
  protected Z mDigit;

  /** Construct the sequence. */
  public A067480() {
    this(0, 2);
  }

  /**
   * Generic constructor with parameters
   * @param digit leading digit
   */
  public A067480(final int digit) {
    this(0, digit);
  }

  /**
   * Generic constructor with parameters
   * @param offset first index
   * @param digit leading digit
   */
  public A067480(final int offset, final int digit) {
    super(offset);
    mN = -1;
    mDigit = Z.valueOf(digit);
  }

  @Override
  public Z next() {
    ++mN;
    while (!super.next().equals(mDigit)) {
      ++mN;
    }
    return Z.ONE.shiftLeft(mN);
  }
}
#!queue	A319394	1	->	0	Triangle	--------------------------------
package irvine.oeis.a319;

import irvine.math.MemoryFunction1;
import irvine.math.MemoryFunctionInt2;
import irvine.math.group.IntegerField;
import irvine.math.group.PolynomialRingField;
import irvine.math.polynomial.Polynomial;
import irvine.math.z.Z;
import irvine.oeis.triangle.Triangle;

/**
 * A319394 Number T(n,k) of partitions of n into exactly k positive Fibonacci numbers; triangle T(n,k), n&gt;=0, 0&lt;=k&lt;=n, read by rows.
 * @author Georg Fischer
 */
public class A319394 extends Triangle {

  /**
   * Constructor with offset.
   * @param offset first index
   */
  protected A319394(final int offset) {
    super(offset);
  }

  private static final PolynomialRingField<Z> RING = new PolynomialRingField<>(IntegerField.SINGLETON);

  /** Construct the sequence. */
  public A319394() {
    super(1, 1, -1);
    hasRAM(true);
  }

  /* Maple:
    h:= proc(n) option remember; `if`(n<1, 0, `if`((t->
          issqr(t+4) or issqr(t-4))(5*n^2), n, h(n-1)))
        end:
    b:= proc(n, i) option remember; `if`(n=0 or i=1, x^n,
          b(n, h(i-1))+expand(x*b(n-i, h(min(n-i, i)))))
        end:
    T:= n-> (p-> seq(coeff(p, x, i), i=0..n))(b(n, h(n))):
    seq(T(n), n=0..20);
  */
  private final MemoryFunction1<Integer> mH = new MemoryFunction1<Integer>() {
    @Override
    protected Integer compute(final int n) {
      if (n < 1) {
        return 0;
      }
      final int t = 5 * n * n;
      return Z.valueOf(t + 4).isSquare() || Z.valueOf(t - 4).isSquare() ? n : get(n - 1);
    }
  };

  private final MemoryFunctionInt2<Polynomial<Z>> mB = new MemoryFunctionInt2<Polynomial<Z>>() {
    @Override
    protected Polynomial<Z> compute(final int n, final int i) {
      if (n == 0 || i == 1) {
        return RING.monomial(Z.ONE, n);
      }
      return RING.add(get(n, mH.get(i - 1)), RING.shift(get(n - i, mH.get(Math.min(i, n - i))), 1));
    }
  };

  @Override
  protected Z compute(final int n, final int k) {
    return mB.get(n, mH.get(n)).coeff(k);
  }
}

#!queue	A999999	0	0	0	0
