#!queue	A038498	1	->	1	AbstractSequence	--------------------------------
package irvine.oeis.a038;

import irvine.math.api.Matrix;
import irvine.math.group.MatrixField;
import irvine.math.matrix.DefaultMatrix;
import irvine.math.q.Q;
import irvine.math.q.Rationals;
import irvine.math.z.Z;
import irvine.oeis.AbstractSequence;
import irvine.oeis.Sequence;
import irvine.oeis.a008.A008284;

/**
 * A038498 Matrix inverse of partition triangle A008284.
 * @author Sean A. Irvine
 */
public class A038498 extends AbstractSequence {

  /** Constructor with offset.
   * @param offset first index
   */
  public $(ASEQNO)(final int offset) {
    super(offset);
  }

  private final DefaultMatrix<Q> mA = new DefaultMatrix<>(0, 0, Q.ZERO);
  private final Sequence mSeq;
  private Matrix<Q> mAInverse = null;
  private int mN = 0;
  private int mM = 0;

  protected A038498(final Sequence triangle) {
    super(1);
    mSeq = triangle;
  }

  /** Construct the sequence. */
  public A038498() {
    this(new A008284());
  }

  protected int exponent() {
    return 1;
  }

  @Override
  public Z next() {
    if (++mM >= mN) {
      mA.setRows(++mN);
      mA.setCols(mN);
      for (int k = 0; k < mN; ++k) {
        mA.set(mN - 1, k, new Q(mSeq.next()));
      }
      final MatrixField<Q> field = new MatrixField<>(mN, Rationals.SINGLETON);
      mAInverse = field.pow(field.inverse(mA), exponent());
      mM = 0;
    }
    return mAInverse.get(mN - 1, mM).toZ();
  }
}
#!queue	A048557	1	->	1	AbstractSequence	--------------------------------
package irvine.oeis.a048;

import irvine.math.cr.CR;
import irvine.math.z.Z;
import irvine.oeis.AbstractSequence;

/**
 * A048557 a(1) = 1; a(n+1) is next smallest nontrivial square beginning with a(n).
 * @author Sean A. Irvine
 */
public class A048557 extends AbstractSequence {

  /** Constructor with offset.
   * @param offset first index
   */
  public $(ASEQNO)(final int offset) {
    super(offset);
  }

  private Z mA = null;
  private final Z mStart;

  protected A048557(final Z start) {
    super(1);
    mStart = start;
  }

  /** Construct the sequence. */
  public A048557() {
    this(Z.ONE);
  }

  @Override
  public Z next() {
    if (mA == null) {
      mA = mStart;
    } else {
      Z u = mA;
      while (true) {
        u = u.multiply(10);
        final String s = mA.toString();
        final Z sqrt = CR.valueOf(u).sqrt().ceil();
        Z t = sqrt.square();
        if (t.equals(u)) {
          t = sqrt.add(1).square();
        }
        if (t.toString().startsWith(s)) {
          mA = t;
          break;
        }
      }
    }
    return mA;
  }
}
#!queue	A048805	0	->	0	AbstractSequence	--------------------------------
package irvine.oeis.a048;

import irvine.math.api.Matrix;
import irvine.math.group.MatrixField;
import irvine.math.matrix.DefaultMatrix;
import irvine.math.q.Q;
import irvine.math.q.Rationals;
import irvine.math.z.Z;
import irvine.oeis.AbstractSequence;
import irvine.oeis.Sequence;

/**
 * A048805 Matrix inverse of A048804.
 * @author Sean A. Irvine
 */
public class A048805 extends AbstractSequence {

  /** Constructor with offset.
   * @param offset first index
   */
  public $(ASEQNO)(final int offset) {
    super(offset);
  }

  private final Sequence mSeq;
  private final DefaultMatrix<Q> mA = new DefaultMatrix<>(0, 0, Q.ZERO);
  protected Matrix<Q> mAInverse = null;
  protected int mN = 0;
  private int mM = 0;

  protected A048805(final Sequence seq) {
    super(0);
    mSeq = seq;
  }

  /** Construct the sequence. */
  public A048805() {
    this(new A048804());
  }

  protected void step() {
    mA.setRows(++mN);
    mA.setCols(mN);
    for (int k = 0; k < mN; ++k) {
      mA.set(mN - 1, k, new Q(mSeq.next()));
    }
    mAInverse = new MatrixField<>(mN, Rationals.SINGLETON).inverse(mA);
    mM = 0;
  }

  @Override
  public Z next() {
    if (++mM >= mN) {
      step();
    }
    return mAInverse.get(mN - 1, mM).toZ();
  }
}
#!queue	A048958	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048958 4-digit terms in the continued fraction for Pi.
 * @author Sean A. Irvine
 */
public class A048958 extends A001203 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(1);
  }

  private static final Z LOWER = Z.valueOf(1000);
  private static final Z UPPER = Z.valueOf(10000);

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return t;
      }
    }
  }
}
#!queue	A048959	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048959 Positions of 4-digit terms in the continued fraction for Pi (3 is at position 0).
 * @author Sean A. Irvine
 */
public class A048959 extends A001203 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(1);
  }

  private static final Z LOWER = Z.valueOf(1000);
  private static final Z UPPER = Z.valueOf(10000);
  private long mM = -1;

  @Override
  public Z next() {
    while (true) {
      ++mM;
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return Z.valueOf(mM);
      }
    }
  }
}
#!queue	A048960	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048960 5-digit terms in the continued fraction for Pi.
 * @author Sean A. Irvine
 */
public class A048960 extends A001203 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(1);
  }

  private static final Z LOWER = Z.valueOf(10000);
  private static final Z UPPER = Z.valueOf(100000);

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return t;
      }
    }
  }
}
#!queue	A048961	0	->	1	A001203	--------------------------------
package irvine.oeis.a048;

import irvine.math.z.Z;
import irvine.oeis.a001.A001203;

/**
 * A048961 Positions of 5-digit terms in the continued fraction for Pi (3 is position 0).
 * @author Sean A. Irvine
 */
public class A048961 extends A001203 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(1);
  }

  private static final Z LOWER = Z.valueOf(10000);
  private static final Z UPPER = Z.valueOf(100000);
  private long mM = -1;

  @Override
  public Z next() {
    while (true) {
      ++mM;
      final Z t = super.next();
      if (t.compareTo(LOWER) >= 0 && t.compareTo(UPPER) < 0) {
        return Z.valueOf(mM);
      }
    }
  }
}
#!queue	A050777	1	->	0	A050703	--------------------------------
package irvine.oeis.a050;

import irvine.factor.prime.Fast;
import irvine.math.z.Z;
import irvine.util.array.DynamicLongArray;

/**
 * A050777 First occurrence from iterated procedure 'composite k added to sum of its prime factors reaches a prime' yielding n skipped primes.
 * @author Sean A. Irvine
 */
public class A050777 extends A050703 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private final DynamicLongArray mFirsts = new DynamicLongArray();
  private final Fast mPrime = new Fast();
  private int mM = 0;
  private long mN = 1;

  @Override
  public Z next() {
    ++mM;
    while (mFirsts.get(mM) == 0) {
      final Z n = Z.valueOf(++mN);
      if (!n.isProbablePrime()) {
        Z t = f(n);
        while (!t.isProbablePrime()) {
          t = f(t);
        }
        Z p = n;
        int cnt = 0;
        while (p.compareTo(t) < 0) {
          p = mPrime.nextPrime(p);
          ++cnt;
        }
        if (mFirsts.get(cnt) == 0) {
          mFirsts.set(cnt, mN);
        }
      }
    }
    return Z.valueOf(mFirsts.get(mM));
  }
}

#!queue	A052434	1	->	2	A000720	--------------------------------
package irvine.oeis.a052;

import irvine.math.Mobius;
import irvine.math.cr.CR;
import irvine.math.z.Z;
import irvine.oeis.a000.A000720;

/**
 * A052434 Nearest integer to R(n) - pi(n), where R(x) is the Riemann prime counting function.
 * @author Sean A. Irvine
 */
public class A052434 extends A000720 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(2);
  }

  // This is slow ... and heuristic ...

  private static final long HEURISTIC_TERMS = 10000;

  private long mN = 1;
  {
    super.next();
  }

  protected CR riemann(final long n) {
    return new CR() {
      @Override
      protected Z approximate(final int precision) {
        final CR ncr = CR.valueOf(n);
        Z sum = Z.ZERO;
        long k = 0;
        while (true) {
          final CR kcr = CR.valueOf(++k);
          final Z t = ncr.pow(kcr.inverse()).li().divide(kcr).getApprox(precision);
          if (t.isZero() || k > HEURISTIC_TERMS) {
            break;
          }
          final int mobius = Mobius.mobius(k);
          if (mobius != 0) {
            sum = sum.signedAdd(mobius == 1, t);
          }
        }
        return sum;
      }
    };
  }

  @Override
  public Z next() {
    final CR r = riemann(++mN);
    //System.out.println(mN + " R=" + r);
    return r.subtract(CR.valueOf(super.next())).round();
  }
}
#!queue	A056483	0	->	1	A056477	--------------------------------
package irvine.oeis.a056;

import irvine.math.z.Z;
import irvine.oeis.Sequence;

/**
 * A056483 Number of primitive (aperiodic) palindromic structures using exactly four different symbols.
 * @author Georg Fischer
 */
public class A056483 extends A056477 {

  private final Sequence mSeq = new A056478();

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset(1);
    mSeq.next();
  }

  @Override
  public Z next() {
    return mSeq.next().subtract(super.next());
  }
}
#!queue	A056484	0	->	1	A056478	--------------------------------
package irvine.oeis.a056;

import irvine.math.z.Z;
import irvine.oeis.Sequence;

/**
 * A056484 Number of primitive (aperiodic) palindromic structures using exactly five different symbols.
 * @author Georg Fischer
 */
public class A056484 extends A056478 {

  private final Sequence mSeq = new A056479();

  /** Construct the sequence. */
  public $(ASEQNO)() {
    setOffset(1);
    mSeq.next();
  }

  @Override
  public Z next() {
    return mSeq.next().subtract(super.next());
  }
}
#!queue	A063884	0	->	1	MemorySequence	--------------------------------
package irvine.oeis.a063;

import java.util.HashSet;
import java.util.TreeSet;

import irvine.factor.factor.Jaguar;
import irvine.math.z.Z;
import irvine.oeis.MemorySequence;

/**
 * A063884 a(1) = 2, a(2) = 3 and a(k+1) is the least prime not already chosen that divides some a(i)*a(j)+1, where 1&lt;=i&lt;=j&lt;=k.
 * @author Sean A. Irvine
 */
public class A063884 extends MemorySequence {

  protected final TreeSet<Z> mA = new TreeSet<>();
  protected final HashSet<Z> mUsed = new HashSet<>();
  {
    mA.add(Z.TWO);
    mA.add(Z.THREE);
  }

  protected void update(final Z n) {
    for (final Z p : Jaguar.factor(n).toZArray()) {
      if (!mUsed.contains(p)) {
        mA.add(p);
      }
    }
  }

  @Override
  protected Z computeNext() {
    final Z t = mA.pollFirst();
    mUsed.add(t);
    update(t.square().add(1)); // needed because we did not yet add to the sequence
    for (final Z v : this) {
      update(v.multiply(t).add(1));
    }
    return t;
  }
}
#!queue	A063904	0	->	1	A063884	--------------------------------
package irvine.oeis.a063;

import irvine.math.z.Z;

/**
 * A063904 a(1) = 2, a(2) = 3 and a(k+1) is the least prime not already chosen that divides some a(i)*a(j)+1, where 1&lt;=i&lt;j&lt;=k.
 * @author Sean A. Irvine
 */
public class A063904 extends A063884 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(1);
  }

  @Override
  protected Z computeNext() {
    final Z t = mA.pollFirst();
    mUsed.add(t);
    for (final Z v : this) {
      update(v.multiply(t).add(1));
    }
    return t;
  }
}
#!queue	A166472	0	->	1	A166470	--------------------------------
package irvine.oeis.a166;
// Generated by gen_seq4.pl dersimpln at 2021-08-21 22:23

import irvine.math.z.Z;

/**
 * A166472 2^F(n+2)*3^F(n+1)/12, where F(n) is the n-th Fibonacci number (A000045(n)).
 * @author Georg Fischer
 */
public class A166472 extends A166470 {

  protected int mN;
  
  /** Construct the sequence. */
  public A166472() {
    super(1);
    mN = 0;
    super.next();
    super.next();
  }

  @Override
  public Z next() {
    ++mN;
    return super.next().divide(12);
  }
}
#!queue	A280509	0	->	1	A057889	--------------------------------
package irvine.oeis.a280;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a057.A057889;

/**
 * A280509 a(n) = A051064(A246200(n)); 3-adic valuation of A057889(3*n).
 * @author Georg Fischer
 */
public class A280509 extends A057889 {

  /** Construct the sequence. */
  public A280509() {
    super(1);
    super.next();
  }

  @Override
  public Z next() {
    super.next();
    super.next();
    return Z.valueOf(ZUtils.valuation(super.next(), Z.THREE));
  }
}
#!queue	A319394	1	->	0	Triangle	--------------------------------
package irvine.oeis.a319;

import irvine.math.MemoryFunction1;
import irvine.math.MemoryFunctionInt2;
import irvine.math.group.IntegerField;
import irvine.math.group.PolynomialRingField;
import irvine.math.polynomial.Polynomial;
import irvine.math.z.Z;
import irvine.oeis.triangle.Triangle;

/**
 * A319394 Number T(n,k) of partitions of n into exactly k positive Fibonacci numbers; triangle T(n,k), n&gt;=0, 0&lt;=k&lt;=n, read by rows.
 * @author Georg Fischer
 */
public class A319394 extends Triangle {

  private static final PolynomialRingField<Z> RING = new PolynomialRingField<>(IntegerField.SINGLETON);

  /** Construct the sequence. */
  public A319394() {
    super(0, 1, -1);
    hasRAM(true);
  }

  /* Maple:
    h:= proc(n) option remember; `if`(n<1, 0, `if`((t->
          issqr(t+4) or issqr(t-4))(5*n^2), n, h(n-1)))
        end:
    b:= proc(n, i) option remember; `if`(n=0 or i=1, x^n,
          b(n, h(i-1))+expand(x*b(n-i, h(min(n-i, i)))))
        end:
    T:= n-> (p-> seq(coeff(p, x, i), i=0..n))(b(n, h(n))):
    seq(T(n), n=0..20);
  */
  private final MemoryFunction1<Integer> mH = new MemoryFunction1<Integer>() {
    @Override
    protected Integer compute(final int n) {
      if (n < 1) {
        return 0;
      }
      final int t = 5 * n * n;
      return Z.valueOf(t + 4).isSquare() || Z.valueOf(t - 4).isSquare() ? n : get(n - 1);
    }
  };

  private final MemoryFunctionInt2<Polynomial<Z>> mB = new MemoryFunctionInt2<Polynomial<Z>>() {
    @Override
    protected Polynomial<Z> compute(final int n, final int i) {
      if (n == 0 || i == 1) {
        return RING.monomial(Z.ONE, n);
      }
      return RING.add(get(n, mH.get(i - 1)), RING.shift(get(n - i, mH.get(Math.min(i, n - i))), 1));
    }
  };

  @Override
  protected Z compute(final int n, final int k) {
    return mB.get(n, mH.get(n)).coeff(k);
  }
}
#!queue	A319395	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319395 Number of partitions of n into exactly two positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319395 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super();
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 2);
  }
}

#!queue	A319396	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319396 Number of partitions of n into exactly three positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319396 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super();
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 3);
  }
}

#!queue	A319397	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319397 Number of partitions of n into exactly four positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319397 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 4);
  }
}

#!queue	A319398	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319398 Number of partitions of n into exactly five positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319398 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 5);
  }
}

#!queue	A319399	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319399 Number of partitions of n into exactly six positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319399 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 6);
  }
}

#!queue	A319400	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319400 Number of partitions of n into exactly seven positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319400 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 7);
  }
}

#!queue	A319401	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319401 Number of partitions of n into exactly eight positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319401 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 8);
  }
}

#!queue	A319402	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319402 Number of partitions of n into exactly nine positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319402 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 9);
  }
}

#!queue	A319403	1	->	0	A319394	--------------------------------
package irvine.oeis.a319;
// Generated by gen_seq4.pl build/trionk

import irvine.math.z.Z;

/**
 * A319403 Number of partitions of n into exactly ten positive Fibonacci numbers.
 * @author Georg Fischer
 */
public class A319403 extends A319394 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super(0);
  }

  private int mN = -1;

  @Override
  public Z next() {
    ++mN;
    return super.compute(mN, 10);
  }
}


#!queue	A999999	1	1	1
