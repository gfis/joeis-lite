#!queue	A008509	0	->	1	A000217	--------------------------------
package irvine.oeis.a008;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;
import irvine.util.string.StringUtils;

/**
 * A008509 Positive integers k such that k-th triangular number is palindromic.
 * @author Sean A. Irvine
 */
public class A008509 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (StringUtils.isPalindrome(t.toString())) {
        return Z.valueOf(mN);
      }
    }
  }
}

#!queue	A008953	0	->	1	A000217	--------------------------------
package irvine.oeis.a008;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A008953 a(n) is the leading digit of the n-th triangular number, n*(n+1)/2.
 * @author Sean A. Irvine
 */
public class A008953 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return Z.valueOf(super.next().toString().charAt(0) - '0');
  }
}
#!queue	A008974	0	->	1	A000217	--------------------------------
package irvine.oeis.a008;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A008974 Triangular number t(n) raised to power t(n).
 * @author Sean A. Irvine
 */
public class A008974 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    final Z t = super.next();
    return t.pow(t.intValueExact());
  }
}

#!queue	A011756	0	->	1	A000217	--------------------------------
package irvine.oeis.a011;

import irvine.factor.prime.Fast;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A011756 a(n) = prime(n(n+1)/2).
 * @author Sean A. Irvine
 */
public class A011756 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  private final Fast mPrime = new Fast();
  private Z mP = Z.ONE;
  private Z mN = Z.ZERO;

  @Override
  public Z next() {
    final Z t = super.next();
    while (!mN.equals(t)) {
      mP = mPrime.nextPrime(mP);
      mN = mN.add(1);
    }
    return mP;
  }
}
#!queue	A018801	0	->	1	A000217	--------------------------------
package irvine.oeis.a018;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;
import irvine.util.array.DynamicArray;

/**
 * A018801 Index of smallest triangular number beginning with n.
 * @author Sean A. Irvine
 */
public class A018801 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private DynamicArray<String> mCache = new DynamicArray<>();
  private int mN = 0;

  private String triangular(final int n) {
    while (n >= mCache.length()) {
      mCache.set(mCache.length(), super.next().toString());
    }
    return mCache.get(n);
  }

  @Override
  public Z next() {
    final String target = String.valueOf(++mN);
    int b = -1;
    while (true) {
      if (triangular(++b).startsWith(target)) {
        return Z.valueOf(b);
      }
    }
  }
}
#!queue	A018855	0	->	1	A000217	--------------------------------
package irvine.oeis.a018;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;
import irvine.util.array.DynamicArray;

/**
 * A018855 Smallest triangular number that begins with n.
 * @author Sean A. Irvine
 */
public class A018855 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private DynamicArray<String> mCache = new DynamicArray<>();
  private int mN = 0;

  private String triangular(final int n) {
    while (n >= mCache.length()) {
      mCache.set(mCache.length(), super.next().toString());
    }
    return mCache.get(n);
  }

  @Override
  public Z next() {
    final String target = String.valueOf(++mN);
    int b = -1;
    while (true) {
      if (triangular(++b).startsWith(target)) {
        return new Z(triangular(b));
      }
    }
  }
}
#!queue	A024171	0	->	1	A000217	--------------------------------
package irvine.oeis.a024;

import irvine.math.z.Stirling;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A024171 Integer part of ((4th elementary symmetric function of 1,2,...,n)/(1+2+...+n)).
 * @author Sean A. Irvine
 */
public class A024171 extends A000217 {

  private long mN = 0;

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    if (++mN < 3) {
      super.next();
      return Z.ZERO;
    }
    return Stirling.firstKind(mN + 1, mN - 3).divide(super.next());
  }
}
#!queue	A024816	0	->	1	A000217	--------------------------------
package irvine.oeis.a024;

import irvine.math.z.Z;
import irvine.oeis.Sequence;
import irvine.oeis.a000.A000203;
import irvine.oeis.a000.A000217;

/**
 * A024816 Antisigma(n): Sum of the numbers less than n that do not divide n.
 * @author Sean A. Irvine
 */
public class A024816 extends A000217 {

  private final Sequence mSigma = new A000203();

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return super.next().subtract(mSigma.next());
  }
}
#!queue	A025559	0	->	1	A000217	--------------------------------
package irvine.oeis.a025;

import irvine.math.q.Q;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A025559 (1/1 - 1/3 + 1/6 + ... + d/C(n+1,2))*LCM{1,3,6,...,C(n+1,2)}, where d = (-1)^n.
 * @author Sean A. Irvine
 */
public class A025559 extends A000217 {

  private Z mL = Z.ONE;
  private Q mA = Q.ZERO;
  private boolean mSign = false;

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    mSign = !mSign;
    final Z b = super.next();
    mA = mA.signedAdd(mSign, new Q(Z.ONE, b));
    mL = mL.lcm(b);
    return mA.multiply(mL).toZ();
  }
}
#!queue	A033501	0	->	1	A000217	--------------------------------
package irvine.oeis.a033;

import java.util.TreeSet;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A033501 Almost-squares: m such that m/p(m) &gt;= k/p(k) for all k&lt;m, where p(m) is the least perimeter of a rectangle with integer side lengths and area m.
 * @author Sean A. Irvine
 */
public class A033501 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private final TreeSet<Z> mSet = new TreeSet<>();
  private Z mN = Z.ZERO;
  private long mT = 0;
  private Z mTriangle = super.next();

  @Override
  public Z next() {
    while (mSet.isEmpty() || mSet.first().compareTo(mN.square()) >= 0) {
      mN = mN.add(1);
      while (mTriangle.compareTo(mN) <= 0) {
        ++mT;
        mTriangle = super.next();
      }
      for (long h = 0; h <= mT; ++h) {
        mSet.add(mN.multiply(mN.add(h)));
      }
    }
    return mSet.pollFirst();
  }
}
#!queue	A034291	0	->	1	A000217	--------------------------------
package irvine.oeis.a034;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeSet;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;

/**
 * A034291 Triangular numbers that have some nontrivial permutation of digits which is also triangular.
 * @author Sean A. Irvine
 */
public class A034291 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private final TreeSet<Z> mA = new TreeSet<>();
  private Z mLim = Z.ONE;
  private Z mT = super.next();

  @Override
  public Z next() {
    while (mA.isEmpty()) {
      mLim = mLim.multiply(10);
      final HashMap<Z, List<Z>> map = new HashMap<>();
      while (mT.compareTo(mLim) < 0) {
        final Z sort = ZUtils.sortDigitsAscending(mT);
        final List<Z> v = map.get(sort);
        if (v == null) {
          final ArrayList<Z> t = new ArrayList<>();
          t.add(mT);
          map.put(sort, t);
        } else {
          v.add(mT);
        }
        mT = super.next();
      }
      for (final List<Z> lst : map.values()) {
        if (lst.size() > 1) {
          mA.addAll(lst);
        }
      }
    }
    return mA.pollFirst();
  }
}

#!queue	A036843	0	->	1	A000217	--------------------------------
package irvine.oeis.a036;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A036843 Floor(X/Y), where X = concatenation of the triangular numbers and Y = concatenation of natural numbers.
 * @author Sean A. Irvine
 */
public class A036843 extends A000217 {

  private final StringBuilder mT = new StringBuilder();
  private final StringBuilder mA = new StringBuilder();
  private long mN = 0;

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    mA.append(++mN);
    mT.append(super.next());
    return new Z(mT).divide(new Z(mA));
  }
}
#!queue	A050759	0	->	1	A000217	--------------------------------
package irvine.oeis.a050;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A050759 Numbers k such that the decimal expansion of (k^2 + k)/2 (the k-th triangular number) contains no pair of consecutive equal digits.
 * @author Sean A. Irvine
 */
public class A050759 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    outer:
    while (true) {
      Z t = super.next();
      Z r = Z.NEG_ONE;
      do {
        final Z[] qr = t.divideAndRemainder(Z.TEN);
        if (qr[1].equals(r)) {
          continue outer;
        }
        r = qr[1];
        t = qr[0];
      } while (!t.isZero());
      return Z.valueOf(mN);
    }
  }
}

#!queue	A050760	0	->	1	A000217	--------------------------------
package irvine.oeis.a050;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A050760 Triangular numbers whose decimal expansion contains no pair of consecutive equal digits.
 * @author Sean A. Irvine
 */
public class A050760 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    outer:
    while (true) {
      final Z m = super.next();
      Z t = m;
      Z r = Z.NEG_ONE;
      do {
        final Z[] qr = t.divideAndRemainder(Z.TEN);
        if (qr[1].equals(r)) {
          continue outer;
        }
        r = qr[1];
        t = qr[0];
      } while (!t.isZero());
      return m;
    }
  }
}

#!queue	A054686	0	->	1	A000217	--------------------------------
package irvine.oeis.a054;

import irvine.math.z.Z;
import irvine.oeis.Sequence;
import irvine.oeis.a000.A000217;
import irvine.oeis.a000.A000290;

/**
 * A054686 Multiset consisting of squares and triangular numbers.
 * @author Sean A. Irvine
 */
public class A054686 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  private final Sequence mA = new A000290();
  private Z mTriangle = super.next();
  private Z mSquare = mA.next();

  @Override
  public Z next() {
    final Z res;
    if (mTriangle.compareTo(mSquare) <= 0) {
      res = mTriangle;
      mTriangle = super.next();
    } else {
      res = mSquare;
      mSquare = mA.next();
    }
    return res;
  }
}
#!queue	A055469	0	->	1	A000217	--------------------------------
package irvine.oeis.a055;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A055469 Primes of the form k(k+1)/2+1 (i.e., central polygonal numbers, or one more than triangular numbers).
 * @author Sean A. Irvine
 */
public class A055469 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next().add(1);
      if (t.isProbablePrime()) {
        return t;
      }
    }
  }
}
#!queue	A061288	0	->	1	A000217	--------------------------------
package irvine.oeis.a061;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A061288 Integer part of square root of n-th triangular number.
 * @author Sean A. Irvine
 */
public class A061288 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return super.next().sqrt();
  }
}
#!queue	A061380	0	->	1	A000217	--------------------------------
package irvine.oeis.a061;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;

/**
 * A061380 Triangular numbers with product of digits also a triangular number.
 * @author Sean A. Irvine
 */
public class A061380 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      Z prod = Z.ONE;
      for (Z m = t; !m.isZero(); m = m.divide(10)) {
        prod = prod.multiply(m.mod(10));
      }
      if (ZUtils.isTriangular(prod)) {
        return t;
      }
    }
  }
}

#!queue	A061455	0	->	1	A000217	--------------------------------
package irvine.oeis.a061;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;

/**
 * A061455 Triangular numbers whose digit reversal is also a triangular number.
 * @author Sean A. Irvine
 */
public class A061455 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (ZUtils.isTriangular(ZUtils.reverse(t))) {
        return t;
      }
    }
  }
}

#!queue	A062099	0	->	1	A000217	--------------------------------
package irvine.oeis.a062;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;

/**
 * A062099 Triangular numbers whose sum of digits is a triangular number.
 * @author Sean A. Irvine
 */
public class A062099 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (ZUtils.isTriangular(Z.valueOf(ZUtils.digitSum(t)))) {
        return t;
      }
    }
  }
}
#!queue	A062100	0	->	1	A000217	--------------------------------
package irvine.oeis.a062;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;

/**
 * A062100 Triangular numbers with every digit a triangular number.
 * @author Sean A. Irvine
 */
public class A062100 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if ((ZUtils.syn(t) & 0b1110110100) == 0) {
        return t;
      }
    }
  }
}
#!queue	A062688	0	->	1	A000217	--------------------------------
package irvine.oeis.a062;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;
import irvine.util.array.LongDynamicArray;

/**
 * A062688 Smallest triangular number with digit sum n (or 0 if no such number exists).
 * @author Sean A. Irvine
 */
public class A062688 extends A000217 {

  private final LongDynamicArray<Z> mFirsts = new LongDynamicArray<>();
  private long mN = 0;

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    final long r = ++mN % 9;
    if (r == 2 || r == 4 || r == 5 || r == 7 || r == 8) {
      return Z.ZERO;
    }
    while (mFirsts.get(mN) == null) {
      final Z cube = super.next();
      final long d = ZUtils.digitSum(cube);
      if (mFirsts.get(d) == null) {
        mFirsts.set(d, cube);
      }
    }
    return mFirsts.get(mN);
  }
}
#!queue	A062691	0	->	1	A000217	--------------------------------
package irvine.oeis.a062;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;

/**
 * A062691 Triangular numbers that contain exactly 2 different digits.
 * @author Sean A. Irvine
 */
public class A062691 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      if (Integer.bitCount(ZUtils.syn(t)) == 2) {
        return t;
      }
    }
  }
}
#!queue	A063440	0	->	1	A000217	--------------------------------
package irvine.oeis.a063;
// Generated by gen_seq4.pl sigman0/sigma0s at 2023-02-28 16:47

import irvine.factor.factor.Jaguar;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A063440 Number of divisors of n-th triangular number.
 * @author Georg Fischer
 */
public class A063440 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return Jaguar.factor(super.next()).sigma0();
  }
}
#!queue	A069901	0	->	1	A000217	--------------------------------
package irvine.oeis.a069;
// Generated by gen_seq4.pl knest/jaguar at 2023-03-01 20:54

import irvine.factor.factor.Jaguar;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A069901 Smallest prime factor of n-th triangular number.
 * @author Georg Fischer
 */
public class A069901 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return Jaguar.factor(super.next()).leastPrimeFactor();
  }
}
#!queue	A069904	0	->	1	A000217	--------------------------------
package irvine.oeis.a069;
// Generated by gen_seq4.pl knest/jaguarz at 2023-03-01 20:54

import irvine.factor.factor.Jaguar;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A069904 Number of prime factors of n-th triangular number (with multiplicity).
 * @author Georg Fischer
 */
public class A069904 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return Z.valueOf(Jaguar.factor(super.next()).bigOmega());
  }
}
#!queue	A086700	0	->	1	A000217	--------------------------------
package irvine.oeis.a086;
// manually knest/eulphi at 2023-03-01 16:41

import irvine.math.z.Euler;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A086700 Euler phi function applied to the triangular numbers.
 * @author Georg Fischer
 */
public class A086700 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return Euler.phi(super.next());
  }
}
#!queue	A139131	0	->	1	A000217	--------------------------------
package irvine.oeis.a139;
// Generated by gen_seq4.pl knest/jaguar at 2023-03-01 20:54

import irvine.factor.factor.Jaguar;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A139131 Squarefree kernel of n*(n+1)/2.
 * @author Georg Fischer
 */
public class A139131 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return Jaguar.factor(super.next()).squareFreeKernel();
  }
}
#!queue	A166474	0	->	1	A000217	--------------------------------
package irvine.oeis.a166;

import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A166474 a(1)=1; a(2)=2; for n&gt;2, a(n)=a(n-1)+A000217(n-1)*a(n-2).
 * @author Sean A. Irvine
 */
public class A166474 extends A000217 {

  private Z mA = null;
  private Z mB = null;

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    final Z t = super.next();
    if (mA == null) {
      mA = Z.ONE;
      return Z.ONE;
    } else if (mB == null) {
      mB = Z.TWO;
    } else {
      final Z r = mB.add(t.multiply(mA));
      mA = mB;
      mB = r;
    }
    return mB;
  }
}
#!queue	A307812	0	->	1	A000217	--------------------------------
package irvine.oeis.a307;

import irvine.math.z.Z;
import irvine.math.z.ZUtils;
import irvine.oeis.a000.A000217;

/**
 * A307812 Triangular numbers t(n) with a zeroless decimal representation such that (product of decimal digits of t(n)) / n is an integer.
 * @author Sean A. Irvine
 */
public class A307812 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
  }

  @Override
  public Z next() {
    while (true) {
      final Z t = super.next();
      final Z prod = ZUtils.digitProduct(t);
      if (!prod.isZero() && prod.mod(mN) == 0) {
        return t;
      }
    }
  }
}
#!queue	A361670	0	->	1	A000217	--------------------------------
package irvine.oeis.a361;
// manually knest at 2023-06-02 20:44

import irvine.factor.factor.Jaguar;
import irvine.math.z.Z;
import irvine.oeis.a000.A000217;

/**
 * A361670 Squarefree part of the n-th triangular number.
 * @author Georg Fischer
 */
public class A361670 extends A000217 {

  /** Construct the sequence. */
  public $(ASEQNO)() {
    super($(OFFSET));
    super.next();
  }

  @Override
  public Z next() {
    return Jaguar.factor(super.next()).core();
  }
}
#!queue	A999999	0	0	0	0
