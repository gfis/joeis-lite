#!queue	A054586	0	->	0	MultiplicativeSequence	--------------------------------
package irvine.oeis.a054;
// Generated by gen_seq4.pl mult3/mult at 2022-07-19 22:09

import irvine.math.z.Z;
import irvine.oeis.MultiplicativeSequence;

/**
 * A054586 Sum_{d|2n+1} phi(d)*mu(d).
 * @author Georg Fischer
 */
public class A054586 extends MultiplicativeSequence {

  /** Construct the sequence. */
  public A054586() {
    super(1, 2, (p, e) -> Z.TWO.subtract(p));
    setOffset(0);
  }
}
#!queue	A070063	0	->	-22	DecimalExpansionSequence	--------------------------------
package irvine.oeis.a070;

import irvine.math.r.PhysicsConstants;
import irvine.math.z.Z;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A070063 Decimal expansion of the Boltzmann constant k in the 2019 SI system in units J/K.
 * @author Sean A. Irvine
 * @author Georg Fischer
 */
public class A070063 extends DecimalExpansionSequence {

  /** Construct the sequence. */
  public A070063() {
    super(1, PhysicsConstants.BOLTZMANN_CR.multiply(Z.TEN.pow(23)));
    setOffset(-2);
  }
}
#!queue	A076157	0	->	1	FoldedContinuedFraction	--------------------------------
package irvine.oeis.a076;

import irvine.math.factorial.MemoryFactorial;
import irvine.math.z.Z;
import irvine.oeis.cons.FoldedContinuedFraction;

/**
 * A076157 Continued fraction expansion for c=sum_{k&gt;=0} 1/2^(k!).
 * a(3*2^n) = 2^((n+1)*((n+2)!)) - 1
 * @author Georg Fischer
 */
public class A076157 extends FoldedContinuedFraction {

  /** Construct the sequence */
  public A076157() {
    super(0, k -> Z.TWO.pow(MemoryFactorial.SINGLETON.factorial(k).multiply(k - 1)), new long[] {1, 3, 1, 3, 4});
    setOffset(1);
    setStart(2);
  }
}
#!queue	A080108	0	->	1	ExponentialGeneratingFunction	--------------------------------
package irvine.oeis.a080;
// generated by patch_offset.pl at 2022-08-27 22:54

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A080108 a(n) = Sum_{k=1..n} k^(n-k)*binomial(n-1,k-1).
 * E.g.f.: exp(x*(1+exp(x)))
 * @author Georg Fischer
 */
public class A080108 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A080108() {
    super(0);
    setOffset(1);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.exp(RING.multiply(RING.x(), RING.add(RING.one(), RING.exp(RING.x(), n)), n), n);
  }
}
#!queue	A081799	0	->	-11	DecimalExpansionSequence	--------------------------------
package irvine.oeis.a081;

import irvine.math.cr.CR;
import irvine.math.r.PhysicsConstants;
import irvine.math.z.Z;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A081799 Decimal expansion of the electric permittivity of vacuum in SI units as defined before 20 May 2019.
 * @author Sean A. Irvine
 * @author Georg Fischer
 */
public class A081799 extends DecimalExpansionSequence {

  private static final CR LIGHT_SPEED_SQUARED = CR.valueOf(Z.valueOf(PhysicsConstants.SPEED_OF_LIGHT).square());

  /** Construct the sequence. */
  public A081799() {
    super(-18, CR.TAU.multiply(CR.TWO).multiply(LIGHT_SPEED_SQUARED).inverse());
    setOffset(-11);
  }
}
#!queue	A081823	0	->	-18	DecimalExpansionSequence	--------------------------------
package irvine.oeis.a081;

import irvine.math.r.PhysicsConstants;
import irvine.math.z.Z;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A081823 Decimal expansion of the elementary charge e in coulombs (C).
 * @author Sean A. Irvine
 * @author Georg Fischer
 */
public class A081823 extends DecimalExpansionSequence {

  /** Construct the sequence. */
  public A081823() {
    super(1, PhysicsConstants.ELEMENTARY_CHARGE_CR.multiply(Z.TEN.pow(18)));
    setOffset(-18);
  }
}
#!queue	A081824	0	->	-4	DecimalExpansionSequence	--------------------------------
package irvine.oeis.a081;

import irvine.math.cr.CR;
import irvine.math.r.PhysicsConstants;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A081824 Decimal expansion of conductance quantum in units of S.
 * @author Sean A. Irvine
 * @author Georg Fischer
 */
public class A081824 extends DecimalExpansionSequence {

  /** Conductance quantum G_0 in S. */
  private static final CR CONDUCTANCE_QUANTUM = PhysicsConstants.ELEMENTARY_CHARGE_CR.multiply(PhysicsConstants.ELEMENTARY_CHARGE_CR).multiply(CR.TWO).divide(PhysicsConstants.PLANCK_CONSTANT_CR).multiply(10000);

  /** Construct the sequence. */
  public A081824() {
    super(1, CONDUCTANCE_QUANTUM);
    setOffset(-4);
  }
}
#!queue	A083187	0	->	1	CharacteristicFunction	--------------------------------
package irvine.oeis.a083;
// Generated by gen_seq4.pl charfun at 2020-08-28 13:59

import irvine.oeis.CharacteristicFunction;
import irvine.oeis.a002.A002379;

/**
 * A083187 a(n) = floor(log_3/2(n+1)) - floor(log_3/2(n)).
 * @author Georg Fischer
 */
public class A083187 extends CharacteristicFunction {

  /** Construct the sequence. */
  public A083187() {
    super(0, new A002379());
    setOffset(1);
    next();
  }
}
#!queue	A086677	0	->	2	ExponentialGeneratingFunction	--------------------------------
package irvine.oeis.a086;
// generated by patch_offset.pl at 2022-08-27 22:54

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A086677 Number of Steiner topologies on n points.
 * E.g.f.: 4*(x-3)/(x+1)^4 - (-13+22*x+3*x^2)/((-x^2-4*x+1)^(1/2)*(x+1)^4)
 * @author Georg Fischer
 */
public class A086677 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A086677() {
    super(0);
    setOffset(2);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.subtract(RING.series(RING.multiply(RING.monomial(Q.FOUR, 0), RING.subtract(RING.x(), RING.monomial(Q.THREE, 0)), n), RING.pow(RING.add(RING.x(), RING.one()), 4, n), n), RING.series(RING.add(RING.add(RING.negate(RING.monomial(new Q(13), 0)), RING.monomial(new Q(22), 1)), RING.monomial(Q.THREE, 2)), RING.multiply(RING.exp(RING.multiply(RING.log(RING.add(RING.subtract(RING.negate(RING.pow(RING.x(), 2, n)), RING.monomial(Q.FOUR, 1)), RING.one()), n), RING.series(RING.one(), RING.monomial(Q.TWO, 0), n), n), n), RING.pow(RING.add(RING.x(), RING.one()), 4, n), n), n));
  }
}
#!queue	A090439	0	->	1	HypergeometricSequence	--------------------------------
package irvine.oeis.a090;
// manually hygeom at 2022-08-04 18:01

import irvine.math.factorial.MemoryFactorial;
import irvine.math.z.Z;
import irvine.oeis.HypergeometricSequence;

/**
 * A090439 Alternating row sums of array A090438 ((4,2)-Stirling2).
 * @author Georg Fischer
 */
public class A090439 extends HypergeometricSequence {

  private int mN = -1;

  /** Construct the sequence. */
  public A090439() {
    super(0, 1, 1, "[[0,-2],[3],[1]]"); // "assuming offset 0"
    setOffset(1);
  }

  @Override
  public Z next() {
    ++mN;
    return super.nextQ().multiply(MemoryFactorial.SINGLETON.factorial(2 * mN + 2)).divide(2).num();
  }
}
#!queue	A099395	0	->	1	CharacteristicFunction	--------------------------------
package irvine.oeis.a099;
// Generated by gen_seq4.pl charfun at 2020-08-28 13:59
// DO NOT EDIT here!

import irvine.oeis.CharacteristicFunction;
import irvine.oeis.a007.A007283;

/**
 * A099395 One if odd part of n is 3, zero otherwise.
 * @author Georg Fischer
 */
public class A099395 extends CharacteristicFunction {

  /** Construct the sequence. */
  public A099395() {
    super(0, new A007283());
    setOffset(1);
    next();
  }
}
#!queue	A159039	0	->	1	ExponentialGeneratingFunction	--------------------------------
package irvine.oeis.a159;
// generated by patch_offset.pl at 2022-08-27 22:54

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A159039 E.g.f. sec(x)/(1-x) = 1/( cos(x) * (1-x) ).
 * E.g.f.: 1/( cos(x) * (1-x) ).
 * @author Georg Fischer
 */
public class A159039 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A159039() {
    super(0);
    setOffset(1);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.series(RING.one(), RING.multiply(RING.cos(RING.x(), n), RING.oneMinusXToTheN(1), n), n);
  }
}
#!queue	A226435	0	->	1	ExponentialGeneratingFunction	--------------------------------
package irvine.oeis.a226;
// generated by patch_offset.pl at 2022-08-27 22:54

import irvine.math.polynomial.Polynomial;
import irvine.math.q.Q;
import irvine.oeis.ExponentialGeneratingFunction;

/**
 * A226435 Number of permutations of 1..n with fewer than 2 interior elements having values lying between the values of their neighbors.
 * lying between the values of their neighbors.
 * E.g.f.: (sec(x) + tan(x)) - (sec(x) + tan(x))^2 + (sec(x) + tan(x))^3
 * @author Georg Fischer
 */
public class A226435 extends ExponentialGeneratingFunction {

  /** Construct the sequence. */
  public A226435() {
    super(0);
    setOffset(1);
  }

  @Override
  public Polynomial<Q> compute(final int n) {
    return RING.add(RING.subtract(RING.add(RING.sec(RING.x(), n), RING.tan(RING.x(), n)), RING.pow(RING.add(RING.sec(RING.x(), n), RING.tan(RING.x(), n)), 2, n)), RING.pow(RING.add(RING.sec(RING.x(), n), RING.tan(RING.x(), n)), 3, n));
  }
}
#!queue	A248507	0	->	-14	DecimalExpansionSequence	--------------------------------
package irvine.oeis.a248;

import irvine.math.cr.CR;
import irvine.math.r.PhysicsConstants;
import irvine.math.z.Z;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A248507 Decimal expansion of a single magnetic flux quantum Phi_0 in SI units.
 * @author Sean A. Irvine
 * @author Georg Fischer
 */
public class A248507 extends DecimalExpansionSequence {

  /** Construct the sequence. */
  public A248507() {
    super(1, PhysicsConstants.PLANCK_CONSTANT_CR.divide(PhysicsConstants.ELEMENTARY_CHARGE_CR).divide(CR.TWO).multiply(Z.TEN.pow(15)));
    setOffset(-14);
  }
}
#!queue	A254181	0	->	-33	DecimalExpansionSequence	--------------------------------
package irvine.oeis.a254;

import irvine.math.r.PhysicsConstants;
import irvine.math.z.Z;
import irvine.oeis.cons.DecimalExpansionSequence;

/**
 * A254181 Decimal expansion of reduced Planck constant (in joule seconds).
 * @author Sean A. Irvine
 * @author Georg Fischer
 */
public class A254181 extends DecimalExpansionSequence {

  /** Construct the sequence. */
  public A254181() {
    super(1, PhysicsConstants.HBAR_CR.multiply(Z.TEN.pow(33)));
    setOffset(-33);
  }
}
#!queue	A255738	0	->	1	CharacteristicFunction	--------------------------------
package irvine.oeis.a255;
// Generated by gen_seq4.pl charfun at 2020-08-28 13:59

import irvine.oeis.CharacteristicFunction;
import irvine.oeis.a094.A094373;

/**
 * A255738 a(1) = 1; for n &gt; 1, a(n) = 1*0^{A000120(n-1) - 1}.
 * @author Georg Fischer
 */
public class A255738 extends CharacteristicFunction {

  /** Construct the sequence. */
  public A255738() {
    super(0, new A094373());
    setOffset(1);
    next();
  }
}
#!queue	A256434	0	->	0	CharacteristicFunction	--------------------------------
package irvine.oeis.a256;
// manually, charfun at 2021-06-22 17:32

import irvine.math.z.Z;
import irvine.oeis.CharacteristicFunction;
import irvine.oeis.a006.A006564;

/**
 * A256434 Characteristic function of icosahedral numbers.
 * @author Georg Fischer
 */
public class A256434 extends CharacteristicFunction {

  protected int mN;
  
  /** Construct the sequence. */
  public A256434() {
    super(1, new A006564());
    setOffset(0);
    mN = -1;
  }

  @Override
  public Z next() {
    ++mN;
    return mN < 1 ? Z.ONE : super.next();
  }
}
#!queue	A293145	0	->	0	HypergeometricSequence	--------------------------------
package irvine.oeis.a293;
// manually hygeom at 2022-08-06 15:16

import irvine.math.factorial.MemoryFactorial;
import irvine.math.z.Z;
import irvine.oeis.HypergeometricSequence;

/**
 * A293145 a(n) = n! * [x^n] exp(n*x/(1 - x)).
 * <code>Join[{1}, Table[n n! Hypergeometric1F1[1 - n, 2, -n], {n, 1, 18}]]</code>
 * @author Georg Fischer
 */
public class A293145 extends HypergeometricSequence {

  private int mN = -1;

  /** Construct the sequence. */
  public A293145() {
    super(1, 1, 1, "[[1,-1],[2],[0,-1]]");
    setOffset(0);
  }

  @Override
  public Z next() {
    ++mN;
    if (mN == 0) {
      return Z.ONE;
    } else {
      return super.nextQ().multiply(mN).multiply(MemoryFactorial.SINGLETON.factorial(mN)).num();
    }
  }
}
#!queue	A320534	0	->	0	HypergeometricSequence	--------------------------------
package irvine.oeis.a320;
// manually hygeom at 2022-08-06 18:18

import irvine.math.z.Z;
import irvine.oeis.HypergeometricSequence;

/**
 * A320534 a(n) = ((1 + sqrt(4*n^2 + 1))^n + (1 - sqrt(4*n^2 + 1))^n)/2^n.
 * @author Georg Fischer
 */
public class A320534 extends HypergeometricSequence {

  private int mN = -1;

  /** Construct the sequence. */
  public A320534() {
    super(1, 2, 1, "[[1/2,-1/2],[0,-1/2],[1/2],[1, 0, 4]]");
    setOffset(0);
  }
  
  @Override
  public Z next() {
    ++mN;
    if (mN == 0) {
      return Z.TWO;
    } else {
      return super.nextQ().divide(Z.ONE.shiftLeft(mN - 1)).num();
    }
  }
}
#!queue	A999999	0	0	0	0
