# known_predicates.man - maps A-numbers to lambda expressions for FilterSequence
# 2025-05-06: Georg Fischer

A000037	v -> !Predicates.SQUARE.is(v)	Numbers that are not squares (or, the nonsquares).
A000204	v -> Predicates.LUCAS.is(v)	beginning with 1
A001043	v -> v.equals(Z.FIVE) || !v.testBit(0) && Predicates.PRIME.is(v.divide2().subtract(1)) && Predicates.PRIME.is(v.divide2().add(1))	Sum of 2 successive primes
A001359	v -> Predicates.PRIME.is(v.add(2))	Lesser of twin primes.
A001567	v -> Z.TWO.modPow(v.subtract(1), v).equals(Z.ONE) && !Predicates.PRIME.is(v)	Fermat pseudoprimes to base 2, also called Sarrus numbers or Poulet numbers.
A002145	v -> v.mod(4) == 3 && Predicates.PRIME.is(v)	Primes of the form 4*k + 3.
A002328	v -> Predicates.PRIME.is(v.square().subtract(v).subtract(1))	Numbers n such that n^2 - n - 1 is prime.
A002385	v -> Predicates.PALINDROME.is(10, v) && Predicates.PRIME.is(v)	Palindromic primes: prime numbers whose decimal expansion is a palindrome.
A002778	v -> Predicates.PALINDROME.is(v.square())	Numbers whose square is a palindrome.
A002808	v -> !Predicates.PRIME.is(v) && !v.equals(Z.ONE)
A004767	v -> v.mod(4) == 3	a(n) = 4*n + 3.
A005384	v -> Predicates.PRIME.is(v.multiply2().add(1))	Sophie Germain primes p: 2p+1 is also prime.
A005408	v -> v.testBit(0)	the odd numbers
A005563	v -> Predicates.SQUARE.is(v.add(1))	a(n) = n*(n+2) = (n+1)^2 - 1.
A005843	v -> !v.testBit(0)	the even numbers
A006881	v -> Predicates.SQUARE_FREE.is(v) && Predicates.SEMIPRIME.is(v)	Squarefree semiprimes: Numbers that are the product of two distinct primes.
A007304	v -> Functions.BIG_OMEGA.l(v) == 3 && Functions.OMEGA.l(v) == 3	Sphenic numbers: products of 3 distinct primes.
A007691	v -> Functions.SIGMA.z(v).mod(v).isZero()	Multiply-perfect numbers: n divides sigma(n).
A008585	v -> v.mod(3) == 0	a(n) = 3*n.
A013929	v -> !Predicates.SQUARE_FREE.is(v)	Numbers that are not squarefree. Numbers that are divisible by a square greater than 1. The complement of P005117.
A014574	v -> Predicates.PRIME.is(v.add(1)) && Predicates.PRIME.is(v.subtract(1))	Average of twin prime pairs.A11780
A018252	v -> Predicates.PRIME.is(v) || v.equals(Z.ONE)	The nonprime numbers: 1 together with the composite numbers, A002808.
A023200	v -> Predicates.PRIME.is(v.add(4))	Primes p such that p + 4 is also prime.
A024619	v -> !Predicates.PRIME_POWER.is(v)	Numbers that are not powers of primes p^k (k >= 0); complement of P000961.
A024675	v -> v.subtract(Functions.PREV_PRIME.z(v)).equals(Functions.NEXT_PRIME.z(v).subtract(v))	Average of two consecutive odd primes.
A026424	v -> (Functions.BIG_OMEGA.l(v) & 1) == 1	Number of prime divisors (counted with multiplicity) is odd; Liouville function lambda(n) (A008836) is negative.
A028260	v -> (Functions.BIG_OMEGA.l(v) & 1) == 0	Numbers with an even number of prime divisors (counted with multiplicity); numbers k such that the Liouville function lambda(k) (A008836) is positive.
A033950	v -> v.mod(Functions.TAU.z(v)).isZero()	Refactorable numbers: number of divisors of k divides k. Also known as tau numbers.
A040976	v -> Predicates.PRIME.is(v.add(2))	a(n) = prime(n) - 2.
A046034	v -> v.toString().matches("[2357]+")	Numbers whose digits are primes.
A046386	v -> Functions.BIG_OMEGA.l(v) == 3 && Functions.OMEGA.l(v) == 3	Products of exactly four distinct primes.
A134808	v -> Predicates.CYCLOPS.is(v)	Cyclops numbers.
A191218	v -> v.testBit(0) && Functions.SIGMA.z(v).mod(4) == 2	Odd numbers n such that sigma(n) is congruent to 2 modulo 4.
A246655	v -> !v.equals(Z.ONE) && Predicates.PRIME_POWER.is(v)	Prime powers: numbers of the form p^k where p is a prime and k >= 1.
A286708	v -> Predicates.POWERFUL.is(v) && !Predicates.PRIME_POWER.is(v)	Powerful numbers (P001694) that are not prime powers (P000961).

# r-almost primes
A014612	v -> Functions.BIG_OMEGA.i(v) == 3
A014613	v -> Functions.BIG_OMEGA.i(v) == 4
A014614	v -> Functions.BIG_OMEGA.i(v) == 5
A046306	v -> Functions.BIG_OMEGA.i(v) == 6
A046308	v -> Functions.BIG_OMEGA.i(v) == 7
A046310	v -> Functions.BIG_OMEGA.i(v) == 8
A046312	v -> Functions.BIG_OMEGA.i(v) == 9
A046314	v -> Functions.BIG_OMEGA.i(v) == 10
A069272	v -> Functions.BIG_OMEGA.i(v) == 11
A069273	v -> Functions.BIG_OMEGA.i(v) == 12
A069274	v -> Functions.BIG_OMEGA.i(v) == 13
A069275	v -> Functions.BIG_OMEGA.i(v) == 14
A069276	v -> Functions.BIG_OMEGA.i(v) == 15
A069277	v -> Functions.BIG_OMEGA.i(v) == 16
A069278	v -> Functions.BIG_OMEGA.i(v) == 17
A069279	v -> Functions.BIG_OMEGA.i(v) == 18
A069280	v -> Functions.BIG_OMEGA.i(v) == 19
A069281	v -> Functions.BIG_OMEGA.i(v) == 20

A001262	v -> Predicates.STRONG_PSEUDOPRIME.is(2, v)
A020229	v -> Predicates.STRONG_PSEUDOPRIME.is(3, v)
A020230	v -> Predicates.STRONG_PSEUDOPRIME.is(4, v)
A020231	v -> Predicates.STRONG_PSEUDOPRIME.is(5, v)
A020232	v -> Predicates.STRONG_PSEUDOPRIME.is(6, v)
A020233	v -> Predicates.STRONG_PSEUDOPRIME.is(7, v)
A020234	v -> Predicates.STRONG_PSEUDOPRIME.is(8, v)
A020235	v -> Predicates.STRONG_PSEUDOPRIME.is(9, v)
A020236	v -> Predicates.STRONG_PSEUDOPRIME.is(10, v)
A020237	v -> Predicates.STRONG_PSEUDOPRIME.is(11, v)
A020238	v -> Predicates.STRONG_PSEUDOPRIME.is(12, v)
A020239	v -> Predicates.STRONG_PSEUDOPRIME.is(13, v)
A020240	v -> Predicates.STRONG_PSEUDOPRIME.is(14, v)
A020241	v -> Predicates.STRONG_PSEUDOPRIME.is(15, v)
A020242	v -> Predicates.STRONG_PSEUDOPRIME.is(16, v)
A020243	v -> Predicates.STRONG_PSEUDOPRIME.is(17, v)
A020244	v -> Predicates.STRONG_PSEUDOPRIME.is(18, v)
A020245	v -> Predicates.STRONG_PSEUDOPRIME.is(19, v)
A020246	v -> Predicates.STRONG_PSEUDOPRIME.is(20, v)
A020247	v -> Predicates.STRONG_PSEUDOPRIME.is(21, v)
A020248	v -> Predicates.STRONG_PSEUDOPRIME.is(22, v)
A020249	v -> Predicates.STRONG_PSEUDOPRIME.is(23, v)
A020250	v -> Predicates.STRONG_PSEUDOPRIME.is(24, v)
A020251	v -> Predicates.STRONG_PSEUDOPRIME.is(25, v)
A020252	v -> Predicates.STRONG_PSEUDOPRIME.is(26, v)
A020253	v -> Predicates.STRONG_PSEUDOPRIME.is(27, v)
A020254	v -> Predicates.STRONG_PSEUDOPRIME.is(28, v)
A020255	v -> Predicates.STRONG_PSEUDOPRIME.is(29, v)
A020256	v -> Predicates.STRONG_PSEUDOPRIME.is(30, v)
A020257	v -> Predicates.STRONG_PSEUDOPRIME.is(31, v)
A020258	v -> Predicates.STRONG_PSEUDOPRIME.is(32, v)
A020259	v -> Predicates.STRONG_PSEUDOPRIME.is(33, v)
A020260	v -> Predicates.STRONG_PSEUDOPRIME.is(34, v)
A020261	v -> Predicates.STRONG_PSEUDOPRIME.is(35, v)
A020262	v -> Predicates.STRONG_PSEUDOPRIME.is(36, v)
A020263	v -> Predicates.STRONG_PSEUDOPRIME.is(37, v)
A020264	v -> Predicates.STRONG_PSEUDOPRIME.is(38, v)
A020265	v -> Predicates.STRONG_PSEUDOPRIME.is(39, v)
A020266	v -> Predicates.STRONG_PSEUDOPRIME.is(40, v)
A020267	v -> Predicates.STRONG_PSEUDOPRIME.is(41, v)
A020268	v -> Predicates.STRONG_PSEUDOPRIME.is(42, v)
A020269	v -> Predicates.STRONG_PSEUDOPRIME.is(43, v)
A020270	v -> Predicates.STRONG_PSEUDOPRIME.is(44, v)
A020271	v -> Predicates.STRONG_PSEUDOPRIME.is(45, v)
A020272	v -> Predicates.STRONG_PSEUDOPRIME.is(46, v)
A020273	v -> Predicates.STRONG_PSEUDOPRIME.is(47, v)
A020274	v -> Predicates.STRONG_PSEUDOPRIME.is(48, v)
A020275	v -> Predicates.STRONG_PSEUDOPRIME.is(49, v)
A020276	v -> Predicates.STRONG_PSEUDOPRIME.is(50, v)
A020277	v -> Predicates.STRONG_PSEUDOPRIME.is(51, v)
A020278	v -> Predicates.STRONG_PSEUDOPRIME.is(52, v)
A020279	v -> Predicates.STRONG_PSEUDOPRIME.is(53, v)
A020280	v -> Predicates.STRONG_PSEUDOPRIME.is(54, v)
A020281	v -> Predicates.STRONG_PSEUDOPRIME.is(55, v)
A020282	v -> Predicates.STRONG_PSEUDOPRIME.is(56, v)
A020283	v -> Predicates.STRONG_PSEUDOPRIME.is(57, v)
A020284	v -> Predicates.STRONG_PSEUDOPRIME.is(58, v)
A020285	v -> Predicates.STRONG_PSEUDOPRIME.is(59, v)
A020286	v -> Predicates.STRONG_PSEUDOPRIME.is(60, v)
A020287	v -> Predicates.STRONG_PSEUDOPRIME.is(61, v)
A020288	v -> Predicates.STRONG_PSEUDOPRIME.is(62, v)
A020289	v -> Predicates.STRONG_PSEUDOPRIME.is(63, v)
A020290	v -> Predicates.STRONG_PSEUDOPRIME.is(64, v)
A020291	v -> Predicates.STRONG_PSEUDOPRIME.is(65, v)
A020292	v -> Predicates.STRONG_PSEUDOPRIME.is(66, v)
A020293	v -> Predicates.STRONG_PSEUDOPRIME.is(67, v)
A020294	v -> Predicates.STRONG_PSEUDOPRIME.is(68, v)
A020295	v -> Predicates.STRONG_PSEUDOPRIME.is(69, v)
A020296	v -> Predicates.STRONG_PSEUDOPRIME.is(70, v)
A020297	v -> Predicates.STRONG_PSEUDOPRIME.is(71, v)
A020298	v -> Predicates.STRONG_PSEUDOPRIME.is(72, v)
A020299	v -> Predicates.STRONG_PSEUDOPRIME.is(73, v)
A020300	v -> Predicates.STRONG_PSEUDOPRIME.is(74, v)
A020301	v -> Predicates.STRONG_PSEUDOPRIME.is(75, v)
A020302	v -> Predicates.STRONG_PSEUDOPRIME.is(76, v)
A020303	v -> Predicates.STRONG_PSEUDOPRIME.is(77, v)
A020304	v -> Predicates.STRONG_PSEUDOPRIME.is(78, v)
A020305	v -> Predicates.STRONG_PSEUDOPRIME.is(79, v)
A020306	v -> Predicates.STRONG_PSEUDOPRIME.is(80, v)
A020307	v -> Predicates.STRONG_PSEUDOPRIME.is(81, v)
A020308	v -> Predicates.STRONG_PSEUDOPRIME.is(82, v)
A020309	v -> Predicates.STRONG_PSEUDOPRIME.is(83, v)
A020310	v -> Predicates.STRONG_PSEUDOPRIME.is(84, v)
A020311	v -> Predicates.STRONG_PSEUDOPRIME.is(85, v)
A020312	v -> Predicates.STRONG_PSEUDOPRIME.is(86, v)
A020313	v -> Predicates.STRONG_PSEUDOPRIME.is(87, v)
A020314	v -> Predicates.STRONG_PSEUDOPRIME.is(88, v)
A020315	v -> Predicates.STRONG_PSEUDOPRIME.is(89, v)
A020316	v -> Predicates.STRONG_PSEUDOPRIME.is(90, v)
A020317	v -> Predicates.STRONG_PSEUDOPRIME.is(91, v)
A020318	v -> Predicates.STRONG_PSEUDOPRIME.is(92, v)
A020319	v -> Predicates.STRONG_PSEUDOPRIME.is(93, v)
A020320	v -> Predicates.STRONG_PSEUDOPRIME.is(94, v)
A020321	v -> Predicates.STRONG_PSEUDOPRIME.is(95, v)
A020322	v -> Predicates.STRONG_PSEUDOPRIME.is(96, v)
A020323	v -> Predicates.STRONG_PSEUDOPRIME.is(97, v)
A020324	v -> Predicates.STRONG_PSEUDOPRIME.is(98, v)
A020325	v -> Predicates.STRONG_PSEUDOPRIME.is(99, v)
A020326	v -> Predicates.STRONG_PSEUDOPRIME.is(100, v)

# consisting of identical digits in base b
A000225	v -> Predicates.REPDIGIT.is(2, v)
A048328	v -> Predicates.REPDIGIT.is(3, v)
A048329	v -> Predicates.REPDIGIT.is(4, v)
A048330	v -> Predicates.REPDIGIT.is(5, v)
A048331	v -> Predicates.REPDIGIT.is(6, v)
A048332	v -> Predicates.REPDIGIT.is(7, v)
A048333	v -> Predicates.REPDIGIT.is(8, v)
A048334	v -> Predicates.REPDIGIT.is(9, v)
A010785	v -> Predicates.REPDIGIT.is(10, v)

# without digit 0 in base b
A000042	v -> Predicates.ZEROLESS.is(2, v)
A032924	v -> Predicates.ZEROLESS.is(3, v)
A023705	v -> Predicates.ZEROLESS.is(4, v)
A248910	v -> Predicates.ZEROLESS.is(6, v)
A255805	v -> Predicates.ZEROLESS.is(8, v)
A255808	v -> Predicates.ZEROLESS.is(9, v)
A052382	v -> Predicates.ZEROLESS.is(10, v)

# without digit c
A052383	v -> v.toString().indexOf('1') < 0
A052404	v -> v.toString().indexOf('2') < 0
A052405	v -> v.toString().indexOf('3') < 0
A052406	v -> v.toString().indexOf('4') < 0
A052413	v -> v.toString().indexOf('5') < 0
A052414	v -> v.toString().indexOf('6') < 0
A052419	v -> v.toString().indexOf('7') < 0
A052421	v -> v.toString().indexOf('8') < 0
A007095	v -> v.toString().indexOf('9') < 0

# p-smooth numbers
A003586	v -> Predicates.SMOOTH.is(3)
A051037	v -> Predicates.SMOOTH.is(5)
A002473	v -> Predicates.SMOOTH.is(7)
A051038	v -> Predicates.SMOOTH.is(11)
A080197	v -> Predicates.SMOOTH.is(13)
A080681	v -> Predicates.SMOOTH.is(17)
A080682	v -> Predicates.SMOOTH.is(19)
A080683	v -> Predicates.SMOOTH.is(23)

A014190	v -> Predicates.PALINDROME.is(3, v)
A014192	v -> Predicates.PALINDROME.is(4, v)
A029952	v -> Predicates.PALINDROME.is(5, v)
A029953	v -> Predicates.PALINDROME.is(6, v)
A029954	v -> Predicates.PALINDROME.is(7, v)
A029803	v -> Predicates.PALINDROME.is(8, v)
A029955	v -> Predicates.PALINDROME.is(9, v)
A002113	v -> Predicates.PALINDROME.is(10, v)
A029956	v -> Predicates.PALINDROME.is(11, v)
A029957	v -> Predicates.PALINDROME.is(12, v)
A029958	v -> Predicates.PALINDROME.is(13, v)
A029959	v -> Predicates.PALINDROME.is(14, v)
A029960	v -> Predicates.PALINDROME.is(15, v)
A029730	v -> Predicates.PALINDROME.is(16, v)
