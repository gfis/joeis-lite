#!perl

# Read joeis/src/irvine/math/predicate/Predicates.java and extract the corresponding A-numbers
# @(#) $Id$
# 2025-05-06, Georg Fischer: copied from read_functions.pl
#
#:# Usage:
#:#   perl read_predicates.pl [-d debug] infile.java > outfile.gen
#:#

#--------------------------------------------------------
use strict;
use integer;
use warnings;
my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime (time);
my $timestamp = sprintf ("%04d-%02d-%02d %02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min);
if (0 && scalar(@ARGV) == 0) {
    print `grep -E "^#:#" $0 | cut -b3-`;
    exit;
}
my $pwd = `pwd`;
$pwd =~ m{(\/joeis\-lite\/internal\/fischer\S*)};
print "# Generated by ..$1/$0 at $timestamp\n";
my $mode = "u";
my $debug = 0;
my $callcode = "predicates";
my $offset = 0;
while (scalar(@ARGV) > 0 and ($ARGV[0] =~ m{\A[\-\+]})) {
    my $opt = shift(@ARGV);
    if (0) {
    } elsif ($opt  =~ m{d}) {
        $debug     = shift(@ARGV);
    } elsif ($opt  =~ m{m}) {
        $mode      = shift(@ARGV);
    } else {
        die "invalid option \"$opt\"\n";
    }
} # while $opt

my $aseqno;
my $parm;
my ($varph1, $varph2) = ("_V1", "_V2"); # 1st and 2nd placeholder for parameters
while (<>) { # read inputfile
    s{\s+\Z}{}; # chompr
    my $line = $_;
    if ($line =~ m{\/\/ *\= *(A\d+.*)}) {
        my $list = $1; # rest behind "// = "
        $list =~ s{ |\;.*}{}g; # remove all whitespace and comments
        if ($line =~ m{Predicate(\d?\w?) +([A-Z0-9_]+)}) {
            my ($ifunc, $funame) = ($1, $2);
            foreach my $seq (split(/\, *\= */, $list)) {
                #           1    12    2
                $seq =~ m{\A(A\d+)(\(.*)?};
                ($aseqno, my $parm) = ($1, $2 || "(");
                $parm =~ s{\,\Z}{\, };
                if ($parm =~ m{\d\Z}) {
                   $parm .= ", ";
                }
              print join("\t", $aseqno, "v -> Predicates.$funame.is${parm}v)") . "\n";
            } # foreach seq
        } else {
            print "2: $line\n" if $debug >= 1;
        }
    } else {
        print "1: $line\n" if $debug >= 1;
    }
} # while <>

# append some additional ones
while(<DATA>) {
    if (m{^A\d+}) {
        print;
    }
} # while DATA
__DATA__
  /** Test if a number is a Super-Poulet number. */
  public static final Predicate SUPER_POULET = new SuperPoulet(); // =A050217

  /** Test if a number is brilliant: semiprime, and both primes with the same decimal length. */
  public static final Predicate2 BRILLIANT = new Brilliant(); // =A078972(10
  /** Test if a number is a palindrome in a base. */
  public static final Predicate2 PALINDROME = new Palindrome(); // =A002113(10   
  /** Test if a number is <code>t</code>-polygonal. */
  public static final Predicate2 POLYGONAL = new Polygonal(); // =A000217(3, =A000326(5, =A000384(6, =A000566(7, =A000567(8, =A001106(9, =A001107(10, =A051682(11, =A051624(12, =A051865(13, =A051866(14, =A051867(15, =A051868(16, =A051869(17, =A051870(18, =A051871(19, =A051872(20, =A051873(21, =A051874(22, =A051875(23, =A051876(24,
  /** Test if a number is a strong pseudoprime. */
  public static final Predicate2 STRONG_PSEUDOPRIME = new StrongPseudoprime(); // =A001262(2, =A020229(3, =A020230(4, =A020231(5, =A020232(6, =A020233(7, =A020326(100, etc.
